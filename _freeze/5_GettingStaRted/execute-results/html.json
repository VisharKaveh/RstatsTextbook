{
  "hash": "2147e140a48c2bb7fd4b7f9eafc50974",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nexecute:\n  echo: true\nbibliography: references.bib\n---\n\n\n\n\n\n\n# Getting sta`R`ted in `R` {#sec-GettingStaRted}\n\n#### **Chapter overview** {.unnumbered}\n\nNow that you have installed and tested `R` and RStudio, in this chapter, you will learn how to:\n\n-   Use the `R` Console.\n-   Do basic mathematical operations in `R`.\n-   Create and use `R` objects.\n-   Write and save `.R` scripts.\n-   Add comments to your scripts.\n-   Keep your cool when errors pop up! 😎\n\nIf you are already familiar with the basics of `R` and are keen to learn more about doing statistics in `R`, you can skip most of this chapter. That said, it's probably not a bad idea to have a go at the quiz questions and the final task to refresh your memory.\n\n## Using the Console\n\n::: {.content-visible when-format=\"html\"}\n[This is what you did in the previous chapter when you tested that RStudio was working properly (using the command: `plot(1:10)`).]{.aside}\n:::\n\nOne way to write `R` code in RStudio is to use the Console. If you set up RStudio as recommended [here](https://elenlefoll.github.io/RstatsTextbook/InstallingR.html#global-options), the Console should be in your top-right pane. You can type a line of code immediately after the command prompt `>` and press \"Enter\".\n\nData input is the most basic operation in `R`. Try inputting a number by typing it out in the Console and then pressing \"Enter\". `R` will interpret the number and return it. You can input both integers (whole numbers, e.g., `13`) and decimal numbers (e.g., `0.5`).\n\n![Inputting numbers in the Console](images/ConsoleInputNumbers.png){#fig-ConsoleInputNumbers fig-alt=\"Screenshot of RStudio showing the Console with the equation 13 + 0.5 = 13.5.\" width=\"450\"}\n\n`R` can handle not only numbers but also text data, known as \"character strings\" or just \"strings\". Strings must always be enclosed in quotation marks. You can choose to use either double quotation marks `\" \"` or single quotation marks `' '`, but it is important to be consistent. In this textbook, we will use double quotation marks throughout.\n\nTry first inputting a single word and then an entire sentence in the Console.\n\n![Inputting strings in the Console](images/ConsoleInputStrings.png){#fig-ConsoleInputStrings fig-alt=\"RStudio screenshot showing the input of two strings in the console\" width=\"450\"}\n\n::: callout-tip\n#### Quiz time!\n\n1\\) What happens if you enter a word without quotation marks?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"R returns an error indicating that you probably mistyped the word.\"/>\n<label>R returns an error indicating that you probably mistyped the word.</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"R returns an error message because it interprets the word as an object name or command.\"/>\n<label>R returns an error message because it interprets the word as an object name or command.</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_3\" value=\"R returns an error message indicating that it expected a number.\"/>\n<label>R returns an error message indicating that it expected a number.</label>\n<br/>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_4\" value=\"R automatically wraps the word in quotation marks and processes it as a string.\"/>\n<label>R automatically wraps the word in quotation marks and processes it as a string.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == 'R returns an error message because it interprets the word as an object name or command.'){text = '<br>That’s right. Without quotation marks, a string of characters is interpreted by <code>R</code> as the name of an object or function.';} else {text = '<br>No, this is not what happens. Have you tried it in your Console? What does the error message say?';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n:::\n\n## Doing maths in `R` {#sec-Maths}\n\n`R` can also be used as a very powerful calculator. The lines of code in @fig-ConsoleInputMathematicalOperations demonstrate mathematical operations involving addition (`+`), subtraction (`-`), division (`/`), and multiplication (`*`). Try out a few yourself!\n\n![Using the `R` Console as a calculator](images/ConsoleInputMathematicalOperations.png){#fig-ConsoleInputMathematicalOperations fig-alt=\"RStudio screenshot showing the console with the input of multiple mathematical operations.\" width=\"450\"}\n\n::: callout-tip\n#### Quiz time!\n\n2\\) Try entering `13^2` in the Console. What does the `^` (caret) operator do?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_2\" onsubmit=\"return validate_form_2()\" method=\"post\">\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_1\" value=\"The ^ operator performs an exponentiation operation, here 13 to the power of 2.\"/>\n<label>The ^ operator performs an exponentiation operation, here 13 to the power of 2.</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_2\" value=\"The ^ operator calculates the modulus of a number, here of 13 with 2 as the base.\"/>\n<label>The ^ operator calculates the modulus of a number, here of 13 with 2 as the base.</label>\n<br/>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_3\" value=\"The ^ operator creates a vector, here with 13 occurrences of the integer 2.\"/>\n<label>The ^ operator creates a vector, here with 13 occurrences of the integer 2.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_2\"></div>\n</form>\n<script>function validate_form_2() {var x, text; var x = document.forms['form_2']['answer_2'].value;if (x == 'The ^ operator performs an exponentiation operation, here 13 to the power of 2.'){text = 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!';} else {text = 'No. Compare the output of the operation 13^2 with 13*13. What do you notice?';} document.getElementById('result_2').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.'; res2 = document.getElementById('result_2').innerText == 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!';text = res1 + res2;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n \n\n3\\) Compare `13*13` with `13 * 13`. What is the difference in the output?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_3\" onsubmit=\"return validate_form_3()\" method=\"post\">\n<input type=\"radio\" name=\"answer_3\" id=\"answer_3_1\" value=\"There is no difference.\"/>\n<label>There is no difference.</label>\n<br/>\n<input type=\"radio\" name=\"answer_3\" id=\"answer_3_2\" value=\"Adding a space generates an error.\"/>\n<label>Adding a space generates an error.</label>\n<br/>\n<input type=\"radio\" name=\"answer_3\" id=\"answer_3_3\" value=\"It is impossible to add a space in the R Console.\"/>\n<label>It is impossible to add a space in the R Console.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_3\"></div>\n</form>\n<script>function validate_form_3() {var x, text; var x = document.forms['form_3']['answer_3'].value;if (x == 'There is no difference.'){text = 'That’s right. Adding spaces within operations makes no difference in R. However, it’s good practice to keep things consistent.';} else {text = 'No. Have you tried?';} document.getElementById('result_3').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.'; res2 = document.getElementById('result_2').innerText == 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!'; res3 = document.getElementById('result_3').innerText == 'That’s right. Adding spaces within operations makes no difference in R. However, it’s good practice to keep things consistent.';text = res1 + res2 + res3;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n:::\n\n## Working with `R` objects {#sec-WorkingRObjects}\n\nSo far, we have used the Console like a calculator. It's important to understand that, just like with a standard calculator, the output of all of our operations was not saved anywhere. If we want to store values, sequences of values, and the results of computations for later use, `R` allows us to store these as \"`R` objects\".\n\n### Creating objects\n\nWe use the assignment operator (`<-`) to assign a value or sequence of values to an object name.\n\nWrite out the following line to create an object called `my.favourite.number` that contains your own favourite number.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.favourite.number <- 13\n```\n:::\n\n\n\n\nWhen you enter this line in the Console and press \"Enter\", it should look like nothing happened: `R` does not return anything in the Console. Instead, it saves the output in an object called `my.favourite.number`. However, if you look in your Environment pane, you should see that an object has appeared (@fig-ObjectCreation).\n\n![Created object in the Environment pane](images/ObjectCreation.png){#fig-ObjectCreation fig-alt=\"RStudio screenshot showing that an object is now stored in the session environment in the left-hand pane.\" width=\"550\"}\n\nTo save an object containing a character string, we use quotation marks. Create an object called `my.favourite.word` containing your favourite word (in any written language of your choice).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.favourite.word <- \"empathy\"\n```\n:::\n\n\n\n\nYour Environment pane should now contain two objects. You can print the content of a stored object by entering the object name in the Console and then pressing \"Enter\" (see @fig-ShowObjects).\n\n[💡 Tip: If you're feeling lazy or simply want to avoid making a typo, you can type just the first few letters of an object name and then press the \"Tab\" key (`↹` or `⇥`). RStudio will then give you a drop-down menu with possible options. Select the one you want by clicking on it or pressing \"Enter\".]{.aside .content-visible when-format=\"html\"}\n\n![Calling up stored objects in the Console to view their content](images/ShowObjects.png){#fig-ShowObjects fig-alt=\"RStudio screenshot showing two stored objects printed in the console.\" width=\"450\"}\n\n### Object types\n\nThese two objects are of different types. We can use the `class()` function to find out which type of object an object is.\n\n![Using the `class()` function](images/ShowObjectClass.png){#fig-ShowObjectClass fig-alt=\"RStudio screenshot showing the object types with the class() function from two stored objects.\" width=\"450\"}\n\nHere, `my.favourite.number` is a numeric object, while `my.favourite.word` is a character object.\n\n### Naming objects {#sec-NamingObjects}\n\nObject naming conventions in `R` are fairly flexible. We can use dots (`.`), underscores (`_`) and capital letters to make our object names maximally informative and easy for us humans to read. However, spaces and other symbols are not allowed. All of these options work:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword2 <- \"cheerful\"\nmy.second.word <- \"cheerful\"\nmy_second_word <- \"cheerful\"\nMySecondWord <- \"cheerful\"\n```\n:::\n\n\n\n\n![Environment pane showing all of the objects currently stored in the `R` session environment](images/MultipleObjectsEnvironmentPane.png){#fig-MultipleObjectsEnvironmentPane fig-alt=\"RStudio screenshot showing the environment pane with six stored objects.\" width=\"550\"}\n\n::: callout-tip\n#### Quiz time!\n\n4\\) Which of these object names are *not* allowed in `R`? Try to create an object with each of these names and see if you get an error message or not.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_4\" onsubmit=\"return validate_form_4()\" method=\"post\">\n<input type=\"checkbox\" id=\"answer_4_1\" value=\"BestWordEver!\"/>\n<label>BestWordEver!</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_2\" value=\"my-favourite-word\"/>\n<label>my-favourite-word</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_3\" value=\"1TopWord\"/>\n<label>1TopWord</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_4\" value=\"Top1Word\"/>\n<label>Top1Word</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_5\" value=\"Agnès.Favourite.Word\"/>\n<label>Agnès.Favourite.Word</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_4_6\" value=\"top word\"/>\n<label>top word</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_4\"></div>\n</form>\n<script>function validate_form_4() {var text; var x1 = document.getElementById('answer_4_1'); var x2 = document.getElementById('answer_4_2'); var x3 = document.getElementById('answer_4_3'); var x4 = document.getElementById('answer_4_4'); var x5 = document.getElementById('answer_4_5'); var x6 = document.getElementById('answer_4_6'); if (x1.checked == true&x2.checked == true&x3.checked == true&x4.checked == false&x5.checked == false&x6.checked == true){text = 'That’s right! 🎉';} else {text = 'Not quite. Try again!';} document.getElementById('result_4').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.'; res2 = document.getElementById('result_2').innerText == 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!'; res3 = document.getElementById('result_3').innerText == 'That’s right. Adding spaces within operations makes no difference in R. However, it’s good practice to keep things consistent.'; res4 = document.getElementById('result_4').innerText == 'That’s right! 🎉';text = res1 + res2 + res3 + res4;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_68848\" onmouseover=\"return show_hint_68848()\"><br>😇 Hover for a hint</div>\n<div id=\"result_68848\" onmouseover=\"return show_hint_68848()\"></div>\n<script>function show_hint_68848(){var x = document.getElementById('result_68848').innerHTML; if(!x){document.getElementById('result_68848').innerHTML = 'Four of these object names are problematic and will return errors.';} else {document.getElementById('result_68848').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n\n:::\n\nObject names should not contain spaces or symbols like `!`, nor should they contain hyphens as the hyphen is reserved for the mathematical operator \"minus\". Digits can be used anywhere except at the beginning of an object name. And whilst it is possible to have special characters such as accented letters like \"è\", it is not recommended that you use them for object names.\n\n### Overwriting and deleting objects\n\nObject names are unique. If you create a new object with an existing object name, it will overwrite the existing object with the new one. In other words, you will lose the values that you saved in the original object. Try it out by running this line and observing what happens in your Environment pane:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword2 <- \"surprised\"\n```\n:::\n\n\n\n\nEarlier on, you created an object called `word2` which contained the string \"cheerful\". But, by running this new line of code, \"cheerful\" has been replaced by the string \"surprised\" - with no warning that you were about to permanently delete \"cheerful\"! 😲\n\nThe command to delete a single object from your environment is `remove()` or `rm()`. Hence, to permanently delete the object `MySecondWord`, you can use either of these commands:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove(MySecondWord)\nrm(MySecondWord)\n```\n:::\n\n\n\n\n## Working with `.R` scripts\n\nIf we shut down RStudio right now, we will lose all of our work so far. This is because the objects that we have created are only saved in the environment of our current `R` session. Whilst this might sound reckless, it is actually a good thing: In @sec-GlobalOptions we set our 'Global Options' settings in RStudio such that, whenever we restart RStudio, we begin with a clean slate, or a perfectly clean and tidy kitchen. We don't want any dirty dishes or stale ingredients lying around when we enter the kitchen! With this in mind, close RStudio now and open it again to start a new `R` session.\n\nYou should now have an empty history in your Console pane and an empty Environment pane. Whilst nobody wants to start cooking in a messy kitchen, it's also true that, if we want to remember what we did in a previous cooking/baking session, we should write it down. The pages of our recipe book are `.R` scripts. In the following, we will see that writing scripts is much better than running everything from the Console. It allows us to save and rerun our entire analysis pipeline any time we want. It also ensures that our analyses are reproducible and saves us time as we don't have to rewrite our code every time. Crucially, if we made a mistake at any stage, we can go back and correct it and rerun the entire corrected script at the click of a button.\n\n### Creating a new `.R` script\n\nThere are three ways to create a new `.R` script in RStudio. Pick the one that you like best:\n\n1.  Navigate to the top menu item \"File\", then select \"New File\", then click on \"R Script\".\n2.  Click on the icon with a white page and a green plus button in the top left corner of the tool bar.\n3.  Use the keyboard shortcut `Shift + Ctrl/Cmd + N`.\n\nWhichever option you chose, RStudio should have opened an empty file in a fourth pane (see @fig-NewScript). This is the “Source pane” and it should have appeared in the top-left corner of your RStudio window.\n\n![RStudio window showing a new, empty `.R` script that has yet to be saved](images/RStudioNewRScript.png){#fig-NewScript fig-alt=\"Screenshot showing a new, empty .R script that has yet to be saved in the top-right pane of RStudio\" width=\"557\"}\n\n### Running code from an `.R` script\n\nWe can now type our code in this empty `.R` script in the Source pane, just like we did in the Console. Type the following lines of code in the script (see @fig-NewScript2):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n13*13\nmy.favourite.number <- 13\nmy.favourite.word <- \"empathy\"\n```\n:::\n\n\n\n\nYou will have noticed that when you pressed \"Enter\" after every line, nothing happened: Nowhere can we see the result of `13*13`, nor have our two objects been saved to the environment as the Environment pane remains empty (see @fig-NewScript2). Just like a recipe for a cake is not an actual, delicious cake, but simply a set of instructions, a script is only a text file that contains lines of code as instructions. For these instructions to be executed, we need to send them to the `R` Console where they will be interpreted as `R` code.\n\n![Writing code in an `.R` script](images/NewScript.png){#fig-NewScript2 fig-alt=\"RStudio window showing new R script with the following lines of code: 13*13 my.favourite.number <- 13 my.favourite.word <- \\\"empathy\\\". The script is currently unsaved. The environment pane is empty and so is the console output.\"}\n\nTo send a line of code to the Console (also referred to as \"running\" a line of code), select the line that you want to excecute, or place your mouse cursor anywhere within that line and then click on the \"Run\" button (in the top-right corner of the pane, see @fig-NewScript) or use the keyboard shortcut `Ctrl/Cmd + Enter`.\n\nTry out these two options to run the three lines of code of your script and check that a) you are seeing the result of the mathematical operation in the Console output and b) two objects have been added to your environment.\n\n### Saving an `.R` script\n\nIt is now very easy to rerun this script any time we want to redo this calculation and recreate these two `R` objects. However, our `.R` script is not yet saved! RStudio is warning us about this by highlighting the file name \"Untitled1\\*\" in red (see @fig-NewScript). Just like with any unsaved computer file, if we were to shut RStudio down now, we would lose our work. So, let us save this `.R` script locally, that is on our own computer. To do so either:\n\n1.  Navigate to the top menu item \"File\" and then click on \"Save\",\n2.  Click on the save icon 💾, or\n3.  Use the keyboard shortcut `Ctrl/Cmd+ S`.\n\nGive your script a meaningful file name. Remember that file names should be both computer-readable and human-readable. If you navigate to the folder where you saved your `.R` script, you should see that its file extension is `.R`. You should also see that it is a tiny file because it contains nothing more than a few lines of text. If you double click on an `.R` file, RStudio should automatically open it. However, if you wanted, you could open `.R` files with any text-processing software, such as LibreOffice Writer or Microsoft Word.\n\n### Writing comments in scripts {#sec-Comments}\n\nJust like in a recipe book, in addition to writing the actual instructions, we can also write some notes, for example to remind ourselves of why we did things in a particular way or for what occasion we created a special dish. In programming, notes are called \"comments\" and they are typically preceded by the `#` symbol.\n\nThus, if a line starts with a `#` symbol, we say that it is \"commented out\". RStudio helpfully displays lines that are commented out in a different colour. These lines will not be interpreted as code even if you send them to the Console. Write the following lines in your script and then try to run them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#13^13\n\n#StringObject3 <- \"This line has been commented out so the object will not be saved in the environment even if you try to run it.\"\n```\n:::\n\n\n\n\nAs you can see, nothing happens. You can also add comments next to a line of interpretable code. In this case, the code is interpreted up until the `#`. This can be helpful to make a note of what a line of code does, e.g.:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(169) # Here the sqrt() function will compute the square root of 169.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13\n```\n\n\n:::\n:::\n\n\n\n\nIt is good practice to comment your code when working in an `.R` script. Comments are crucial for other people to understand what your code does and how it achieves that. But even if you are confident that you are the only person who will ever use your code, it is still a very good idea to use comments to make notes documenting your intentions and your reasoning as you write your script.\n\nFinally, writing comments in your code as you work through the examples in this book is a great way to reinforce what you are learning. From this chapter onwards, I recommend that, for each chapter, you create an `.R` script documenting what you have learnt, adding lots of comments to help you remember how things work. This is generally more efficient (and less error-prone!) than trying to take notes in a separate document (e.g., in a Microsoft Word file) or on paper.\n\n## Using relational operators {#sec-RelationalOperators}\n\nNow that we have saved some objects in our environment, we can use them in calculations. Try out the following operations (and any other that take your fancy) with your own favourite number:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.favourite.number / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.5\n```\n\n\n:::\n\n```{.r .cell-code}\nmy.favourite.number * my.favourite.number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 169\n```\n\n\n:::\n:::\n\n\n\n\nIn additional to the mathematical operations that we saw in @sec-Maths, we can also use relational operators such `>`, `<`, `<=`, `>=`, `==` and `!=` to make all kinds of comparisons. Try out the following commands to understand how these relational operators work and then have a go at the quiz questions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.favourite.number > 10\nmy.favourite.number < 10\nmy.favourite.number == 25\nmy.favourite.number >= 13\nmy.favourite.number <= -13\nmy.favourite.number != 25\n```\n:::\n\n\n\n\n::: callout-tip\n#### Quiz time!\n\n5\\) What is the relational operator that checks whether a value is \"more than or equal to\" another value?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_26990\" onsubmit=\"return validate_form_26990()\" method=\"post\">\n<input type=\"text\" placeholder=\"\" name=\"answer_26990\"/>\n<input type=\"submit\" value=\"check\"/>\n<div id=\"result_26990\"></div>\n</form>\n<script>function validate_form_26990() {var x, text; var x = document.forms['form_26990']['answer_26990'].value;if (x == '>='){text = 'That’s right!';} else {text = 'No. Experiment with the lines of code above to find the correct operator.';} document.getElementById('result_26990').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.'; res2 = document.getElementById('result_2').innerText == 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!'; res3 = document.getElementById('result_3').innerText == 'That’s right. Adding spaces within operations makes no difference in R. However, it’s good practice to keep things consistent.'; res4 = document.getElementById('result_4').innerText == 'That’s right! 🎉'; res5 = document.getElementById('result_26990').innerText == 'That’s right!';text = res1 + res2 + res3 + res4 + res5;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_26714\" onmouseover=\"return show_hint_26714()\">😇 Hover for a hint</div>\n<div id=\"result_26714\" onmouseover=\"return show_hint_26714()\"></div>\n<script>function show_hint_26714(){var x = document.getElementById('result_26714').innerHTML; if(!x){document.getElementById('result_26714').innerHTML = 'This operator is a combination of two symbols.';} else {document.getElementById('result_26714').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n\n\n \n\n6\\) What is the relational operator that checks whether a value \"is not equal to\" another value?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_10796\" onsubmit=\"return validate_form_10796()\" method=\"post\">\n<input type=\"text\" placeholder=\"\" name=\"answer_10796\"/>\n<input type=\"submit\" value=\"check\"/>\n<div id=\"result_10796\"></div>\n</form>\n<script>function validate_form_10796() {var x, text; var x = document.forms['form_10796']['answer_10796'].value;if (x == '!='){text = 'That’s right!';} else {text = 'No. Experiment with the lines of code above to find the correct operator.';} document.getElementById('result_10796').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.'; res2 = document.getElementById('result_2').innerText == 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!'; res3 = document.getElementById('result_3').innerText == 'That’s right. Adding spaces within operations makes no difference in R. However, it’s good practice to keep things consistent.'; res4 = document.getElementById('result_4').innerText == 'That’s right! 🎉'; res5 = document.getElementById('result_26990').innerText == 'That’s right!'; res6 = document.getElementById('result_10796').innerText == 'That’s right!';text = res1 + res2 + res3 + res4 + res5 + res6;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_25371\" onmouseover=\"return show_hint_25371()\">😇 Hover for a hint</div>\n<div id=\"result_25371\" onmouseover=\"return show_hint_25371()\"></div>\n<script>function show_hint_25371(){var x = document.getElementById('result_25371').innerHTML; if(!x){document.getElementById('result_25371').innerHTML = 'This operator is a combination of two symbols.';} else {document.getElementById('result_25371').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n\n:::\n\nThe relational operators `==` and `!=` can also be used with character objects. Find out how they work by first creating a new character object with a word that was added to the 2025 edition of the popular French dictionary *Petit Larousse*:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNew.French.Word <- \"écogeste\"\n```\n:::\n\n\n\n\nThen copy these lines of code to test how these relational operators work with string characters.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNew.French.Word == \"écogeste\" \nNew.French.Word != \"trottinettiste\"\n```\n:::\n\n\n\n\nYou will have noticed that the relational operator `==` tests whether two strings are the same and returns `TRUE` if that's the case. In contrast, `!=` tests whether two strings are different and will therefore return `FALSE` if they are not different.\n\n::: callout-tip\n#### Quiz time!\n\nAbove, we created the following `R` character string object:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNew.French.Word <- \"écogeste\"\n```\n:::\n\n\n\n\n7\\) Why does this line of code return `FALSE` even though `New.French.Word` was assigned the character string \"écogeste\"?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNew.French.Word == \"ecogeste\"\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_7\" onsubmit=\"return validate_form_7()\" method=\"post\">\n<input type=\"radio\" name=\"answer_7\" id=\"answer_7_1\" value=\"Because &quot;écogeste&quot; and &quot;ecogeste&quot; are two different strings in R.\"/>\n<label>Because \"écogeste\" and \"ecogeste\" are two different strings in R.</label>\n<br/>\n<input type=\"radio\" name=\"answer_7\" id=\"answer_7_2\" value=\"Because R automatically removed the accent as object names must be in English.\"/>\n<label>Because R automatically removed the accent as object names must be in English.</label>\n<br/>\n<input type=\"radio\" name=\"answer_7\" id=\"answer_7_3\" value=\"Because == cannot be used to compare character strings in French.\"/>\n<label>Because == cannot be used to compare character strings in French.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_7\"></div>\n</form>\n<script>function validate_form_7() {var x, text; var x = document.forms['form_7']['answer_7'].value;if (x == 'Because \"écogeste\" and \"ecogeste\" are two different strings in R.'){text = 'Correct! The string saved as New.French.Word is “écogeste” not “ecogeste”.';} else {text = 'No, that’s not the reason.';} document.getElementById('result_7').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.'; res2 = document.getElementById('result_2').innerText == 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!'; res3 = document.getElementById('result_3').innerText == 'That’s right. Adding spaces within operations makes no difference in R. However, it’s good practice to keep things consistent.'; res4 = document.getElementById('result_4').innerText == 'That’s right! 🎉'; res5 = document.getElementById('result_26990').innerText == 'That’s right!'; res6 = document.getElementById('result_10796').innerText == 'That’s right!'; res7 = document.getElementById('result_7').innerText == 'Correct! The string saved as New.French.Word is “écogeste” not “ecogeste”.';text = res1 + res2 + res3 + res4 + res5 + res6 + res7;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n \n\n8\\) Why does this line of code return `FALSE`?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNew.French.Word == \" écogeste\"\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_8\" onsubmit=\"return validate_form_8()\" method=\"post\">\n<input type=\"radio\" name=\"answer_8\" id=\"answer_8_1\" value=\"Because string objects cannot include any special characters. This includes spaces.\"/>\n<label>Because string objects cannot include any special characters. This includes spaces.</label>\n<br/>\n<input type=\"radio\" name=\"answer_8\" id=\"answer_8_2\" value=\"Because R is case-sensitive.\"/>\n<label>Because R is case-sensitive.</label>\n<br/>\n<input type=\"radio\" name=\"answer_8\" id=\"answer_8_3\" value=\"Because this string includes an additional space character.\"/>\n<label>Because this string includes an additional space character.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_8\"></div>\n</form>\n<script>function validate_form_8() {var x, text; var x = document.forms['form_8']['answer_8'].value;if (x == 'Because this string includes an additional space character.'){text = 'Correct! The extra space means that this string does not match the string saved as New.French.Word in the environment.';} else {text = 'No, that’s not the reason.';} document.getElementById('result_8').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.'; res2 = document.getElementById('result_2').innerText == 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!'; res3 = document.getElementById('result_3').innerText == 'That’s right. Adding spaces within operations makes no difference in R. However, it’s good practice to keep things consistent.'; res4 = document.getElementById('result_4').innerText == 'That’s right! 🎉'; res5 = document.getElementById('result_26990').innerText == 'That’s right!'; res6 = document.getElementById('result_10796').innerText == 'That’s right!'; res7 = document.getElementById('result_7').innerText == 'Correct! The string saved as New.French.Word is “écogeste” not “ecogeste”.'; res8 = document.getElementById('result_8').innerText == 'Correct! The extra space means that this string does not match the string saved as New.French.Word in the environment.';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n \n\n9\\) Why does this line of code return `FALSE`?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNew.French.Word == \"Écogeste\"\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_9\" onsubmit=\"return validate_form_9()\" method=\"post\">\n<input type=\"radio\" name=\"answer_9\" id=\"answer_9_1\" value=\"Because this word is not in the dictionary of the Académie Française.\"/>\n<label>Because this word is not in the dictionary of the Académie Française.</label>\n<br/>\n<input type=\"radio\" name=\"answer_9\" id=\"answer_9_2\" value=\"Because R is case-sensitive.\"/>\n<label>Because R is case-sensitive.</label>\n<br/>\n<input type=\"radio\" name=\"answer_9\" id=\"answer_9_3\" value=\"Because strings should never start with a capital letter.\"/>\n<label>Because strings should never start with a capital letter.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_9\"></div>\n</form>\n<script>function validate_form_9() {var x, text; var x = document.forms['form_9']['answer_9'].value;if (x == 'Because R is case-sensitive.'){text = 'Correct! Being case-sensitive means that lower-case letters and upper-case letters are interpreted as two different sets of characters.';} else {text = 'No, that’s not the reason.';} document.getElementById('result_9').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.'; res2 = document.getElementById('result_2').innerText == 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!'; res3 = document.getElementById('result_3').innerText == 'That’s right. Adding spaces within operations makes no difference in R. However, it’s good practice to keep things consistent.'; res4 = document.getElementById('result_4').innerText == 'That’s right! 🎉'; res5 = document.getElementById('result_26990').innerText == 'That’s right!'; res6 = document.getElementById('result_10796').innerText == 'That’s right!'; res7 = document.getElementById('result_7').innerText == 'Correct! The string saved as New.French.Word is “écogeste” not “ecogeste”.'; res8 = document.getElementById('result_8').innerText == 'Correct! The extra space means that this string does not match the string saved as New.French.Word in the environment.'; res9 = document.getElementById('result_9').innerText == 'Correct! Being case-sensitive means that lower-case letters and upper-case letters are interpreted as two different sets of characters.';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n\n \n\n10\\) Why does this line of code return `FALSE`?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNew.French.Word != \"écogeste\"\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_10\" onsubmit=\"return validate_form_10()\" method=\"post\">\n<input type=\"radio\" name=\"answer_10\" id=\"answer_10_1\" value=\"Because écogeste is no longer a new French word.\"/>\n<label>Because écogeste is no longer a new French word.</label>\n<br/>\n<input type=\"radio\" name=\"answer_10\" id=\"answer_10_2\" value=\"Because this string is in a different text encoding.\"/>\n<label>Because this string is in a different text encoding.</label>\n<br/>\n<input type=\"radio\" name=\"answer_10\" id=\"answer_10_3\" value=\"Because this command asks whether New.French.Word is not equal to &quot;écogeste&quot;.\"/>\n<label>Because this command asks whether New.French.Word is not equal to \"écogeste\".</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_10\"></div>\n</form>\n<script>function validate_form_10() {var x, text; var x = document.forms['form_10']['answer_10'].value;if (x == 'Because this command asks whether New.French.Word is not equal to \"écogeste\".'){text = 'That’s right!';} else {text = 'No, that’s not the reason.';} document.getElementById('result_10').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10;res1 = document.getElementById('result_1').innerText == 'That’s right. Without quotation marks, a string of characters is interpreted by R as the name of an object or function.'; res2 = document.getElementById('result_2').innerText == 'That’s right. Raising 13 to the power of 2 gives us the square of 13. Which is why the output is the same as for 13*13!'; res3 = document.getElementById('result_3').innerText == 'That’s right. Adding spaces within operations makes no difference in R. However, it’s good practice to keep things consistent.'; res4 = document.getElementById('result_4').innerText == 'That’s right! 🎉'; res5 = document.getElementById('result_26990').innerText == 'That’s right!'; res6 = document.getElementById('result_10796').innerText == 'That’s right!'; res7 = document.getElementById('result_7').innerText == 'Correct! The string saved as New.French.Word is “écogeste” not “ecogeste”.'; res8 = document.getElementById('result_8').innerText == 'Correct! The extra space means that this string does not match the string saved as New.French.Word in the environment.'; res9 = document.getElementById('result_9').innerText == 'Correct! Being case-sensitive means that lower-case letters and upper-case letters are interpreted as two different sets of characters.'; res10 = document.getElementById('result_10').innerText == 'That’s right!';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9 + res10;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n\n:::\n\n## Dealing with errors 🤬 {#sec-Errors}\n\nIf you try to run code that `R` cannot interpret, your Console will display an error message in red. A large part of learning to code is really about learning how to interpret these error messages, and making the most common errors often enough that you immediately know how to fix them. The process of fixing programming errors is called **debugging** and often involves an array of emotions (see @fig-DebuggingMonster).\n\n![The joys of debugging by [\\@allison_horst](https://allisonhorst.com/allison-horst).](images/DebuggingMonsters.png){#fig-DebuggingMonster fig-alt=\"A cartoon of a fuzzy round monster face showing 10 different emotions experienced during the process of debugging code. The progression goes from (1) “I got this” - looking determined and optimistic; (2) “Huh. Really thought that was it.” - looking a bit baffled; (3) “...” - looking up at the ceiling in thought; (4) “Fine. Restarting.” - looking a bit annoyed; (5) “OH WTF.” Looking very frazzled and frustrated; (6) “Zombie meltdown.” - looking like a full meltdown; (7) (blank) - sleeping; (8) “A NEW HOPE!” - a happy looking monster with a lightbulb above; (9) “insert awesome theme song” - looking determined and typing away; (10) “I love coding” - arms raised in victory with a big smile, with confetti falling.\"}\n\nIn `R`, you will regularly encounter one particular problem that we will call the \"plus-situation\". Let's take a closer look at this error. Copy and paste this exact line of code in your `R` Console and hit \"Enter\" to run it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(my.favourite.number\n```\n:::\n\n\n\n\nNotice that, in this erroneous line of code, we have (intentionally) forgotten to include the final bracket. As a result, after you hit \"Enter\", the Console output shows a \"`+`\" instead of the result of the mathematical operation (see @fig-ConsoleIncompleteFunction). The \"`+`\" indicates that the line is incomplete and therefore cannot be interpreted yet. Whenever you see a \"`+`\" at the start of a command in the Console, `R` is asking you to complete your line of code.\n\n![Incomplete function in console](images/ConsoleUncompleteFunction.png){#fig-ConsoleIncompleteFunction fig-alt=\"RStudio screenshot showing the console with an incomplete function and a red ellipse around the +-symbol.\" width=\"450\"}\n\nThere are two ways to fix this. The first method is to complete the line of code directly in the Console. In the above case, this means adding the closing bracket \"`)`\" after the \"`+`\" and hitting \"Enter\" again. Now that the line has been completed, `R` is able to interpret it as a valid `R` command and therefore outputs the expected result.\n\nIf you are running a line of code just once, from the Console, this first method is fine. As we have seen above, however, most of the time, you will write your code in a script rather than in the Console. So this first, on-the-fly method is only recommendable for lines of code that you will genuinely only need once. These include commands to install packages, like `install.packages(\"janeaustenr\")`, or to consult documentation files, e.g., `help(janeaustenr)`.\n\nGiven that we will mostly be working in scripts to ensure that our analyses are reproducible (see [Chapter 13](https://elenlefoll.github.io/RstatsTextbook/13_LiterateProgramming.html)), let's now generate this error from an `.R` script. To do so, copy and paste the erroneous line of code in your `.R` script and try to run it by either clicking on the \"Run\" icon or using the shortcut `Ctrl/Cmd + Enter`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(my.favourite.number\n```\n:::\n\n\n\n\nAgain, our incomplete line of code cannot be interpreted and this generates a \"plus-situation\" appears in the Console. Now, correct the error in your script by adding the missing closing bracket and try to run the command again.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(my.favourite.number)\n```\n:::\n\n\n\n\nAs shown in @fig-ConsoleError, even though we have corrected the problem, we now get an error! 🤯 At first sight, this does not make sense, but look carefully at what happened in the Console: The line of code that `R` tried to interpret (in blue) is `sqrt(my.favourite.number + sqrt(my.favourite.number)`, i.e., the combination of the incomplete version of the command *plus* the complete one. This is obviously nonsense and `R` tells us so by outputting an error message (see @fig-ConsoleError)!\n\n![Error message in console](images/ConsoleError.png){#fig-ConsoleError fig-alt=\"RStudio screenshot showing the console with an error.\" width=\"450\"}\n\nTo run a new line of code, we must see the command prompt `>` in the Console. So, let's generate the error again and learn how to fix it with the second method. Add this erroneous line to your script again and run it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(my.favourite.number\n```\n:::\n\n\n\n\nThe plus-situation arises again, but we will now solve it using the second method. Head over to the Console and place your cursor next to the `+`. This time, instead of completing the line by adding a closing bracket, press the Escape key (\"Esc\") on your keyboard. This will cancel the incomplete line of code. Then, you can add the missing `)` in your script and rerun the newly completed line of code from the Source pane.\n\nThis second method is the one you should use when you are documenting your code in a script. If you don't make the changes immediately in your script, you will forget and you will run into this error again in the future. Think of it like a pastry chef who realises that they need to put a little more baking powder in a cake batter for the texture to be just right, but does not make a note of that change in their recipe book. It's quite likely that the chef will forget the next time they bake the cake. If it is one of their assistants who prepares the batter, they will will have no way of knowing that the chef made that change!\n\nLearning to make sense of error messages is a very important skill that, like all skills, takes practice. Most errors are very easy to fix, if you keep your cool. In fact, 90% of errors are simply typos[^5_gettingstarted-1], so really nothing worth stressing about!\n\n[^5_gettingstarted-1]: I must confess that I made this number up. I don't have any reliable number, but it's fair to say that it's a very large proportion!\n\n::: callout-caution\n### Task 1\n\nCopy and paste the following lines of code in a new `.R` script. Try to run each line individually. Each line will generate an error of some kind. In some cases, RStudio will warn you in advance that a line of code is likely wrong by displaying a red cross icon to the left of the erroneous line. If you hover over the red cross icon, RStudio will display a message that may help you to fix the error.\n\nCan you decode the error messages to find out what is causing these errors and fix these ten erroneous commands?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.favourite.word <- \"empathy\"\nmy.favourite.number <- 13\n\n# Error 1:\nmy.favourite.number + my.favorite.number\n\n# Error 2:\nNegin-Fav-Word <- \"Ach so!\" \n\n# Error 3:\nmy.favourite.numbers^2\n\n# Error 4:\nömers_favourite_ number <- 52\n\n# Error 5:\n    ömers_favorite_number =   my.favourite..number\n\n# Error 6:\nmy.favourite.number*2 -> half.my.fav.number\n\n# Error 7:\nrose's.favourite.number <- 5\n\n# Error 8:\nBestWordEver <- \"supercalifragilisticexpialidocious\n\n# Error 9:\n2FavNumbers <- my.favourite.number + ömers_favourite_number\n\n# Error 10:\ngood.luck <- موفق باشيد\"\n```\n:::\n\n\n\n:::\n\nDebugging is an unavoidable part of writing code. If you're stuck and starting to feel frustrated, the best thing you can usually do is to take a short break!\n\n![ Time to take a break? (artwork by [\\@allison_horst](https://allisonhorst.com/allison-horst)).](images/AHorst_ErrorMonster.png){fig-alt=\"A frustrated little monster sits on the ground with his hat next to him, saying \\\"I just need a minute.\\\" Looking on empathetically is the R logo, with the word \\\"Error\\\" in many different styles behind it.\" width=\"450\"}\n\n::: {.callout-note collapse=\"true\"}\n#### Click here for the solutions to Task 1\n\n1.  The first error was `object 'my.favorite.number' not found`. This means that the object `my.favorite.number` is not stored in your environment. If you think it is, the problem is most likely due to a typo. Here, `my.favorite.number` uses American English spelling, whereas we used British English spelling (with a \"u\") when we created the object. To correct the error, you need to use exactly the same spelling as when you created the object.\n\n2.  The second error is also `object 'Negin' not found`. However, here we do not expect an object called `Negin` to be in the environment because what we are actually trying to do is create and save a new object called `Negin-Fav-Word`! The problem is that `R` interprets the hyphens in this object name as \"minus\" and therefore tries to find the object `Negin` in order to then subtract `Fav` and `Word` from it. To correct this error, you need to remove the hyphens or replace them by dots.\n\n3.  The third error is yet another `object not found error`. It is another typo: the correct object name is not in the plural form.\n\n4.  The fourth error is `Error: unexpected symbol in \"ömers_favourite_ number\"`. In addition, RStudio warned us that there were some \"unexpected tokens\" in this line of code. The unexpected item is the space between `_` and `number`. To fix this error, you need to remove this space character.\n\n5.  The object `my.favourite..number` is not found because the name of the object saved in the environment does not have two consecutive dots. Note that the error does *not* come from the fact that this line begins with some white space and includes multiple space characters after the `=` sign. These added spaces make the line more difficult for us humans to read, but `R` simply ignores them. Hence, to fix this error, what you need to do is remove one of the consecutive dots in the object name.\n\n    It is also worth noting that, once you've removed the extra dot, this line of code replaces the value originally stored in `ömers_favourite_number` with the value stored in `my.favourite.number`. If you check your environment pane, you will see that the command has changed `ömers_favourite_number` to `13` with no warning!! In other words, here, the equal sign `=` behaves in the same way as the assignment operator `<-`.\n\n6.  If you tried to run this line, you will have noticed that it does not actually generate an error. However, you may have noticed that the assignment operator is in the opposite direction (`->` instead of `<-`). This means that `my.favourite.number` times two is assigned to a new object called `half.my.fav.number`. Having observed this, you will hopefully want to either amend the line for it to make mathematical sense (`my.favourite.number/2 -> half.my.fav.number`) or change the name of the new object for it to be meaningful (`my.favourite.number*2 -> twice.my.fav.number`).\n\n7.  Running this line will have caused you to run into a `+` situation in the console. As explained in @sec-Errors, to get out of it, first take your mouse cursor to the Console pane and press the Escape key on your keyboard to cancel the erroneous line. Whilst there is no error message to help you understand where the problem is coming from, you should see that RStudio helpfully displays a red cross icon to the left of the line; hovering over it displays a multi-line message. The first line is the relevant one: `unexpected token 's.favourite.number <- 5`. This tells us that apostrophes are forbidden in object names. Remove the `'` and the error will be fixed.\n\n8.  This line also causes a `+` situation. In this case, it is due to a missing quotation mark. To fix this error, first cancel the incomplete line of code by escaping it. Then, add the missing double quotation mark in your script and rerun the completed line.\n\n9.  The message `Error: unexpected symbol in \"2FavNumbers\"` is due to the fact that object names cannot start with a number. Change the object name to something like `TwoFavNumbers` or `Fav2Numbers` to fix this error.\n\n10. Here, too, the error message reads: `unexpected symbol`. However, it is important to remember that the unexpected symbol is not within the character string, but rather has to do with the code syntax used to assign the Persian string to `good.luck`. In other words, the problem has nothing to do with the fact that the string is in Persian, but rather that one of the quotation marks is missing. You can fix the error by ensuring that the phrase is enclosed in quotation marks.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}