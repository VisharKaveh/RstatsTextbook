{
  "hash": "117dd8a5c81995f9d48ea52b58abb8ef",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nbibliography: references.bib\n---\n\n\n\n# Installing `R` and RStudio {#sec-InstallingR}\n\n#### **Chapter overview** {.unnumbered}\n\nThis chapter is designed to help you get started using `R` and *RStudio*, assuming no prior use of either. We will be covering the following topics:\n\n-   Why it's worth learning `R`\n-   Downloading `R` and *RStudio*\n-   Setting up *RStudio*\n-   Using the Console in *RStudio*\n-   Installing and loading `R` packages\n-   Accessing help files\n-   Citing packages\n\nIf you already have some experience of using `R` and *RStudio*, please ensure that both are up-to-date. Whilst parts of this chapter will likely be revision, others may be the opportunity to learn some new tips about setting up and using `R` in *RStudio*, installing and citing packages. Once you've skimmed through this chapter, feel free to swiftly move on to @sec-GettingStaRted.\n\n## Why learn `R`?\n\nIn short, because `R` can do it all! üôÉ This statement is only a slight exaggeration: `R` is indeed a highly **versatile** programming language and environment that allows us to do a multitude of tasks relevant to the language sciences. These include data handling and processing, statistical analysis, creating effective and appealing data visualisations, web scraping, text analysis, generating reports in various formats, designing web pages, and interactive apps, and much, much more! üí™\n\nWhilst some will claim that `R` has a steep learning curve, this textbook aims to prove that the opposite is true! Whilst it's fair to say that, as with all new things, it will take you a while to get the hang of it, once you've got started, you will see that your possibilities are (pretty much) endless and that learning how to do new things in `R` makes for fun and very rewarding challenges. What's more, this textbook introduces the *tidyverse* approach to programming in `R` (see @sec-tidyverse), which is particularly **accessible** to beginners. We will also use *RStudio* to access `R`, which makes things considerably more **intuitive** and generally easier to work with.\n\nCrucially, both `R` and the *RStudio Desktop* version that we will be using are **free** and **open source** (see @sec-OpenSource), which means that they are accessible to all, regardless of their institutional affiliation or professional status. This is in contrast to proprietary statistical software such as SPSS, for which you or your university needs to buy an expensive license. To get started in `R`, all you will need is access to the internet, a computer (unfortunately, a tablet will probably not suffice), and the intrinsic **motivation** to work your way through the fundamental skills taught in this textbook.\n\n> \\[Using R is\\] like the green and environment-friendly gardening alternative to buying plastic wrapped tomatoes in the supermarket that have no taste anyway ([Martin Schweinberger 2002 in 'Why R?'](https://slcladal.github.io/whyr.html)).\n>\n> ![\"[Tomato Harvest, Yellow & Red](https://www.flickr.com/photos/47264866@N00/9455141053)\" by [OakleyOriginals](https://www.flickr.com/photos/47264866@N00) ([CC BY 2.0](https://creativecommons.org/licenses/by/2.0/?ref=openverse)).](images/TomatoHarvest.jpg){#fig-tomatoes fig-alt=\"Photo of a gardener's tomato harvest, showing tomatoes are various sizes and colours.\" width=\"376\"}\n\nLast but not least, in choosing to learn `R`, you are entering a vibrant **community** of users. As an open-source programming environment, `R` is the product of many different people's contributions. Everyday, new packages, functions, and resources are being developed, improved, and shared with the community. Given that `R` has evolved into one of the most popular languages for **scientific programming** [and has become \"the de facto standard in the language sciences\" @WinterStatisticsLinguistsIntroduction2019, p. xiii], many of these have been created by scientists and are particularly well-suited to **research workflows**. Moreover, the `R` community is known for being welcoming, **supportive**, and **inclusive**. This is reflected in the strong presence of many community-led initiatives such as [RLadies+](https://rladies.org/), [RainbowR](https://rainbowr.netlify.app/), and [LatinR](https://latinr.org/), that encourage under-represented groups to participate in and contribute to the `R` community. ü§ó\n\n![Logo of the [RLadies Ribeir√£o Preto](https://rladiesrp.github.io/) meet-up group, one of [many RLadies+ chapters](https://benubah.github.io/r-community-explorer/rladies.html).](images/rladiesrp_logo.png){#fig-RLadies fig-alt=\"Hex sticker logo showing the R logo painted in the colours of the rainbow and the transgender flags\" fig-align=\"center\" width=\"250\"}\n\n#### *\"Look, I am studying a language/linguistics so why should I learn to code?\"* ü§î {.unnumbered}\n\nUsing scripts rather than GUI software will help you make your research **less error-prone**, more **transparent**, and **sustainable**. Being open-source, there are no restrictions as to who can run `R` code and older versions are available ensuring that exact reproduction is possible, even years later. As many other linguists use `R`, you will be able to **collaborate** with others and understand other researchers' `R` code. As we will see in @sec-LiteRateProgramming, in *RStudio*, it is also very easy to export `R` code and share your scripts, for example as part of an appendix to your research publication, in various formats (including `.html` that can be opened in any browser and `.pdf`).\n\nIn addition, learning to code in `R` is an excellent way to understand the fundamentals of **data literacy** and **statistical reasoning**. These are **skills** that are highly valued among employers, both in academia and the industry. Many companies, public institutions (e.g., ministries, hospitals, national agencies) and NGOs hire data scientists who often work in `R`. And, even if you end up doing little to no coding yourself, understanding the basic principles of programming is undoubtedly a highly useful skill in the modern world.\n\n::: {.callout-note collapse=\"true\"}\n### What about learning Python instead? üêç\n\nSome of you may be wondering whether you should be learning `Python` rather than `R`. Both are widely used languages in **scientific programming** and **data science**. At the time of writing, there are more resources specifically aimed at linguists and education researchers in `R` than there are in Python simply because it is currently the most widely used language in these disciplines. Should you wish to learn `Python` at a later stage, many of the same principles that you will have learned in this textbook will apply: it should feel somewhat like learning Italian when you already speak Spanish or French.\n:::\n\n## Installing R and *RStudio*\n\n### What are `R` and *RStudio*? And why do I need both? {#sec-IDE}\n\nAs a beginner, it's easy to confuse `R` and *RStudio*, but it's important to understand that they are two very different things. `R` is a programming environment for statistical computing and graphics that uses the programming language `R`. Think of it as the engine with which we will learn to perform lots of different tasks. *RStudio*, by contrast, is a set of tools, a so-called 'integrated development environment' (IDE). It makes working in `R` much more intuitive and efficient. If `R` is the engine of our car, you can imagine *RStudio* as our dashboard. Hence, even though we will later on appear to only be working in *RStudio*, `R` will actually be doing the heavy-lifting, under the hood.\n\n::: {#fig-Logos layout-ncol=\"2\"}\n![Logo of the programming language and environment `R`](images/Rlogo.png){#fig-RLogo fig-alt=\"R logo\" width=\"231\"}\n\n![Logo of the IDE *RStudio* (RStudio¬Æ is a trademark of Posit Software, PBC)](images/RStudio-Logo_Trademark.png){#fig-RStudioLogo fig-alt=\"RStudio logo\" width=\"185\" height=\"178\"}\n\nEven the two logos are easy to confuse, but remember that `R` and *RStudio* are two very different things!\n:::\n\n::: {.callout-note collapse=\"true\"}\n### Using other IDEs to work in `R`\n\nAt the time of writing, *RStudio* is the most widely used Integrated Development Environment (IDE) to work in `R`. However, it is worth noting that many other IDEs that can be used to access `R`. These include:\n\n-   [Jupyter notebook](https://jupyter.org/)\n\n-   [Visual Studio Code](https://code.visualstudio.com/)\n\n-   [PyCharm](https://www.jetbrains.com/pycharm/)\n\n-   [Eclipse](https://eclipseide.org/)\n\nWhilst this textbook will assume that everyone is working in *RStudio*, if you are already familiar with another IDE that works well with `R`, you are welcome to continue working in that IDE. Each IDE has a different feel to it and offers different functions so, ultimately, it'll be up to you to find the one that suits you best!\n:::\n\n### Installing `R` {#sec-installingR}\n\n1.  Go to the website of the Comprehensive R Archive Network (CRAN): <https://cran.r-project.org>.\n\n2.  Click on the \"Download R for ...\" link that matches your operating system (Linux, macOS or Windows), then:\n\n    -   For **Windows**, click on the top 'base' link, also marked as \"install R for the first time\" (Note that you should also use this link if you are updating your R version). On the next page, click on the top \"Download R\" link.\n    -   For **MacOS**, click on either the top `.pkg` link if you have an Apple silicon Mac (e.g., M1, M2, M3) or the second `.pkg` link, if you have an older Intel Mac.\n    -   For **Linux**, click on your Linux distribution and then follow the instructions on the following pages.\n\n3.  Once you have downloaded one of these `R` versions, navigate to the folder where you have saved it (by default, this will be your Downloads folder), and double click on the executable file to install `R`.\n\n4.  Follow the on-screen instructions to install `R`.\n\n5.  Test that `R` is correctly installed. On Windows and MacOS, navigate to your Applications folder and double click on the `R` icon. On Linux, open up `R` by typing `R` in your terminal. This should open up an R Console. You can type R commands into the Console after the command prompt `>`. Type the following R code after the command prompt and then press enter: `plot(1:10)`.\n\n::: {#fig-Rtest layout-ncol=\"2\"}\n![Test command in the R Console](images/RConsole.png){#fig-Console fig-alt=\"Screenshot of R Console showing the introduction text displayed starting R version 4.3.1 etc. and then, at the bottom, a single line of code reading plot(1:10)\"}\n\n![Resulting plot (note that the proportions of your plot may be different depending on the size of your window)](images/TestingRPlot.png){#fig-testplot fig-alt=\"A simple, black and white plot of the numbers 1 to 10 on both the x and y axes.\"}\n\nTesting R\n:::\n\n‚úÖ If you see the plot above, you have successfully installed and tested `R` and you can go on to installing RStudio.\n\n‚ö†Ô∏è If that's not the case, make a note of the errors produced (copy and paste them into a text document or take a screenshot) and search for solutions on the internet. It is very likely that many other people have already encountered the same problem as you and that someone from the `R` community has posted a solution online.\n\n::: {.callout-note collapse=\"true\"}\n### What to do if you cannot get R and/or *RStudio* working on your computer\n\nThe aim of this chapter is to install both `R` and *R Studio* on your own computer so that you can write and run your own scripts locally (i.e., on your own computer without the need for an internet connection). In some cases, however, this might not be possible. For example, because the programmes are not available for your operating system, or because you do not have admin rights on your computer, or because your disk is full and you cannot delete anything. None of these situations are ideal to do research, but don't give up on learning `R`: there is an alternative!\n\nYou can sign up to [Posit Cloud](https://posit.co/products/cloud/cloud/). Posit Cloud will allow you to run `R` in *RStudio* in a browser (e.g., Firefox or Chrome) without having to install anything on your computer. Although Posit Cloud's [free plan](https://posit.cloud/plans/free) is limited, it will suffice to learn the contents of this textbook. You will be able to follow the textbook in exactly the same way as everyone else. However, you will need a stable internet connection and you may find that you need to be a bit more patient as things are likely to run a little slower. If you decide to opt for the Posit Cloud solution, create a free account and then go straight to @sec-SettingupR.\n:::\n\n### Installing *RStudio* {#sec-installingRStudio}\n\nWhen you head over to their website, it may be confusing to you that the company that provides *RStudio*, Posit, also offers paid-for versions of *RStudio* and other paying services. Do not worry, we will not need any of these: These are products designed for companies and large organisations. The version of *RStudio Desktop* that we will be using, however, is free and, given that it is open source, even if Posit decided to stop working on this product one day, others in the `R` community would take over. Such is the beauty of [open-source software](https://elenlefoll.github.io/RstatsTextbook/OpenScholarship.html)! ü§ó\n\n1.  Head over to this page <https://posit.co/download/rstudio-desktop/> to download the latest version of *RStudio Desktop*.\n\n2.  As you have already installed `R`, you can jump straight to the section entitled \"2: Install RStudio\". The website should have detected which operating system your computer is running on, so that you can most likely simply click on the \"Download RStudio Desktop...\" button. Your download should start straight away.\n\n    -   If an incorrect operating system is detected, simply scroll down the page to find your operating system and download the corresponding version of *RStudio*.\n\n3.  Once you have downloaded *RStudio*, navigate to the folder where the downloaded file has been saved (by default, this will be your Downloads folder), and double-click on the executable file to install *RStudio*.\n\n4.  Follow the on-screen instructions to install *RStudio*.\n\nIf you run into any issues that you cannot solve with existing online posts, the [Posit Community forums](https://forum.posit.co/) are a good place to ask for help.\n\n## Setting up *RStudio* {#sec-SettingupR}\n\nFrom now on, we will only be accessing `R` through *RStudio*. When you open up *RStudio* for the first time, you might find the layout rather intimidating. The application window is divided into several sections, which we call **panes**. Each pane also has several **tabs**. Although it may seem overwhelming at first, you will soon see that these different panes and tabs will actually make life much easier.\n\n### Global options {#sec-GlobalOptions}\n\nBefore we get staRted properly, we need to change some of the default settings of *RStudio*. The first set of changes that we are going to make ensure that, each time we launch a new `R` session in *RStudio*, we start afresh.\n\nTo do so, head over to the 'Tools' drop-down menu and click on 'Global Options'. Make sure that the first three boxes are unticked (see @fig-GOGeneral). Under \"Save workspace to .RData on exit\", select the option \"Never\". Always starting afresh is good programming practice. It avoids any problems being carried over from previous `R` sessions. You can think of it like cooking in a freshly cleaned, tidy kitchen. It's much safer than preparing a meal in a messy, possibly even contaminated kitchen!\n\n::: {#fig-GlobalOptions layout-ncol=\"2\"}\n![General tab](images/RStudioGlobalOptionsGeneral.png){#fig-GOGeneral fig-alt=\"Screenshot from RStudio showing that the first three checkboxes should be empty.\"}\n\n![Code tab](images/RStudioGlobalOptionsCode.png){#fig-GOCode fig-alt=\"Screenshot from RStudio showing that the checkbox about the native pipe should be selected.\"}\n\n*RStudio*'s Global Options\n:::\n\nNext, under the 'Global Options' tab 'Code' of the 'Global Options' window, ensure that the fourth option \"Use native pipe operator\" is ticked (see @fig-GOCode). This is a new feature in `R` that is very useful so we will make use of it from @sec-Nesting onwards. The other options are not relevant for now.\n\nFinally, head over to the 'Pane Layout' tab. From here, you can rearrange the panes of your *RStudio* window. To do so, click on the ÔπÄ symbols to get a drop-down menu corresponding to each pane. You can also select which tabs you would like to see in each pane. If you are already familiar with *RStudio*, feel free to stick to your favourite set-up. Personally, I use the panes layout below and, if you are new to `R`, I recommend that you select this layout, too. You can always go back to these settings to change this set-up at any stage. Don't forget to click on 'OK' at the bottom of the 'Global Options' page to save your settings. Then, the panes in your *RStudio* window should be ordered as in @fig-RStudioNewLayout.\n\n::: {#fig-Panes layout-ncol=\"2\"}\n![Panes Layout tab](images/RStudioGlobalOptionsPanes.png){#fig-GOPanes fig-alt=\"Screenshot of the Global Options window showing the options to be selected to display the pane layout that Elen recommends.\"}\n\n![Customised panes layout](images/RStudioNewLayout.png){#fig-RStudioNewLayout fig-alt=\"Screenshot from RStudio showing the pane layout that Elen recommends.\"}\n\nRecommended *RStudio* panes layout\n:::\n\n### Testing RStudio\n\nIt is now time we tested whether *RStudio* is communicating well with `R`. To do so, let's run the same test as in the `R Console`. This time, head over to the **Console** tab in the top right pane of your *RStudio* window and, after the command prompt `>`, type: `plot(1:10)` and then press enter. You should see the same plot as earlier on (see @fig-testplot), appearing in the **Plots** tab of the bottom-right pane of your *RStudio* window.\n\nIf you get the following error message `Error in plot.new() : figure margins too large`, this is because your bottom-right pane is hidden from view or too small for the plot to be printed there. Click on the small two-window icon in the bottom-right corner if it is hidden (see @fig-MinimisedPlotPane). Or, if it is too small, click on the dividing line between the two right-hand side panes and, whilst still holding down the mouse button, drag up the line until it is about halfway up. Then, re-type the command `plot(1:10)` in the Console pane and press enter again. The plot should appear as in @fig-testplotRStudio.\n\n::: {#fig-testingRStudio layout-ncol=\"2\"}\n![Hidden (minimised) bottom-right pane](images/PlotMarginsError.png){#fig-MinimisedPlotPane fig-alt=\"Screenshot from RStudio showing an error message in the Console because the bottom-right pane is minimised.\"}\n\n![Now the dividing line between the two panes is halfway up and the plot has been successfully output in the Plots pane](images/TestplotRStudio.png){#fig-testplotRStudio fig-alt=\"Screenshot from RStudio showing that the bottom-right pane contains a dot plot\"}\n\nTesting that *RStudio* is communicating well with your `R` installation.\n:::\n\n## Installing `R` packages\n\n### What are packages?\n\nYou now have a base installation of `R`. Base `R` is very powerful and comes with many standard packages and functions that `R` users use on a daily basis. If you click on the **Packages** tab in the bottom-right pane and scroll down, you will see that there are many packages available. Only a few are selected. These are part of the base `R` installation.\n\nYou can think of base `R` as a fully functional student kitchen. It is rather small and only has the most essential ingredients and equipment, but it still has everything you need to cook simple, delicious meals. Downloading and installing additional packages is like buying fancier ingredients (i.e., packages with datasets) or more sophisticated and specialised kitchen devices (i.e., packages that provide additional functions).\n\nIn addition to the members of the R Core Team who develop and maintain base `R`, thousands of `R` users develop and share additional `R` packages every day. These enable us to vastly increase the capacities of base `R`. Packages are a very helpful way to bundle together a set of **functions**, **data**, and **documentation files** so that other `R` users can easily download these bundles and add them to their local `R` installation.\n\nThroughout this textbook, the names of packages will be enclosed in curly brackets like this: {ggplot2}.\n\n::: {.callout-tip collapse=\"false\"}\n#### Your turn! {.unnumbered}\n\n[**Q4.1**]{style=\"color:green;\"} Which of these packages is not part of base `R`?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_1\" onsubmit=\"return validate_form_1()\" method=\"post\">\n<label>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_1\" value=\"{ggplot2}\"/>\n{ggplot2}\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_2\" value=\"{graphics}\"/>\n{graphics}\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_3\" value=\"{stats}\"/>\n{stats}\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_1\" id=\"answer_1_4\" value=\"{datasets}\"/>\n{datasets}\n</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_1\"></div>\n</form>\n<script>function validate_form_1() {var x, text; var x = document.forms['form_1']['answer_1'].value;if (x == '{ggplot2}'){text = 'Correct! Though later on, we will install {ggplot2} as part of the {tidyverse} bundle of packages.';} else {text = 'No, this package is part of the base installation.';} document.getElementById('result_1').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_1').innerText == 'Correct! Though later on, we will install {ggplot2} as part of the {tidyverse} bundle of packages.';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q4.2**]{style=\"color:green;\"} Is it possible to create an `R` package that provides access to the full texts of all of Jane Austen's published novels for computational text analysis in `R`?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_2\" onsubmit=\"return validate_form_2()\" method=\"post\">\n<label>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_1\" value=\"Yes, pretty much anything is possible in R!\"/>\nYes, pretty much anything is possible in R!\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_2\" id=\"answer_2_2\" value=\"No way, that sounds impossible!\"/>\nNo way, that sounds impossible!\n</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_2\"></div>\n</form>\n<script>function validate_form_2() {var x, text; var x = document.forms['form_2']['answer_2'].value;if (x == 'Yes, pretty much anything is possible in R!'){text = 'Not only is it possible, but it has already been done. And what‚Äôs more, the creator of the package has shared it for the entire R community to use. üéâ';} else {text = 'Not only is it possible, but it has already been done. And what‚Äôs more, the creator of the package has shared it for the entire R community to use. üéâ';} document.getElementById('result_2').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2;res1 = document.getElementById('result_1').innerText == 'Correct! Though later on, we will install {ggplot2} as part of the {tidyverse} bundle of packages.'; res2 = document.getElementById('result_2').innerText == 'Not only is it possible, but it has already been done. And what‚Äôs more, the creator of the package has shared it for the entire R community to use. üéâ';text = res1 + res2;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q4.3**]{style=\"color:green;\"} Is the {janeaustenr} package installed as part of base `R`?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_3\" onsubmit=\"return validate_form_3()\" method=\"post\">\n<label>\n<input type=\"radio\" name=\"answer_3\" id=\"answer_3_1\" value=\"Yes\"/>\nYes\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_3\" id=\"answer_3_2\" value=\"No\"/>\nNo\n</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_3\"></div>\n</form>\n<script>function validate_form_3() {var x, text; var x = document.forms['form_3']['answer_3'].value;if (x == 'No'){text = 'Correct. And, in the next section, you will learn how to install it!';} else {text = 'No, it‚Äôs not. If you can find it in your Packages pane, this means that you installed it at some point.';} document.getElementById('result_3').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3;res1 = document.getElementById('result_1').innerText == 'Correct! Though later on, we will install {ggplot2} as part of the {tidyverse} bundle of packages.'; res2 = document.getElementById('result_2').innerText == 'Not only is it possible, but it has already been done. And what‚Äôs more, the creator of the package has shared it for the entire R community to use. üéâ'; res3 = document.getElementById('result_3').innerText == 'Correct. And, in the next section, you will learn how to install it!';text = res1 + res2 + res3;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n:::\n\n### Installing packages {#sec-Packages}\n\nTo install a package, you will first need to download it from the internet. Packages can be stored on any website, but the most trustworthy online repository for `R` packages and the easiest to work with is [CRAN](https://cran.rstudio.com/index.html) (Comprehensive R Archive Network). To install the {janeaustenr} package from CRAN, type the following command in the Console pane and then type enter: `install.packages(\"janeaustenr\")`.\n\nThis command will take a few seconds to run (or longer depending on how slow your internet connection is). You should then see a message in red in the Console indicating, among other things that you can ignore, that the package has been successfully downloaded and how big it is (here: 1.5 megabyte). The message also gives you path to where the package's content has been saved on your computer (see @fig-PckInstalled). You do not need to worry about any of the other information.\n\n![Screenshot showing that the package has been correctly installed.](images/JaneaustenrInstalled.png){#fig-PckInstalled fig-alt=\"Screenshot from RStudio. The Console output reads: trying URL 'https://cran.rstudio.com/bin/macosx/big-su r-arm64/contrib/4.3/janeaustenr_1.0.0.tgz' Content type 'application/x-gzip' length 1624062 bytes (1.5 MB) downloaded 1.5 MB The downloaded binary packages are in /var/folders/_x/ycbk0by91blbvnqkbtv105w0000g p/T//Rtmp5xaS1h/downloaded_packages\" width=\"450\"}\n\nTo check that the package has been successfully downloaded and installed, head over to the Packages tab of the bottom-right pane and scroll down to the {janeaustenr} package, or search for it using the search window within this same tab. The {janeaustenr} package should now be visible, which tells us that the package is installed on your computer. Note, however, that the checkbox next to it is currently empty. This means that the package hasn't been loaded in our current `R` session and therefore cannot be used yet.\n\n::: {.callout-note collapse=\"true\"}\n#### More ways of installing `R` packages\n\nThere are other ways to install packages, e.g., from [Bioconductor](https://www.bioconductor.org/) and [GitHub](https://github.com/).\n\nTo find out more, read [Section 1.5](https://intro2r.com/packages.html) from @douglasIntroduction2024, which is available as an Open Educational Resource (see @sec-OpenEducation).\n:::\n\n### Loading packages\n\nIf you want to use the fancy ingredient or new kitchen device that was delivered in the package that you installed, you first need to get it out of the fridge or the cupboard and place it on your kitchen counter. This is the equivalent of \"loading\" a package. The command to load a package is `library()`. This is because, rather confusingly, once they are unpacked (i.e., installed), packages are usually referred to as libraries.\n\nTo load the {janeaustenr} package, enter the following command in the Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janeaustenr)\n```\n:::\n\n\nIf you correctly installed the package and have not misspelt the command, it may look like nothing has happened, as the Console returns nothing (see first red ellipse on @fig-LoadingJane). However, if you go back to your Packages tab and scroll down to the {janeaustenr} package, you will see that the box next to it is now ticked (see second ellipse on @fig-LoadingJane). This means that the package is loaded and ready to be used.\n\n![Loading a library](images/LoadingJaneAustern.png){#fig-LoadingJane fig-alt=\"The screenshot shows that the command library (janeaustern) has been run in the console and that the console returned a new empty line and nothing else. The screenshot also shows the packages tab with the words \\\"jan\\\" in the search box and two packages displayed.  The first is the janeaustern package and the checkbox to the left of it is ticked. The second is a package that also starts with \\\"jan\\\" namely \\\"janitor\\\" but this one does not have a checked box next to it because it has not been loaded.\" width=\"404\"}\n\nNote that whilst you only need to install each package once, you will need to load it every time we want to use it in a new `R` session. This is because, when we close `R` and start a new `R` session, our kitchen is perfectly clean and tidy and everything is back in storage. And the good news is that we don't even need to do the washing-up! üôÉ\n\n## Package documentation {#sec-PackageDocumentation}\n\nTo find out more about any package or function, use the handy `help()` function or its shortcut `?`. For example, to find out more about the {janeaustenr} package, enter the command `help(janeaustenr)` or `?janeaustenr` in the Console. The help file will open up in the **Help** tab of the bottom-right pane (see @fig-RStudioNewLayout). It contains the name of the package and a short description, as well as the name of the package maintainer, Julia Silge, and some additional links.\n\nOne of these links takes us to the package creator's GitHub repository. This is where we can find a source code for the package, should we want to check how it works under the hood, or amend it in any way. Click on this link and scroll down the package's GitHub page to consult its **README file**. This document informs us that the package includes plain text versions of Jane Austen's six completed, published novels and tells us under what name they are stored within the library. For example, to access *Pride and Prejudice,* we need to load the library object `prideprejudice`.\n\nPick your favourite Jane Austen novel and enter its corresponding object name in the Console, e.g., `emma`. The entire novel will be printed in the Console output! You can print only a few lines by selecting them within square brackets. For example, the command `emma[20:25]` will print lines 20 to 25 of the object `emma` (see @fig-emma2025).\n\n![Screenshot showing a selection of lines from the object `emma` (note that you can adjust the size of the Console pane to see more or less of the text at any one time).](images/Emma2025.png){#fig-emma2025 fig-alt=\"Screenshot from RStudio. The command is: emma[20:25] and the Console output reads: [1] \\\"She was the youngest of the two daughters of a most affectionate,\\\"        [2] \\\"indulgent father; and had, in consequence of her sister's marriage, been\\\" [3] \\\"mistress of his house from a very early period. Her mother had died\\\"      [4] \\\"too long ago for her to have more than an indistinct remembrance of\\\"      [5] \\\"her caresses; and her place had been supplied by an excellent woman as\\\"   [6] \\\"governess, who had fallen little short of a mother in affection.\\\"\" width=\"400\"}\n\nTo find out more about a dataset or function within a package, use the functions `help()` or `?`, e.g., `help(emma)` or `?emma`. In this case, the help file provides us with a short description of this object and a link to the original source from which the package creator obtained the novel (which is in the [public domain](https://www.gutenberg.org/help/faq.html#what-books-does-project-gutenberg-publish), otherwise it would not be possible to share it in this way).\n\n::: {.callout-tip collapse=\"false\"}\n#### Your turn! {.unnumbered}\n\n[**Q4.4**]{style=\"color:green;\"} Which is the correct `R` object name to access Jane Austen's novel 'Sense and Sensibility'?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_12598\" onsubmit=\"return validate_form_12598()\" method=\"post\">\n<label>\n<input type=\"radio\" name=\"answer_12598\" id=\"answer_12598_1\" value=\"sensesensibility\"/>\nsensesensibility\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_12598\" id=\"answer_12598_2\" value=\"Sense&amp;Sensibility\"/>\nSense&amp;Sensibility\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_12598\" id=\"answer_12598_3\" value=\"Sense and Sensibility\"/>\nSense and Sensibility\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_12598\" id=\"answer_12598_4\" value=\"senseandsensibility\"/>\nsenseandsensibility\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_12598\" id=\"answer_12598_5\" value=\"Sensesensibility\"/>\nSensesensibility\n</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_12598\"></div>\n</form>\n<script>function validate_form_12598() {var x, text; var x = document.forms['form_12598']['answer_12598'].value;if (x == 'sensesensibility'){text = 'That‚Äôs right!';} else {text = 'No, if you enter this name in the Console, it will return an ‚Äúobject not found‚Äù error.';} document.getElementById('result_12598').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4;res1 = document.getElementById('result_1').innerText == 'Correct! Though later on, we will install {ggplot2} as part of the {tidyverse} bundle of packages.'; res2 = document.getElementById('result_2').innerText == 'Not only is it possible, but it has already been done. And what‚Äôs more, the creator of the package has shared it for the entire R community to use. üéâ'; res3 = document.getElementById('result_3').innerText == 'Correct. And, in the next section, you will learn how to install it!'; res4 = document.getElementById('result_12598').innerText == 'That‚Äôs right!';text = res1 + res2 + res3 + res4;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q4.5**]{style=\"color:green;\"} What is the source for the `R` object containing Jane Austen's novel 'Sense and Sensibility'?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_51820\" onsubmit=\"return validate_form_51820()\" method=\"post\">\n<label>\n<input type=\"radio\" name=\"answer_51820\" id=\"answer_51820_1\" value=\"https://jasna.org/austen/works/sense-sensibility/\"/>\nhttps://jasna.org/austen/works/sense-sensibility/\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_51820\" id=\"answer_51820_2\" value=\"https://www.goodreads.com/book/show/14935.Sense_and_Sensibility\"/>\nhttps://www.goodreads.com/book/show/14935.Sense_and_Sensibility\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_51820\" id=\"answer_51820_3\" value=\"http://www.gutenberg.org/ebooks/161\"/>\nhttp://www.gutenberg.org/ebooks/161\n</label>\n<br/>\n<label>\n<input type=\"radio\" name=\"answer_51820\" id=\"answer_51820_4\" value=\"https://en.wikipedia.org/wiki/Sense_and_Sensibility\"/>\nhttps://en.wikipedia.org/wiki/Sense_and_Sensibility\n</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_51820\"></div>\n</form>\n<script>function validate_form_51820() {var x, text; var x = document.forms['form_51820']['answer_51820'].value;if (x == 'http://www.gutenberg.org/ebooks/161'){text = 'That‚Äôs right!';} else {text = 'No, that‚Äôs incorrect.';} document.getElementById('result_51820').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5;res1 = document.getElementById('result_1').innerText == 'Correct! Though later on, we will install {ggplot2} as part of the {tidyverse} bundle of packages.'; res2 = document.getElementById('result_2').innerText == 'Not only is it possible, but it has already been done. And what‚Äôs more, the creator of the package has shared it for the entire R community to use. üéâ'; res3 = document.getElementById('result_3').innerText == 'Correct. And, in the next section, you will learn how to install it!'; res4 = document.getElementById('result_12598').innerText == 'That‚Äôs right!'; res5 = document.getElementById('result_51820').innerText == 'That‚Äôs right!';text = res1 + res2 + res3 + res4 + res5;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_26235\" onclick=\"return show_hint_26235()\">üê≠ Click on the mouse for a hint.</div>\n<div id=\"result_26235\" onclick=\"return show_hint_26235()\"></div>\n<script>function show_hint_26235(){var x = document.getElementById('result_26235').innerHTML; if(!x){document.getElementById('result_26235').innerHTML = 'Check the object‚Äôs help file to find out the exact source.';} else {document.getElementById('result_26235').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q4.6**]{style=\"color:green;\"} What is the first word of the 66^th^ line in the `R` object containing Jane Austen's novel 'Sense and Sensibility'?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_27079\" onsubmit=\"return validate_form_27079()\" method=\"post\">\n<input type=\"text\" placeholder=\"\" name=\"answer_27079\"/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_27079\"></div>\n</form>\n<script>function validate_form_27079() {var x, text; var x = document.forms['form_27079']['answer_27079'].value;if (x == 'cheerful'){text = 'That‚Äôs right! Isn‚Äôt that a wonderful word?';} else {text = 'No, that‚Äôs not it.';} document.getElementById('result_27079').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6;res1 = document.getElementById('result_1').innerText == 'Correct! Though later on, we will install {ggplot2} as part of the {tidyverse} bundle of packages.'; res2 = document.getElementById('result_2').innerText == 'Not only is it possible, but it has already been done. And what‚Äôs more, the creator of the package has shared it for the entire R community to use. üéâ'; res3 = document.getElementById('result_3').innerText == 'Correct. And, in the next section, you will learn how to install it!'; res4 = document.getElementById('result_12598').innerText == 'That‚Äôs right!'; res5 = document.getElementById('result_51820').innerText == 'That‚Äôs right!'; res6 = document.getElementById('result_27079').innerText == 'That‚Äôs right! Isn‚Äôt that a wonderful word?';text = res1 + res2 + res3 + res4 + res5 + res6;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_65066\" onclick=\"return show_hint_65066()\">üê≠ Click on the mouse for a hint.</div>\n<div id=\"result_65066\" onclick=\"return show_hint_65066()\"></div>\n<script>function show_hint_65066(){var x = document.getElementById('result_65066').innerHTML; if(!x){document.getElementById('result_65066').innerHTML = 'To display a line in the Console, you need to type the name of the object immediately followed by the number of the line that you are interested in squared brackets.';} else {document.getElementById('result_65066').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n:::\n\n## Citing `R` packages {#sec-CitingPackages}\n\nWhen we use a package that is not part of base `R`, it is very important to **reference** the package properly. There are two main reasons for doing this. For a start, the people who create and maintain these packages largely do so in their free time and they deserve full **credit** for their incredibly valuable work and contribution to science. Hence, whenever you use a package for your research, you should cite it, just like you would other sources.\n\nThe help page of the {janeaustenr} package already informed us that the maintainer of the package is Julia Silge. To get a full citation, however, we should use the `citation()` function. Enter `citation(\"janeaustenr\")` in the Console to find out how to cite this package.\n\nNote that the recommended bibliographic reference also includes the package version, which is important for reproducibility as the package may evolve and someone wanting to reproduce your analysis (and this may well be future you!) will need to know which version you used. This is the second main reason why we should be diligent about citing the exact packages that we used to ensure that others can **reproduce** our analyses (sec-Reproducibility). In a research report, thesis, or academic article, you could cite the {janeaustenr} package like this:\n\n> We used the *janeaustenr* package [@silgeJaneaustenrJaneAusten2022] to access Jane Austen's six published novels in R [@rcoreteamLanguageEnvironmentStatistical2024].\n\nNote that you can see the full references by hovering on the in-text citation links or by going to the [References](@sec-References) section of this book. @sec-LiteRateProgramming explains how to insert bibliographic references in documents that include `R` code.\n\n::: {.callout-note collapse=\"true\"}\n### More about referencing packages\n\nYou may also want to install the {report} package, which includes a number of useful functions for citing `R` versions and `R` packages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreport::report_system()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAnalyses were conducted using the R Statistical language (version 4.5.0; R Core\nTeam, 2025) on macOS Sequoia 15.4.1\n```\n\n\n:::\n\n```{.r .cell-code}\nreport::cite_packages()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  - Barr D, DeBruine L (2023). _webexercises: Create Interactive Web Exercises in 'R Markdown' (Formerly 'webex')_. doi:10.32614/CRAN.package.webexercises <https://doi.org/10.32614/CRAN.package.webexercises>, R package version 1.1.0, <https://CRAN.R-project.org/package=webexercises>.\n  - Makowski D, L√ºdecke D, Patil I, Th√©riault R, Ben-Shachar M, Wiernik B (2023). \"Automated Results Reporting as a Practical Tool to Improve Reproducibility and Methodological Best Practices Adoption.\" _CRAN_. <https://easystats.github.io/report/>.\n  - Moroz G (2020). _Create check-fields and check-boxes with checkdown_. <https://CRAN.R-project.org/package=checkdown>.\n  - R Core Team (2025). _R: A Language and Environment for Statistical Computing_. R Foundation for Statistical Computing, Vienna, Austria. <https://www.R-project.org/>.\n  - Silge J (2022). _janeaustenr: Jane Austen's Complete Novels_. doi:10.32614/CRAN.package.janeaustenr <https://doi.org/10.32614/CRAN.package.janeaustenr>, R package version 1.0.0, <https://CRAN.R-project.org/package=janeaustenr>.\n  - Xie Y (2025). _knitr: A General-Purpose Package for Dynamic Report Generation in R_. R package version 1.50, <https://yihui.org/knitr/>. Xie Y (2015). _Dynamic Documents with R and knitr_, 2nd edition. Chapman and Hall/CRC, Boca Raton, Florida. ISBN 978-1498716963, <https://yihui.org/knitr/>. Xie Y (2014). \"knitr: A Comprehensive Tool for Reproducible Research in R.\" In Stodden V, Leisch F, Peng RD (eds.), _Implementing Reproducible Computational Research_. Chapman and Hall/CRC. ISBN 978-1466561595.\n```\n\n\n:::\n\n```{.r .cell-code}\nreport::report_packages()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  - webexercises (version 1.1.0; Barr D, DeBruine L, 2023)\n  - report (version 0.6.1; Makowski D et al., 2023)\n  - checkdown (version 0.0.13; Moroz G, 2020)\n  - R (version 4.5.0; R Core Team, 2025)\n  - janeaustenr (version 1.0.0; Silge J, 2022)\n  - knitr (version 1.50; Xie Y, 2025)\n```\n\n\n:::\n:::\n\n\nTo find out more, I recommend reading Steffi LaZerte's blog post on \"How to cite R and R packages\": <https://ropensci.org/blog/2021/11/16/how-to-cite-r-and-r-packages/>.\n:::\n\n## Keeping things up to date ‚ú® {#sec-UpdatingR}\n\nAs with all software, it is a good idea to keep your installations of *RStudio* and `R` up-to-date. New features are constantly being added, bugs are fixed, and updates may include important security patches.\n\n### Updating RStudio\n\nBy default, *RStudio* will let you know when a new version is available in a pop-up window. To update *RStudio* follow the same instructions as for the first installation (see @sec-installingRStudio). When you add *RStudio* to your apps, you will get a message warning you that an older version of this programme already exists on your computer (see @fig-UpdateRStudio). You can safely click on the option \"Replace\". All of your previous **Global Options** settings (\\@sec-SettingupR) will be transferred to your updated *RStudio* version so this should be a quick-and-easy process.\n\n![Warning message on MacOS when installing an updated version of RStudio](images/UpdateRStudio.png){#fig-UpdateRStudio fig-alt=\"Finder window showing the RStudio.app icon and the folder Apps. A warning message reads: An older item named \\\"RStudio.app\\\" already exists in this location. Do you want to replace it with the newer one you're copying? The clickable options are: Keep Both Stop Replace\" width=\"450\"}\n\nYou can also check which version of *RStudio* you are running by clicking on the \"Help\" menu in *RStudio*'s top toolbar and then selecting the option \"About RStudio\". In the \"Help\" drop-down menu, you also have an option to \"Check for Updates\".\n\n### Updating `R`\n\nUpdating `R` is a little more complex because you will also need to update all of your `R` packages, too. Some of the packages that you use may not (yet) be available for the latest `R` version. This is why, for beginners, I do not recommend updating `R` in the middle of a project. That said, it is a good idea to keep your `R` version up-to-date. To find out which version of `R` you are currently working with, run this command in the Console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nR.version.string\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"R version 4.5.0 (2025-04-11)\"\n```\n\n\n:::\n:::\n\n\nCompare this version number with the number of the latest version available on [CRAN](https://cran.r-project.org/) (see @fig-CRANHomapageRVersion). If the version that you are running is not the same as the latest `R` version available on CRAN, you might want to update it. As a rule of thumb, it is a good idea to do an update if your version is more than six months old. To proceed with the update, close *RStudio* on your computer. Then, follow the same instructions as for the first-time installation of `R` (see @sec-installingR).\n\n![CRAN `R` for macOS page using the latest recommended `R` version](images/CRAN_R_For_MacOS_Version.png){#fig-CRANHomapageRVersion fig-alt=\"CRAN R for macOS page showing the latest R Version.\" width=\"508\"}\n\n### Updating `R` packages\n\nOnce you have updated `R`, it is important that you also update your installed packages. To do so, run the following command in the Console:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nupdate.packages(ask = FALSE, checkBuilt = TRUE)\n```\n:::\n\n\nAlternatively, you can also go to the **Packages** tab of *RStudio* and click on the button \"Update\". A pop-up window will appear with a list of the packages that need updating. Click on \"Select All\" and \"Install Updates\".\n\n::: {#fig-UpdateGUI layout-ncol=\"2\"}\n!['Update' button in RStudio's Packages tab](images/R_Studio_Packages_Update.png){#fig-RStudioPackagesTabUpdateButtoon fig-alt=\"*RStudio* screenshot showing the packages tab with the highlighted update button.\" width=\"450\"}\n\n!['Update Packages' dialogue in RStudio](images/Update_Packages_Dialog.png){#fig-UpdatePackagesDialog fig-alt=\"RStudio screenshot showing the Update Packages dialog with all packages selected and a highlighted Install Updates button.\" width=\"450\"}\n\nUpdating packages using RStudio's Graphical User Interface (GUI)\n:::\n\nNote that, if you have installed a lot of packages, this updating operation could take a while. It requires a stable internet connection and a bit of patience. üßòüèæ\n\n::: {.callout-note collapse=\"true\"}\n### An easier way to update `R` using {installr} (for Windows only)\n\nThe {installr} package simplifies updating `R` on Windows. To install the package use the usual commands:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"installr\") # Run this command the first time you use the package.\n\nlibrary(installr) # Run this command everytime you want to update R using this package.\n```\n:::\n\n\nThen, run the `updateR()` function, which automates the updating process by detecting your current `R` version, comparing it with the latest available version, and guiding you through the process of downloading and installing the latest version.\n\nIt is also possible to customise the update process with arguments like `updateR(update_packages = FALSE)` to skip package updates. For more details, check the documentation using the command `?updateR`.\n:::\n\n### Check your progress üåü {.unnumbered}\n\nYou have successfully completed [`<span id=\"checkdown_final_score\">0</span>`{=html} out of 6 questions]{style=\"color:green;\"} in this chapter.\n\nAre you confident that you can...?\n\n-   [ ] Install `R` and *RStudio* (@sec-InstallingR)\n-   [ ] Set up and test *RStudio* (@sec-SettingupR)\n-   [ ] Install and load `R` packages (@sec-Packages)\n-   [ ] Find out more about `R` packages and functions (@sec-PackageDocumentation)\n-   [ ] Cite `R` packages (@sec-CitingPackages)\n-   [ ] Update *RStudio*, `R`, and `R` packages (@sec-UpdatingR)\n\nOnce you have successfully completed all the steps outlined in this chapter, you are ready to get sta`R`ted with [Chapter 5](https://elenlefoll.github.io/RstatsTextbook/5_GettingStaRted.html), which provides a hands-on introduction to `R` in *RStudio*. ü§ì\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}