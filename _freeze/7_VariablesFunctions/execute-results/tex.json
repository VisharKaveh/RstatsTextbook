{
  "hash": "1c9298eac9226461775b2383c27dfc42",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nbibliography: references.bib\nformat:\n  html:\n    df-print: default\n---\n\n# Va`R`iables and functions {#sec-VaRiablesAndFunctions}\n\n\n\n#### **Chapter overview** {.unnumbered}\n\nIn this chapter, you will learn how to:\n\n-   Use base `R` functions to inspect a dataset\n-   Inspect and access individual variables from a dataset\n-   Access individual data points from a dataset\n-   Use simple base `R` functions to describe variables\n-   Look up and change the default arguments of functions\n-   Combine functions using two methods\n\n::: callout-warning\n### Prerequisites\n\nIn this chapter and the following chapters, all analyses are based on data from:\n\n> DƒÖbrowska, Ewa. 2019. Experience, Aptitude, and Individual Differences in Linguistic Attainment: A Comparison of Native and Nonnative Speakers. Language Learning 69(S1). 72--100. <https://doi.org/10.1111/lang.12323>.\n\nYou will only be able to reproduce the analyses and answer the quiz questions from this chapter if you have successfully imported the two datasets from @DabrowskaExperienceAptitudeIndividual2019. To import the datasets, follow the instructions from @sec-RProject to @sec-ImportingDataCSV and complete Task 6.1.\n:::\n\n## Inspecting a dataset in `R` {#sec-InspectingData}\n\nIn @sec-ImportingErrors, we saw that we can use the `View()` function to display tabular data in a format that resembles that of a spreadsheet programme (see @fig-ViewData1).\n\nThe two datasets from @DabrowskaExperienceAptitudeIndividual2019 are both long and wide so you will need to scroll in both directions to view all the data. *RStudio* also provides a filter option and a search tool (see @fig-ViewData1). Note that both of these tools can only be used to visually inspect the data. You cannot alter the dataset in any way using these tools (and that's a good thing!).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(L1.data)\n```\n:::\n\n\n![The L1.data object as visualised using the `View()` function in RStudio](images/ViewL1data.png){#fig-ViewData1 fig-alt=\"RStudio tab showing the first 22 rows and 7 columns of the L1.dataset. The filter and search buttons at the top of the tab are circled in red.\"}\n\n::: callout-tip\n#### Quiz time! {.unnumbered}\n\n[**Q7.1**]{style=\"color:green;\"} The `View()` function is more user-friendly than attempting to examine the full table in the Console. Try to display the full L2.dataset in the Console by using the command `L2.data` which is shorthand for `print(L2.data)`. What happens?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_62702\" onsubmit=\"return validate_form_62702()\" method=\"post\">\n<input type=\"radio\" name=\"answer_62702\" id=\"answer_62702_1\" value=\"The R Console prints out all the data, but not the column headers.\"/>\n<label>The R Console prints out all the data, but not the column headers.</label>\n<br/>\n<input type=\"radio\" name=\"answer_62702\" id=\"answer_62702_2\" value=\"The R Console prints the data in a randomly jumbled way.\"/>\n<label>The R Console prints the data in a randomly jumbled way.</label>\n<br/>\n<input type=\"radio\" name=\"answer_62702\" id=\"answer_62702_3\" value=\"R only displays the first 22 rows and the columns are not aligned because the Console window is not wide enough.\"/>\n<label>R only displays the first 22 rows and the columns are not aligned because the Console window is not wide enough.</label>\n<br/>\n<input type=\"radio\" name=\"answer_62702\" id=\"answer_62702_4\" value=\"R produces an error message because there are too many rows and the Console window is not long enough.\"/>\n<label>R produces an error message because there are too many rows and the Console window is not long enough.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_62702\"></div>\n</form>\n<script>function validate_form_62702() {var x, text; var x = document.forms['form_62702']['answer_62702'].value;if (x == 'R only displays the first 22 rows and the columns are not aligned because the Console window is not wide enough.'){text = 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.';} else {text = 'No, that‚Äôs not what is happening. Try scrolling up within the Console window to better understand what is going on. Can you find the column headers? Check the hint below if you‚Äôre stuck.';} document.getElementById('result_62702').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.';text = res1;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_32884\" onmouseover=\"return show_hint_32884()\">üòá Hover for a hint</div>\n<div id=\"result_32884\" onmouseover=\"return show_hint_32884()\"></div>\n<script>function show_hint_32884(){var x = document.getElementById('result_32884').innerHTML; if(!x){document.getElementById('result_32884').innerHTML = 'What happens when you increase or decrease the width of the Console pane in <em>RStudio</em> and then try to print the table again?';} else {document.getElementById('result_32884').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n:::\n\nIn practice, it is often useful to printing subsets of a dataset in the Console to quickly check the sanity of the data. To do so, we can use the function `head()` that prints the first six rows of a tabular dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(L1.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Participant Age Gender             Occupation OccupGroup OtherLgs\n1           1  21      M                Student         PS     None\n2           2  38      M Student/Support Worker         PS     None\n3           3  55      M                Retired          I     None\n4           4  26      F           Web designer         PS     None\n5           5  55      F              Homemaker          I     None\n6           6  58      F                Retired          I     None\n                    Education EduYrs ReadEng1 ReadEng2 ReadEng3 ReadEng Active\n1              3rd year of BA     17        1        2        2       5      8\n2    NVQ IV Music Performance     13        1        2        3       6      8\n3 No formal (City and Guilds)     11        3        3        4      10      8\n4                 BA Fine Art     17        3        3        3       9      8\n5                    O'Levels     12        3        2        3       8      8\n6                    O'Levels     12        1        1        2       4      8\n  ObjCl ObjRel Passive Postmod Q.has Q.is Locative SubCl SubRel GrammarR\n1     8      8       8       8     8    6        8     8      8       78\n2     8      8       8       8     8    7        8     8      8       79\n3     8      8       8       8     7    8        8     8      8       79\n4     8      8       8       8     8    8        8     8      8       80\n5     8      8       8       8     8    7        8     8      8       79\n6     5      1       8       8     7    6        7     8      8       66\n  Grammar VocabR    Vocab CollocR Colloc Blocks ART LgAnalysis\n1    95.0     48 73.33333      30 68.750     16  17         15\n2    97.5     58 95.55556      35 84.375     11  31         13\n3    97.5     58 95.55556      31 71.875      5  38          5\n4   100.0     53 84.44444      37 90.625     20  26         15\n5    97.5     55 88.88889      36 87.500     16  31         14\n6    65.0     48 73.33333      21 40.625      8  15          3\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n#### Quiz time! {.unnumbered}\n\n[**Q7.2**]{style=\"color:green;\"} Six is the default number of rows printed by the `head()` function. Have a look at the function's help file using the command `?head` to find out how to change this default setting. How would you get `R` to print the first 10 lines of `L2.data`?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_41553\" onsubmit=\"return validate_form_41553()\" method=\"post\">\n<input type=\"radio\" name=\"answer_41553\" id=\"answer_41553_1\" value=\"head(L2.data, n = 10)\"/>\n<label>head(L2.data, n = 10)</label>\n<br/>\n<input type=\"radio\" name=\"answer_41553\" id=\"answer_41553_2\" value=\"head(L2.data, L = 10)\"/>\n<label>head(L2.data, L = 10)</label>\n<br/>\n<input type=\"radio\" name=\"answer_41553\" id=\"answer_41553_3\" value=\"head(L2.data n = 10L)\"/>\n<label>head(L2.data n = 10L)</label>\n<br/>\n<input type=\"radio\" name=\"answer_41553\" id=\"answer_41553_4\" value=\"head(L2.data, rows = 10)\"/>\n<label>head(L2.data, rows = 10)</label>\n<br/>\n<input type=\"radio\" name=\"answer_41553\" id=\"answer_41553_5\" value=\"head(L2.data, n = 10L)\"/>\n<label>head(L2.data, n = 10L)</label>\n<br/>\n<input type=\"radio\" name=\"answer_41553\" id=\"answer_41553_6\" value=\"head(L2.data, 10)\"/>\n<label>head(L2.data, 10)</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_41553\"></div>\n</form>\n<script>function validate_form_41553() {var x, text; var x = document.forms['form_41553']['answer_41553'].value;if (x == 'head(L2.data, n = 10)'|x == 'head(L2.data, n = 10L)'|x == 'head(L2.data, 10)'){text = 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!';} else {text = 'Humm, have you tried whether this really does display the first 10 rows of the dataset? Is the name of the argument that controls the number of rows to be printed correct? Are the arguments within the command separated by a comma?';} document.getElementById('result_41553').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!';text = res1 + res2;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_6895\" onmouseover=\"return show_hint_6895()\">üòá Hover for a hint</div>\n<div id=\"result_6895\" onmouseover=\"return show_hint_6895()\"></div>\n<script>function show_hint_6895(){var x = document.getElementById('result_6895').innerHTML; if(!x){document.getElementById('result_6895').innerHTML = 'You can find the correct command argument in the help file of the <code>head()</code> function. Remember that you can access a function‚Äôs help file using the commands <code>?</code> or <code>help</code>.';} else {document.getElementById('result_6895').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n:::\n\n## Working with variables {#sec-Variables}\n\n### Types of variables\n\nIn statistics, we differentiate between **numeric** (or **quantitative**) and **categorical** (or **qualitative**) variables. Each variable type can be subdivided into different subtypes. It is very important to understand the differences between these types of data as we frequently have to use different statistics and visualisations depending on the type(s) of variable(s) that we are dealing with.\n\nSome **numeric variables** are **continuous**: they contain measured data that, at least theoretically, can have an infinite number of values within a range (e.g., time). In practice, however the number of possible values depends on the precision of the measurement (e.g., are we measuring time in years, as in the age of adults, or milliseconds, as in participants' reaction times in a linguistic experiment). **Numeric variables** for which only a defined set of values are possible are called **discrete** variables (e.g., number of occurrences of a word in a corpus). Most often, discrete numeric variables represent counts of something.\n\n[![](images/AHorst_NumericVariables.png){fig-alt=\"Cartoon comparison of continuous versus discrete data. On the left: \\\"Continuous - measured data, can have infinite values within possible range.\\\" Below is an illustration of a chick, with text \\\"I am 3.1\\\" tall, I weight 34.16 grams.\\\" On the right: \\\"Discrete - observations can only exist at limited values, often counts.\\\" Below is an illustration of an octopus with text \\\"I have 8 legs and 4 spots!\\\"\" fig-align=\"center\" width=\"509\"}](https://allisonhorst.com)\n\n**Categorical variables** can be **nominal** or **ordinal**. Nominal variables contain unordered categorical values (e.g., participants' mother tongue or nationality), whereas ordinal variables have categorical values that can be ordered meaningfully (e.g., participants' proficiency in a specific language where the values *beginner, intermediate* and *advanced* or *A1*, *A2*, *B1*, *B2*, *C1* and *C2* have a meaningful order). However, the difference between each category (or level) is not necessarily equal. **Binary** variables are a special case of nominal variable which only has two mutually exclusive outcomes (e.g., *true* or *false* in a quiz question).\n\n[![](images/AHorst_CategoricalVariables.png){fig-alt=\"Visual representations of nominal, ordinal, and binary variables. Left: Nominal (ordered descriptions) with illustrations below of a turtle, snail, and butterfly. Center: Ordinal (ordered descriptions) with illustrations below of three bees - one looks unhappy (saying \\\"I am unhappy\\\"), one looks ok (saying \\\"I am OK\\\"), and one looks very happy (saying \\\"I am awesome!\\\"). Right: Binary (only 2 mutually exclusive outcomes), with below a T-rex saying \\\"I am extinct\\\" and a shark saying \\\"HA.\\\"\"}](https://allisonhorst.com/)\n\n::: callout-tip\n#### Quiz time! {.unnumbered}\n\n[**Q7.3**]{style=\"color:green;\"} Which type of variable is stored in the `Occupation` column in `L1.data`?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_94951\" onsubmit=\"return validate_form_94951()\" method=\"post\">\n<input type=\"radio\" name=\"answer_94951\" id=\"answer_94951_1\" value=\"Other\"/>\n<label>Other</label>\n<br/>\n<input type=\"radio\" name=\"answer_94951\" id=\"answer_94951_2\" value=\"Binary\"/>\n<label>Binary</label>\n<br/>\n<input type=\"radio\" name=\"answer_94951\" id=\"answer_94951_3\" value=\"Discrete\"/>\n<label>Discrete</label>\n<br/>\n<input type=\"radio\" name=\"answer_94951\" id=\"answer_94951_4\" value=\"Continuous\"/>\n<label>Continuous</label>\n<br/>\n<input type=\"radio\" name=\"answer_94951\" id=\"answer_94951_5\" value=\"Nominal\"/>\n<label>Nominal</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_94951\"></div>\n</form>\n<script>function validate_form_94951() {var x, text; var x = document.forms['form_94951']['answer_94951'].value;if (x == 'Nominal'){text = 'Correct. These job categories cannot be meaningfully ordered.';} else {text = 'No, check the definitions above.';} document.getElementById('result_94951').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.';text = res1 + res2 + res3;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q7.4**]{style=\"color:green;\"} Which type of variable is stored in the `Gender` column in `L1.data`?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_79198\" onsubmit=\"return validate_form_79198()\" method=\"post\">\n<input type=\"radio\" name=\"answer_79198\" id=\"answer_79198_1\" value=\"Other\"/>\n<label>Other</label>\n<br/>\n<input type=\"radio\" name=\"answer_79198\" id=\"answer_79198_2\" value=\"Nominal\"/>\n<label>Nominal</label>\n<br/>\n<input type=\"radio\" name=\"answer_79198\" id=\"answer_79198_3\" value=\"Discrete\"/>\n<label>Discrete</label>\n<br/>\n<input type=\"radio\" name=\"answer_79198\" id=\"answer_79198_4\" value=\"Continuous\"/>\n<label>Continuous</label>\n<br/>\n<input type=\"radio\" name=\"answer_79198\" id=\"answer_79198_5\" value=\"Binary\"/>\n<label>Binary</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_79198\"></div>\n</form>\n<script>function validate_form_79198() {var x, text; var x = document.forms['form_79198']['answer_79198'].value;if (x == 'Binary'){text = 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).';} else {text = 'No, check the definitions above.';} document.getElementById('result_79198').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).';text = res1 + res2 + res3 + res4;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q7.5**]{style=\"color:green;\"} Which type of variable is stored in the column `VocabR` in `L1.data`?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_35797\" onsubmit=\"return validate_form_35797()\" method=\"post\">\n<input type=\"radio\" name=\"answer_35797\" id=\"answer_35797_1\" value=\"Binary\"/>\n<label>Binary</label>\n<br/>\n<input type=\"radio\" name=\"answer_35797\" id=\"answer_35797_2\" value=\"Other\"/>\n<label>Other</label>\n<br/>\n<input type=\"radio\" name=\"answer_35797\" id=\"answer_35797_3\" value=\"Nominal\"/>\n<label>Nominal</label>\n<br/>\n<input type=\"radio\" name=\"answer_35797\" id=\"answer_35797_4\" value=\"Continuous\"/>\n<label>Continuous</label>\n<br/>\n<input type=\"radio\" name=\"answer_35797\" id=\"answer_35797_5\" value=\"Discrete\"/>\n<label>Discrete</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_35797\"></div>\n</form>\n<script>function validate_form_35797() {var x, text; var x = document.forms['form_35797']['answer_35797'].value;if (x == 'Discrete'){text = 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.';} else {text = 'No, re-read the definitions above.';} document.getElementById('result_35797').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.';text = res1 + res2 + res3 + res4 + res5;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n:::\n\n### Inspecting variables in `R`\n\nIn **tidy data** tabular formats (see Chapter 8), each row corresponds to one observation and each column to a variable. Each cell, therefore, corresponds to a single data point, which is the value of a specific variable (column) for a specific observation (row). As we will see in the following chapters, this data structure allows for efficient and intuitive data manipulation, analysis, and visualisation.\n\nThe `names()` functions returns the names of all of the columns of a data frame. Given that the datasets from @DabrowskaExperienceAptitudeIndividual2019 are 'tidy', this means that `names(L1.data)` returns a list of all the column names in the L1 dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(L1.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Participant\" \"Age\"         \"Gender\"      \"Occupation\"  \"OccupGroup\" \n [6] \"OtherLgs\"    \"Education\"   \"EduYrs\"      \"ReadEng1\"    \"ReadEng2\"   \n[11] \"ReadEng3\"    \"ReadEng\"     \"Active\"      \"ObjCl\"       \"ObjRel\"     \n[16] \"Passive\"     \"Postmod\"     \"Q.has\"       \"Q.is\"        \"Locative\"   \n[21] \"SubCl\"       \"SubRel\"      \"GrammarR\"    \"Grammar\"     \"VocabR\"     \n[26] \"Vocab\"       \"CollocR\"     \"Colloc\"      \"Blocks\"      \"ART\"        \n[31] \"LgAnalysis\" \n```\n\n\n:::\n:::\n\n\n### `R` data types {#sec-DataTypes}\n\nA useful way to get a quick and informative overview of a large dataset is to use the function `str()`, which was mentioned in @sec-ImportingErrors. It returns the \"internal structure\" of any `R` object. It is particular useful for large tables with many columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(L1.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t90 obs. of  31 variables:\n $ Participant: chr  \"1\" \"2\" \"3\" \"4\" ...\n $ Age        : int  21 38 55 26 55 58 31 58 42 59 ...\n $ Gender     : chr  \"M\" \"M\" \"M\" \"F\" ...\n $ Occupation : chr  \"Student\" \"Student/Support Worker\" \"Retired\" \"Web designer\" ...\n $ OccupGroup : chr  \"PS\" \"PS\" \"I\" \"PS\" ...\n $ OtherLgs   : chr  \"None\" \"None\" \"None\" \"None\" ...\n $ Education  : chr  \"3rd year of BA\" \"NVQ IV Music Performance\" \"No formal (City and Guilds)\" \"BA Fine Art\" ...\n $ EduYrs     : int  17 13 11 17 12 12 13 11 11 11 ...\n $ ReadEng1   : int  1 1 3 3 3 1 3 2 1 2 ...\n $ ReadEng2   : int  2 2 3 3 2 1 2 2 1 2 ...\n $ ReadEng3   : int  2 3 4 3 3 2 3 3 1 2 ...\n $ ReadEng    : int  5 6 10 9 8 4 8 7 3 6 ...\n $ Active     : int  8 8 8 8 8 8 7 8 8 8 ...\n $ ObjCl      : int  8 8 8 8 8 5 8 4 7 5 ...\n $ ObjRel     : int  8 8 8 8 8 1 8 8 3 8 ...\n $ Passive    : int  8 8 8 8 8 8 8 8 2 8 ...\n $ Postmod    : int  8 8 8 8 8 8 7 7 6 8 ...\n $ Q.has      : int  8 8 7 8 8 7 8 1 3 0 ...\n $ Q.is       : int  6 7 8 8 7 6 7 8 7 8 ...\n $ Locative   : int  8 8 8 8 8 7 8 8 8 8 ...\n $ SubCl      : int  8 8 8 8 8 8 8 8 7 8 ...\n $ SubRel     : int  8 8 8 8 8 8 8 8 7 8 ...\n $ GrammarR   : int  78 79 79 80 79 66 77 68 58 69 ...\n $ Grammar    : num  95 97.5 97.5 100 97.5 65 92.5 70 45 72.5 ...\n $ VocabR     : int  48 58 58 53 55 48 39 48 31 42 ...\n $ Vocab      : num  73.3 95.6 95.6 84.4 88.9 ...\n $ CollocR    : int  30 35 31 37 36 21 29 33 22 29 ...\n $ Colloc     : num  68.8 84.4 71.9 90.6 87.5 ...\n $ Blocks     : int  16 11 5 20 16 8 8 10 7 9 ...\n $ ART        : int  17 31 38 26 31 15 7 10 6 6 ...\n $ LgAnalysis : int  15 13 5 15 14 3 4 5 2 6 ...\n```\n\n\n:::\n:::\n\n\nAt the top of its output, the function `str(L1.data)` first informs us that `L1.data` is a **data frame** object, consisting of 90 observations (i.e. rows) and 31 variables (i.e. columns). Then, it returns a list of all of the variables included in this data frame. Each line starts with a `$` sign and corresponds to one column. First, the name of the column (e.g. `Occupation`) is printed, followed by the column's `R` data type (e.g. `chr` for a character string vector), and then its values for the first few rows of the table (e.g. we can see that the first participant in this dataset was a \"Student\" and the second a \"Student/Support Worker\").\n\nCompare the outputs of the `str()` and `head()` functions in the Console with that of the `View()` function to understand the different ways in which the same dataset can be examined in RStudio.\n\n::: callout-tip\n#### Quiz time! {.unnumbered}\n\n[**Q7.6**]{style=\"color:green;\"} Use the `str()` function to examine the internal structure of the L2 dataset. How many columns are there in the L2 dataset?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_54179\" onsubmit=\"return validate_form_54179()\" method=\"post\">\n<input type=\"text\" placeholder=\"\" name=\"answer_54179\"/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_54179\"></div>\n</form>\n<script>function validate_form_54179() {var x, text; var x = document.forms['form_54179']['answer_54179'].value;if (x == '45'){text = 'That‚Äôs right, well done!';} else {text = 'No, check the first line of the output of <code>str(L2.data)</code>.';} document.getElementById('result_54179').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!';text = res1 + res2 + res3 + res4 + res5 + res6;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q7.7**]{style=\"color:green;\"} Which of these columns can be found in the L2 dataset, but not the L1 one?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_17807\" onsubmit=\"return validate_form_17807()\" method=\"post\">\n<input type=\"checkbox\" id=\"answer_17807_1\" value=\"NativeLg\"/>\n<label>NativeLg</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_17807_2\" value=\"EngWork\"/>\n<label>EngWork</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_17807_3\" value=\"FirstExp\"/>\n<label>FirstExp</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_17807_4\" value=\"OtherLgs\"/>\n<label>OtherLgs</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_17807_5\" value=\"EduYrs\"/>\n<label>EduYrs</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_17807_6\" value=\"Arrival\"/>\n<label>Arrival</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_17807\"></div>\n</form>\n<script>function validate_form_17807() {var text; var x1 = document.getElementById('answer_17807_1'); var x2 = document.getElementById('answer_17807_2'); var x3 = document.getElementById('answer_17807_3'); var x4 = document.getElementById('answer_17807_4'); var x5 = document.getElementById('answer_17807_5'); var x6 = document.getElementById('answer_17807_6'); if (x1.checked == true&x2.checked == true&x3.checked == true&x4.checked == false&x5.checked == false&x6.checked == true){text = 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.';} else {text = 'Not quite. Compare the outputs of <code>names(L1.data)</code> and <code>names(L2.data)</code> again.';} document.getElementById('result_17807').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.';text = res1 + res2 + res3 + res4 + res5 + res6 + res7;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_52465\" onmouseover=\"return show_hint_52465()\">üòá Hover for a hint</div>\n<div id=\"result_52465\" onmouseover=\"return show_hint_52465()\"></div>\n<script>function show_hint_52465(){var x = document.getElementById('result_52465').innerHTML; if(!x){document.getElementById('result_52465').innerHTML = 'Try using the <code>str()</code> or the <code>names()</code> functions to compare the two datasets.';} else {document.getElementById('result_52465').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q7.8**]{style=\"color:green;\"} Which type of `R` object is the variable `Arrival` stored as?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_92830\" onsubmit=\"return validate_form_92830()\" method=\"post\">\n<input type=\"checkbox\" id=\"answer_92830_1\" value=\"digit\"/>\n<label>digit</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_92830_2\" value=\"index\"/>\n<label>index</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_92830_3\" value=\"intelligence\"/>\n<label>intelligence</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_92830_4\" value=\"interest\"/>\n<label>interest</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_92830_5\" value=\"integer\"/>\n<label>integer</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_92830_6\" value=\"string character\"/>\n<label>string character</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_92830\"></div>\n</form>\n<script>function validate_form_92830() {var text; var x1 = document.getElementById('answer_92830_1'); var x2 = document.getElementById('answer_92830_2'); var x3 = document.getElementById('answer_92830_3'); var x4 = document.getElementById('answer_92830_4'); var x5 = document.getElementById('answer_92830_5'); var x6 = document.getElementById('answer_92830_6'); if (x1.checked == false&x2.checked == false&x3.checked == false&x4.checked == false&x5.checked == true&x6.checked == false){text = 'That‚Äôs right! <code>int</code> is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.';} else {text = 'No, that‚Äôs not it.';} document.getElementById('result_92830').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_47060\" onmouseover=\"return show_hint_47060()\">üòá Hover for a hint</div>\n<div id=\"result_47060\" onmouseover=\"return show_hint_47060()\"></div>\n<script>function show_hint_47060(){var x = document.getElementById('result_47060').innerHTML; if(!x){document.getElementById('result_47060').innerHTML = 'You can find the answer in the output of the command <code>str(L2.data)</code>';} else {document.getElementById('result_47060').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q7.9**]{style=\"color:green;\"} How old was the third participant listed in the L2 dataset when they first moved to an English-speaking country?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_61677\" onsubmit=\"return validate_form_61677()\" method=\"post\">\n<input type=\"text\" placeholder=\"\" name=\"answer_61677\"/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_61677\"></div>\n</form>\n<script>function validate_form_61677() {var x, text; var x = document.forms['form_61677']['answer_61677'].value;if (x == '19'){text = 'Yes, well done!';} else {text = 'No. Have a look at the third number printed after <code>$ Arrival</code> in the output of the command <code>str(L2.data)</code>';} document.getElementById('result_61677').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.'; res9 = document.getElementById('result_61677').innerText == 'Yes, well done!';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_99736\" onmouseover=\"return show_hint_99736()\">üòá Hover for a hint</div>\n<div id=\"result_99736\" onmouseover=\"return show_hint_99736()\"></div>\n<script>function show_hint_99736(){var x = document.getElementById('result_99736').innerHTML; if(!x){document.getElementById('result_99736').innerHTML = 'You can find the answer in the output of the command <code>str(L2.data)</code>';} else {document.getElementById('result_99736').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q7.10**]{style=\"color:green;\"} In both datasets, the column `Participant` contains anonymised participant IDs. Why is the variable `Participant` stored as string character vector in `L1.data`, but as an integer vector in `L2.data`?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_23050\" onsubmit=\"return validate_form_23050()\" method=\"post\">\n<input type=\"checkbox\" id=\"answer_23050_1\" value=\"Because there are more L1 participants than L2 participants.\"/>\n<label>Because there are more L1 participants than L2 participants.</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_23050_2\" value=\"Because the L1 participants&#39; IDs only contain whole numbers with no decimal points.\"/>\n<label>Because the L1 participants' IDs only contain whole numbers with no decimal points.</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_23050_3\" value=\"Because the L1 participants&#39; IDs are written out as words rather than digits.\"/>\n<label>Because the L1 participants' IDs are written out as words rather than digits.</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_23050_4\" value=\"Because some of the L1 participants&#39; IDs contain letters as well as numbers.\"/>\n<label>Because some of the L1 participants' IDs contain letters as well as numbers.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_23050\"></div>\n</form>\n<script>function validate_form_23050() {var text; var x1 = document.getElementById('answer_23050_1'); var x2 = document.getElementById('answer_23050_2'); var x3 = document.getElementById('answer_23050_3'); var x4 = document.getElementById('answer_23050_4'); if (x1.checked == false&x2.checked == false&x3.checked == false&x4.checked == true){text = 'That‚Äôs correct.';} else {text = 'No, that‚Äôs not it. Have you had a look at the full set of participant IDs in the L1 dataset?';} document.getElementById('result_23050').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.'; res9 = document.getElementById('result_61677').innerText == 'Yes, well done!'; res10 = document.getElementById('result_23050').innerText == 'That‚Äôs correct.';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9 + res10;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_61838\" onmouseover=\"return show_hint_61838()\">üòá Hover for a hint</div>\n<div id=\"result_61838\" onmouseover=\"return show_hint_61838()\"></div>\n<script>function show_hint_61838(){var x = document.getElementById('result_61838').innerHTML; if(!x){document.getElementById('result_61838').innerHTML = 'Print the full list of values in both columns using the commands <code>L1.data$Participant</code> and <code>L2.data$Participant</code> to work it out.';} else {document.getElementById('result_61838').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n:::\n\n### Accessing individual columns in `R` {#sec-DollarSign}\n\nWe can call up individual columns within a data frame using the `$` operator. This displays all of the participants' values for this one variable. As shown below, this works for any type of data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.data$Gender\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"M\" \"M\" \"M\" \"F\" \"F\" \"F\" \"F\" \"M\" \"M\" \"F\" \"F\" \"M\" \"M\" \"F\" \"M\" \"F\" \"M\" \"F\" \"F\"\n[20] \"F\" \"F\" \"F\" \"F\" \"F\" \"F\" \"M\" \"F\" \"M\" \"F\" \"M\" \"F\" \"F\" \"F\" \"M\" \"F\" \"F\" \"M\" \"F\"\n[39] \"F\" \"F\" \"F\" \"F\" \"M\" \"M\" \"F\" \"F\" \"M\" \"F\" \"F\" \"F\" \"F\" \"F\" \"F\" \"F\" \"M\" \"M\" \"M\"\n[58] \"F\" \"F\" \"M\" \"M\" \"M\" \"M\" \"F\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"M\" \"F\" \"M\" \"F\" \"F\"\n[77] \"M\" \"M\" \"M\" \"F\" \"F\" \"M\" \"M\" \"F\" \"F\" \"M\" \"M\" \"M\" \"F\" \"M\"\n```\n\n\n:::\n\n```{.r .cell-code}\nL1.data$Age\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 21 38 55 26 55 58 31 58 42 59 32 27 60 51 32 29 41 57 60 18 41 60 21 25 26\n[26] 60 57 60 52 25 23 42 59 30 21 21 60 51 62 65 19 65 29 38 37 42 20 32 29 29\n[51] 27 28 29 25 33 25 25 25 52 25 53 22 65 60 61 65 65 61 30 30 32 30 39 29 55\n[76] 18 32 31 20 38 44 18 17 17 17 17 17 17 17 17\n```\n\n\n:::\n:::\n\n\nBefore doing any data analysis, it is crucial to carefully visually examine the data to spot any problems. Ask yourself:\n\n-   Do the values look plausible?\n-   Are there any missing values?\n\nLooking at the `Gender` and `Age` variables, we can see that all the L1 participants declared being either 'male' (`\"M\"`) or 'female' (`\"F\"`), that the youngest were 17 years old, and that no participant was improbably old. A single improbable value is likely to be the result of a data entry error, e.g. a participant or researcher entered `188` as an age, instead of `18`. If you spot lots of improbable or outright weird values (e.g. `C`, `I` and `PS` as age values!), something is likely to have gone wrong during the data import process (see @sec-ImportingErrors).\n\nJust like we can save individual numbers and words as `R` objects to our `R` environment, we can also save individual variables as individual `R` objects. As we saw in @sec-WorkingRObjects, in this case, the values of the variable are not printed in the Console, but rather saved to our `R` environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.Occupation <- L1.data$Occupation\n```\n:::\n\n\nIf we want to display the content of this variable, we must print our new `R` object by calling it up with its name, e.g. `L1.Occupation`. Try it out! As listing all of the all of the L1 participant's jobs makes for a very long list, below, we only display the first six values using the `head()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(L1.Occupation)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Student\"                \"Student/Support Worker\" \"Retired\"               \n[4] \"Web designer\"           \"Homemaker\"              \"Retired\"               \n```\n\n\n:::\n:::\n\n\n## Accessing individual data points in `R` {#sec-SquareBrackets}\n\nWe can also access individual data points from a variable using the index operator, the square brackets (`[]`). For example, we can access the `Occupation` value for the fourth L1 participant by specifying that we only want the fourth element of the `R` object `L1.Occupation`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.Occupation[4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Web designer\"\n```\n\n\n:::\n:::\n\n\nWe can also do this from the `L1.data` data frame object directly. To this end, we use a combination of the `$` and the `[]` operators.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.data$Occupation[4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Web designer\"\n```\n\n\n:::\n:::\n\n\nWe can access a continuous range of data points using the `:` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.data$Occupation[10:15]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Housewife\"             \"Admin Assistant\"       \"Content Editor\"       \n[4] \"School Crossing Guard\" \"Carer/Cleaner\"         \"IT Support\"           \n```\n\n\n:::\n:::\n\n\nOr, if they are not continuous, we can list the numbers of the values that we are interesting in using the combine function (`c()`) and commas separating each index value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.data$Occupation[c(11,13,29,90)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Admin Assistant\"       \"School Crossing Guard\" \"Dental Nurse\"         \n[4] \"Student\"              \n```\n\n\n:::\n:::\n\n\nIt is also possible to access data points from a table by specifying both the number of the row and the number of the column of the relevant data point(s) using the following pattern:\n\n```         \n[row,column]\n```\n\nFor example, given that we know that `Occupation` is stored in the fourth column of `L1.data`, we can find out the occupation of the L1 participant in the 60^th^ row of the dataset like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.data[60,4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Train Driver\"\n```\n\n\n:::\n:::\n\n\nAll of these approaches can be combined. For example, here we access the values of the second, third, and fourth columns for the 11^th^, 13^th^, 29^th^, and 90^th^ L1 participants.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.data[c(11,13,29,90),2:4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Age Gender            Occupation\n11  32      F       Admin Assistant\n13  60      M School Crossing Guard\n29  52      F          Dental Nurse\n90  17      M               Student\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n#### Quiz time! {.unnumbered}\n\nThe following two quiz questions focus on the `NativeLg` variables from the L2 dataset (`L2.data`).\n\n[**Q7.11**]{style=\"color:green;\"} Use the index operators to find out the native language of the 26^th^ L2 participant.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_98531\" onsubmit=\"return validate_form_98531()\" method=\"post\">\n<select name=\"answer_98531\">\n<option>Cantonese</option>\n<option>Chinese</option>\n<option>German</option>\n<option>Italian</option>\n<option>Greek</option>\n<option>Lithuanian</option>\n<option>Mandarin</option>\n<option>Polish</option>\n<option>Russian</option>\n<option>Spanish</option>\n</select>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_98531\"></div>\n</form>\n<script>function validate_form_98531() {var x, text; var x = document.forms['form_98531']['answer_98531'].value;if (x == 'Polish'){text = 'Brawo! üéâ';} else {text = 'No, that‚Äôs not it. Check the hint if you need some help.';} document.getElementById('result_98531').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.'; res9 = document.getElementById('result_61677').innerText == 'Yes, well done!'; res10 = document.getElementById('result_23050').innerText == 'That‚Äôs correct.'; res11 = document.getElementById('result_98531').innerText == 'Brawo! üéâ';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9 + res10 + res11;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_78272\" onclick=\"return show_hint_78272()\">üê≠ Click on the mouse for a hint.</div>\n<div id=\"result_78272\" onclick=\"return show_hint_78272()\"></div>\n<script>function show_hint_78272(){var x = document.getElementById('result_78272').innerHTML; if(!x){document.getElementById('result_78272').innerHTML = 'Use the command <code>L2.data$NativeLg[26]</code> to find out which it is.';} else {document.getElementById('result_78272').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q7.12**]{style=\"color:green;\"} Which command(s) can you use to display only the Gender, Occupation, Native language, and Age of the last participant listed in the L2 dataset?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_89662\" onsubmit=\"return validate_form_89662()\" method=\"post\">\n<input type=\"checkbox\" id=\"answer_89662_1\" value=\"L2.data[-1:c(2,3,5,9)]\"/>\n<label>L2.data[-1:c(2,3,5,9)]</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_89662_2\" value=\"L2.data[67,c(2:3,5,9)]\"/>\n<label>L2.data[67,c(2:3,5,9)]</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_89662_3\" value=\"L2.data[90,c(2:3,5,9)]\"/>\n<label>L2.data[90,c(2:3,5,9)]</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_89662_4\" value=\"L2.data[67,c(2,3,5,9)]\"/>\n<label>L2.data[67,c(2,3,5,9)]</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_89662_5\" value=\"L2.data[67:c(2,3,5,9)]\"/>\n<label>L2.data[67:c(2,3,5,9)]</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_89662_6\" value=\"L2.data[67 , c(2,3,5,9)]\"/>\n<label>L2.data[67 , c(2,3,5,9)]</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_89662\"></div>\n</form>\n<script>function validate_form_89662() {var text; var x1 = document.getElementById('answer_89662_1'); var x2 = document.getElementById('answer_89662_2'); var x3 = document.getElementById('answer_89662_3'); var x4 = document.getElementById('answer_89662_4'); var x5 = document.getElementById('answer_89662_5'); var x6 = document.getElementById('answer_89662_6'); if (x1.checked == false&x2.checked == true&x3.checked == false&x4.checked == true&x5.checked == false&x6.checked == true){text = 'Great job!';} else {text = 'Not quite. Try out these options to find out for yourself which ones work and which don‚Äôt.';} document.getElementById('result_89662').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, res12;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.'; res9 = document.getElementById('result_61677').innerText == 'Yes, well done!'; res10 = document.getElementById('result_23050').innerText == 'That‚Äôs correct.'; res11 = document.getElementById('result_98531').innerText == 'Brawo! üéâ'; res12 = document.getElementById('result_89662').innerText == 'Great job!';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9 + res10 + res11 + res12;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_93558\" onmouseover=\"return show_hint_93558()\">üòá Hover for a hint</div>\n<div id=\"result_93558\" onmouseover=\"return show_hint_93558()\"></div>\n<script>function show_hint_93558(){var x = document.getElementById('result_93558').innerHTML; if(!x){document.getElementById('result_93558').innerHTML = 'Using <code>-1</code> as an index to access the last row is a neat trick in Python, but it sadly doesn‚Äôt work in <code>R</code>.';} else {document.getElementById('result_93558').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n:::\n\n## Using built-in `R` functions {#sec-RFunctions}\n\nWe know from our examination of the L1 dataset from @DabrowskaExperienceAptitudeIndividual2019 that it includes 90 English native speaker participants. To find out their mean average age, we could add up all of their ages and divide the sum by 90 (see @sec-CentralTendency for more ways to report the central tendency of a variable).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(21 + 38 + 55 + 26 + 55 + 58 + 31 + 58 + 42 + 59 + 32 + 27 + 60 + 51 + 32 + 29 + 41 + 57 + 60 + 18 + 41 + 60 + 21 + 25 + 26 + 60 + 57 + 60 + 52 + 25 + 23 + 42 + 59 + 30 + 21 + 21 + 60 + 51 + 62 + 65 + 19 + 65 + 29 + 38 + 37 + 42 + 20 + 32 + 29 + 29 + 27 + 28 + 29 + 25 + 33 + 25 + 25 + 25 + 52 + 25 + 53 + 22 + 65 + 60 + 61 + 65 + 65 + 61 + 30 + 30 + 32 + 30 + 39 + 29 + 55 + 18 + 32 + 31 + 20 + 38 + 44 + 18 + 17 + 17 + 17 + 17 + 17 + 17 + 17 + 17) / 90\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 37.54444\n```\n\n\n:::\n:::\n\n\nOf course, we would much rather not write all of this out! Especially, as we are very likely to make errors in the process. Instead, we can use the base `R` function `sum()` to add up all of the L1 participant's ages and divide that by 90.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(L1.data$Age) / 90\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 37.54444\n```\n\n\n:::\n:::\n\n\nThis already looks much better, but it's still less than ideal: What if we decided to exclude some participants (e.g., because they did not complete all of the experimental tasks)? Or decided to add data from more participants? In both these cases, 90 will no longer be the correct denominator to calculate their average age! That's why it is better to work out the denominator by computing the total number of values in the variable of interest. To this end, we can use the `length()` function, which returns the number of values in any given vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(L1.data$Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 90\n```\n\n\n:::\n:::\n\n\nWe can then combine the `sum()` and the `length()` functions to calculate the participants' average age.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(L1.data$Age) / length(L1.data$Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 37.54444\n```\n\n\n:::\n:::\n\n\nBase `R` includes lots of useful functions, especially to do statistics. Hence, it will come as no surprise to find that there is a built-in function to calculate mean average values. It is called `mean()` and is very simple to use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(L1.data$Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 37.54444\n```\n\n\n:::\n:::\n\n\nIf you save the values of a variable to your `R` session environment, you do not need to use the name of the dataset and the `$` sign to calculate its mean. Instead, you can directly apply the `mean()` function to the stored `R` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Saving the values of the Age variable to a new R object called L1.Age:\nL1.Age <- L1.data$Age\n\n# Applying the mean() function to this new R object:\nmean(L1.Age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 37.54444\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n#### Quiz time! {.unnumbered}\n\n[**Q7.13**]{style=\"color:green;\"} How does the average age of the L2 participants in @DabrowskaExperienceAptitudeIndividual2019 compare to that of the L1 participants?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_44125\" onsubmit=\"return validate_form_44125()\" method=\"post\">\n<input type=\"radio\" name=\"answer_44125\" id=\"answer_44125_1\" value=\"On average, the L2 participants are older than the L1 participants.\"/>\n<label>On average, the L2 participants are older than the L1 participants.</label>\n<br/>\n<input type=\"radio\" name=\"answer_44125\" id=\"answer_44125_2\" value=\"On average, the L2 participants are younger than the L1 participants.\"/>\n<label>On average, the L2 participants are younger than the L1 participants.</label>\n<br/>\n<input type=\"radio\" name=\"answer_44125\" id=\"answer_44125_3\" value=\"Age is not comparable across two different datasets.\"/>\n<label>Age is not comparable across two different datasets.</label>\n<br/>\n<input type=\"radio\" name=\"answer_44125\" id=\"answer_44125_4\" value=\"On average, the L2 participants are the same age than the L1 participants.\"/>\n<label>On average, the L2 participants are the same age than the L1 participants.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_44125\"></div>\n</form>\n<script>function validate_form_44125() {var x, text; var x = document.forms['form_44125']['answer_44125'].value;if (x == 'On average, the L2 participants are younger than the L1 participants.'){text = 'That‚Äôs right!';} else {text = 'No, this is incorrect. Compare the results of the commands <code>mean(L2.data$Age)</code> and <code>mean(L1.data$Age)</code>.';} document.getElementById('result_44125').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, res12, res13;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.'; res9 = document.getElementById('result_61677').innerText == 'Yes, well done!'; res10 = document.getElementById('result_23050').innerText == 'That‚Äôs correct.'; res11 = document.getElementById('result_98531').innerText == 'Brawo! üéâ'; res12 = document.getElementById('result_89662').innerText == 'Great job!'; res13 = document.getElementById('result_44125').innerText == 'That‚Äôs right!';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9 + res10 + res11 + res12 + res13;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n:::\n\n::: callout-caution\n#### Task 7.1\n\nFor this task, you first need to check that you have saved the following two variables from the L1 dataset to your `R` environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.Age <- L1.data$Age\nL1.Occupation <- L1.data$Occupation\n```\n:::\n\n\n1\\) Below is a list of useful base `R` functions. Try them out with the variable `L1.Age`. What does each function do? Make a note by writing a comment next to each command (see @sec-Comments). The first one has been done for you.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(L1.Age) # The mean() function returns the mean average of a set of number.\nmin()\nmax()\nsort()\nlength()\nmode()\nclass()\ntable()\nsummary()\n```\n:::\n\n\n2\\) `Age` is a numeric variable. What happens if you try these same functions with a character string variable? Find out by trying them out with the variable `L1.Occupation` which contains words rather than numbers.\n\n¬†\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### Click here for the solutions to Task 7.1\n\nAs you will have seen, often the clue is in the name of the function - but not always! üòâ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(L1.Age) # The mean() function returns the mean average of a set of number.\nmean(L1.Occupation) # It does not make sense to calculate a mean average value of a set of words, therefore R returns an 'NA' (not applicable) and a warning in red explaining that the mean() function expects a numeric or logical argument.\n\nmin(L1.Age) # For a numeric variable, min() returns the lowest numeric value.\nmin(L1.Occupation) # For a string variable, min() returns the first value sorted alphabetically.\n\nmax(L1.Age) # For a numeric variable, min() returns the highest numeric value.\nmax(L1.Occupation) # For a string variable, max() returns the last value sorted alphabetically.\n\nsort(L1.Age) # For a numeric variable, sort() returns all of the values of the variable ordered from the smallest to the largest.\nsort(L1.Occupation) # For a string variable, sort() returns of all of the values of the variable in alphabetical order.\n\nlength(L1.Age) # The function length() returns the number of values in the variable.\nlength(L1.Occupation) # The function length() returns the number of values in the variable.\n\nmode(L1.Age) # The function mode() returns the R data type that the variable is stored as.\nmode(L1.Occupation) # The function mode() returns the R data type that the variable is stored as.\n\nclass(L1.Age) # The function mode() returns the R object class that the variable is stored as.\nclass(L1.Occupation) # The function mode() returns the R object class that the variable is stored as.\n\ntable(L1.Age) # For a numeric variable, the function table() outputs a table that tallies the number of occurrences of each unique value in a set of values and sorts them in ascending order.\ntable(L1.Occupation) # For a string variable, the function table() outputs a table that tallies the number of occurrences of each unique value in a set of values and sorts them alphabetically.\n\nsummary(L1.Age) # For a numeric variable, the function summary() outputs six values that, together, summarise the set of values contained in this variable: the minimum and maximum values, the first and third quartiles (more on this in Chapter *), and the mean and median (more on this in Chapter *).\nsummary(L1.Occupation) # For a string variable, the summary() function only outputs the length of the string vector, its object class and data mode. \n```\n:::\n\n:::\n\n### Function arguments\n\nAll of the functions that we have looked at this chapter so far work with just a single argument: either a vector of values (e.g. a variable from our dataset as in `mean(L1.data$Age)`) or an entire tabular dataset (e.g. `str(L1.data)`). When we looked at the `head()` function, we saw that, per default, it displays the first six rows but that we can change this by specifying a second argument in the function. In `R`, arguments within a function are always separated by a comma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(L1.Age, n = 6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21 38 55 26 55 58\n```\n\n\n:::\n:::\n\n\nThe names of the argument can be specified but do not have to be if they are listed in the order specified in the documentation. You can check the 'Usage' section of a function's help file (e.g. using `help(head)` function or `?head`) to find out the order of the arguments. Run the following commands and compare their output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(x = L1.Age, n = 6)\nhead(L1.Age, 6)\nhead(n = 6, x = L1.Age)\nhead(6, L1.Age)\n```\n:::\n\n\nWhilst the first three return exactly the same output, the fourth returns an error because the argument names are not specified and are not in the order specified in the function's help file. To avoid making errors and confusing your collaborators and/or future self, it's good practice to explicitly name all the arguments except the most obvious ones.\n\n::: callout-tip\n#### Quiz time! {.unnumbered}\n\nLook at the two lines of code and their outputs below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.data$Vocab\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 73.333333 95.555556 95.555556 84.444444 88.888889 73.333333 53.333333\n [8] 73.333333 35.555556 60.000000 40.000000 95.555556 86.666667 53.333333\n[15] 88.888889 46.666667 86.666667 84.444444 86.666667 77.777778 93.333333\n[22] 91.111111 68.888889 82.222222 75.555556 80.000000 86.666667 88.888889\n[29] 75.555556 57.777778 88.888889 95.555556 60.000000 77.777778 55.555556\n[36] 80.000000 88.888889 93.333333 93.333333 95.555556 75.555556 77.777778\n[43] 82.222222 80.000000 44.444444 62.222222 57.777778 93.333333 57.777778\n[50] 66.666667 48.888889 77.777778 51.111111 68.888889 80.000000 80.000000\n[57] 55.555556 77.777778 80.000000 82.222222 91.111111 71.111111 28.888889\n[64] 82.222222 80.000000 62.222222 95.555556 68.888889 13.333333  8.888889\n[71] 26.666667 37.777778 55.555556 82.222222 86.666667 40.000000 86.666667\n[78] 71.111111 46.666667 64.444444 60.000000 22.222222 64.444444 48.888889\n[85] 42.222222 60.000000 53.333333 42.222222 51.111111 68.888889\n```\n\n\n:::\n\n```{.r .cell-code}\nround(L1.data$Vocab)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 73 96 96 84 89 73 53 73 36 60 40 96 87 53 89 47 87 84 87 78 93 91 69 82 76\n[26] 80 87 89 76 58 89 96 60 78 56 80 89 93 93 96 76 78 82 80 44 62 58 93 58 67\n[51] 49 78 51 69 80 80 56 78 80 82 91 71 29 82 80 62 96 69 13  9 27 38 56 82 87\n[76] 40 87 71 47 64 60 22 64 49 42 60 53 42 51 69\n```\n\n\n:::\n:::\n\n\n[**Q7.14**]{style=\"color:green;\"} Based on your observations, what does the `round()` function do?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_40258\" onsubmit=\"return validate_form_40258()\" method=\"post\">\n<input type=\"radio\" name=\"answer_40258\" id=\"answer_40258_1\" value=\"The round() function displays fewer values for ease of reading.\"/>\n<label>The round() function displays fewer values for ease of reading.</label>\n<br/>\n<input type=\"radio\" name=\"answer_40258\" id=\"answer_40258_2\" value=\"The round() function rounds off numbers to the nearest whole number.\"/>\n<label>The round() function rounds off numbers to the nearest whole number.</label>\n<br/>\n<input type=\"radio\" name=\"answer_40258\" id=\"answer_40258_3\" value=\"The round() function displays just the first two digits of any number.\"/>\n<label>The round() function displays just the first two digits of any number.</label>\n<br/>\n<input type=\"radio\" name=\"answer_40258\" id=\"answer_40258_4\" value=\"The round() function is designed to save screen space for smaller displays.\"/>\n<label>The round() function is designed to save screen space for smaller displays.</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_40258\"></div>\n</form>\n<script>function validate_form_40258() {var x, text; var x = document.forms['form_40258']['answer_40258'].value;if (x == 'The round() function rounds off numbers to the nearest whole number.'){text = 'That‚Äôs right.';} else {text = 'Are you sure? Try out the <code>round()</code> function with other numbers to find out more.';} document.getElementById('result_40258').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, res12, res13, res14;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.'; res9 = document.getElementById('result_61677').innerText == 'Yes, well done!'; res10 = document.getElementById('result_23050').innerText == 'That‚Äôs correct.'; res11 = document.getElementById('result_98531').innerText == 'Brawo! üéâ'; res12 = document.getElementById('result_89662').innerText == 'Great job!'; res13 = document.getElementById('result_44125').innerText == 'That‚Äôs right!'; res14 = document.getElementById('result_40258').innerText == 'That‚Äôs right.';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9 + res10 + res11 + res12 + res13 + res14;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q7.15**]{style=\"color:green;\"} Check out the 'Usage' section of the help file on the `round()` function to find out how to round the `Vocab` values in the L1 dataset to two decimal places. How can this be achieved?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_56672\" onsubmit=\"return validate_form_56672()\" method=\"post\">\n<input type=\"checkbox\" id=\"answer_56672_1\" value=\"round(L1.data$Vocab, digits = 2)\"/>\n<label>round(L1.data$Vocab, digits = 2)</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_56672_2\" value=\"round(L1.data$Vocab: digits = 2)\"/>\n<label>round(L1.data$Vocab: digits = 2)</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_56672_3\" value=\"round(L1.data$Vocab, 2)\"/>\n<label>round(L1.data$Vocab, 2)</label>\n<br/>\n<input type=\"checkbox\" id=\"answer_56672_4\" value=\"round(L1.data$Vocab, digits = -4)\"/>\n<label>round(L1.data$Vocab, digits = -4)</label>\n<br/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_56672\"></div>\n</form>\n<script>function validate_form_56672() {var text; var x1 = document.getElementById('answer_56672_1'); var x2 = document.getElementById('answer_56672_2'); var x3 = document.getElementById('answer_56672_3'); var x4 = document.getElementById('answer_56672_4'); if (x1.checked == true&x2.checked == false&x3.checked == true&x4.checked == false){text = 'That‚Äôs right.';} else {text = 'Not quite. Try out these commands to find out which ones work as expected.';} document.getElementById('result_56672').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, res12, res13, res14, res15;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.'; res9 = document.getElementById('result_61677').innerText == 'Yes, well done!'; res10 = document.getElementById('result_23050').innerText == 'That‚Äôs correct.'; res11 = document.getElementById('result_98531').innerText == 'Brawo! üéâ'; res12 = document.getElementById('result_89662').innerText == 'Great job!'; res13 = document.getElementById('result_44125').innerText == 'That‚Äôs right!'; res14 = document.getElementById('result_40258').innerText == 'That‚Äôs right.'; res15 = document.getElementById('result_56672').innerText == 'That‚Äôs right.';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9 + res10 + res11 + res12 + res13 + res14 + res15;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_97149\" onmouseover=\"return show_hint_97149()\">üòá Hover for a hint</div>\n<div id=\"result_97149\" onmouseover=\"return show_hint_97149()\"></div>\n<script>function show_hint_97149(){var x = document.getElementById('result_97149').innerHTML; if(!x){document.getElementById('result_97149').innerHTML = 'Two options are correct because, as long as the arguments are listed in the correct order, we do not have to specify the names of the arguments.';} else {document.getElementById('result_97149').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n:::\n\n## Combining functions in `R`\n\nCombining functions is where the real fun starts with programming! In @sec-RFunctions, we already combined two functions using a mathematical operator (`/`). But what if we want to compute L1 participant's average age to two decimal places? To do this, we need to combine the `mean()` function and the `round()` function. We can do this in two steps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1:\nL1.mean.age <- mean(L1.Age)\n# Step 2:\nround(L1.mean.age, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 37.54\n```\n\n\n:::\n:::\n\n\nIn step 1, we compute the mean value and save it as an `R` object and, in step 2, we pass this object through the `round()` function with the argument `digits = 2`. There is nothing wrong with this method, but it often require lots of intermediary `R` objects, which can get rather tiresome.\n\nIn the following, we will look at two further ways to combine functions in `R`: nesting and piping.\n\n### Nested functions {#sec-Nesting}\n\nThe first method involves lots of brackets (also known as 'parentheses'). This is because in nested functions, one function is placed inside another function. The inner function is evaluated first, and its result is passed to the next outer function. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(mean(L1.Age))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 38\n```\n\n\n:::\n:::\n\n\nIn this example, the `mean()` function is nested inside the `round()` function. The `mean()` function calculates the mean of `L1.Age`, and the result is passed to the `round()` function, which rounds the result to the nearest integer.\n\nYou can also pass additional arguments to any of the functions, but you must make sure that you place the arguments within the correct set of brackets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(mean(L1.Age), digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 37.54\n```\n\n\n:::\n:::\n\n\nIn this example, the argument `digits = 2` belongs to the outer function `round()`; hence it must be placed within the outer set of brackets.\n\nIn theory, you can nest as many functions as you like, but things can get quite chaotic after more than a couple of functions. You need to make sure that you can trace back which arguments and which brackets belong to which function (see @fig-NestedFunctions).\n\n![A schematic representations of a) one function with two arguments, b) two nested functions each with two arguments, and c) three nested functions each with two arguments](images/NestedFunctions.png){#fig-NestedFunctions fig-alt=\"The pseudo code reads like this a) function(argument 1, argument 2), b) functionB(functionA(argument 1a, argument 2a), argument1b, argument2b), c) functionC(functionB(functionA(argument 1a, argument 2a), argument1b, argument2b), argument1c, argument2c).\"}\n\n::: callout-tip\n### Time to think!\n\nConsider the three lines of code below. Without running them, can you tell which of the three lines of code will output the square root of L1 participant's average age to two decimal places?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(sqrt(mean(L1.Age) digits = 2))\n\nsqrt(round(mean(L1.Age), digits = 2))\n\nround(sqrt(mean(L1.Age)), digits = 2)\n```\n:::\n\n\nThe first line will return an \"unexpected symbol\" error because it is missing a comma before the argument `digits = 2`. The second line actually outputs `6.126989`, which has more than two decimal places! This is because `R` interprets the functions from the inside out: first, it calculates the mean value, then it rounds that off to two decimal places, and only then does it compute the square root of that rounded off value. The third line, in contrast, does the rounding operation as the last step. Note that, in the two lines of code that do not produce an error, the brackets around the argument `digits = 2` are also located in different places.\n\nIt is very easy to make bracketing errors when writing code and especially so when nesting functions (see @fig-NestedFunctions). Watch your commas and brackets (see also @sec-Errors)!\n:::\n\n### Piped Functions {#sec-Piping}\n\nIf you found all these brackets overwhelming: fear not! There is a second method for combining functions in `R`, which is often more convenient and almost always easier to decipher. It involves the pipe operator, which in `R` is `|>`.[^7_variablesfunctions-1]\n\n[^7_variablesfunctions-1]: This is the **native R pipe** operator, which was introduced in May 2021 with `R` version 4.1.0. As a result, you will not find it in code written in earlier versions of `R`. Previously, piping required an additional `R` library, the {magrittr} library. The {magrittr} pipe looks like this: `%>%`. At first sight, they appear to work is in the same way, but there are some important differences. If you are familiar with the {magrittr} pipe and want to understand how it differs from the native R pipe, I recommend this excellent blog post by Isabella Vel√°squez: <https://ivelasq.rbind.io/blog/understanding-the-r-pipe/>.\n\nThe `|>` operator passes the output of one function on to the first argument of the next function. This allows us to chain multiple functions together in a much more intuitive way.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.Age |> \n mean() |> \n round()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 38\n```\n\n\n:::\n:::\n\n\nIn this example, the object `L1.Age` is passed on to the first argument of the `mean()` function. This calculates the mean of `L1.Age`. Next, this result is passed to the `round()` function, which rounds the mean value to the nearest integer.\n\nIf we want to pass additional arguments to any function in the pipeline, we simply at it in the brackets corresponding to the function in question.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL1.Age |> \n mean() |> \n round(digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 37.54\n```\n\n\n:::\n:::\n\n\nLike many of the relational operators we saw in @sec-RelationalOperators, the `R` pipe is a combination of two symbols, the computer pipe symbol `|` and the right angle bracket `>`. Don't worry if you're not sure where these two symbols are on your keyboard as *RStudio* has a handy shortcut for you: `Ctrl/Cmd + Shift + M`[^7_variablesfunctions-2] (see @fig-Pipes). I strongly recommend that you write this shortcut on a prominent post-it and learn it asap, as you will need it a lot when you are working in `R`!\n\n[^7_variablesfunctions-2]: If, in your version of RStudio, this shortcut produces `%>%` instead of `|>`, you have probably not activated the native `R` pipe option in your *RStudio* global options (see instructions in @sec-GlobalOptions).\n\n![Remix of Ren√© Magritte's \"La Trahison des images\" (1928-1929) with the native `R` pipe and its *RStudio* shortcut (based on an image from [Wikiart.org](https://www.wikiart.org/en/rene-magritte/the-treachery-of-images-this-is-not-a-pipe-1948)). This image is licensed under [CC-BY](https://creativecommons.org/licenses/by/4.0/) Elen Le Foll[^7_variablesfunctions-3].](images/NativeRPipe.png){#fig-Pipes fig-alt=\"Collation of two images: One is a famous painting by Ren√© Magritte of a pipe with the caption \\\"Ceci n'est pas une pipe\\\" [This is not a pipe in French], and another, in the same style and colours, with the native R pipe operator and its keyboard shortcut with the caption \\\"Ceci n'est pas une pipe\\\" [This is a pipe in French].\"}\n\n[^7_variablesfunctions-3]: I would appreciate you referencing this textbook or textbook chapter when reusing this image. Thank you!\n\n[^7_variablesfunctions-4]: I would appreciate you referencing this textbook or textbook chapter when reusing this image. Thank you!\n\n::: callout-tip\n#### Quiz time! {.unnumbered}\n\n[**Q7.16**]{style=\"color:green;\"} Using the `R` pipe operator, calculate the average mean age of the L2 participants and round off this value to two decimal places. What is the result?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_55768\" onsubmit=\"return validate_form_55768()\" method=\"post\">\n<input type=\"text\" placeholder=\"\" name=\"answer_55768\"/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_55768\"></div>\n</form>\n<script>function validate_form_55768() {var x, text; var x = document.forms['form_55768']['answer_55768'].value;if (x == '32.72'){text = 'Yes, well done!';} else {text = 'No, try again.';} document.getElementById('result_55768').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, res12, res13, res14, res15, res16;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.'; res9 = document.getElementById('result_61677').innerText == 'Yes, well done!'; res10 = document.getElementById('result_23050').innerText == 'That‚Äôs correct.'; res11 = document.getElementById('result_98531').innerText == 'Brawo! üéâ'; res12 = document.getElementById('result_89662').innerText == 'Great job!'; res13 = document.getElementById('result_44125').innerText == 'That‚Äôs right!'; res14 = document.getElementById('result_40258').innerText == 'That‚Äôs right.'; res15 = document.getElementById('result_56672').innerText == 'That‚Äôs right.'; res16 = document.getElementById('result_55768').innerText == 'Yes, well done!';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9 + res10 + res11 + res12 + res13 + res14 + res15 + res16;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n:::\n\n\n¬†\n\n[**Q7.17**]{style=\"color:green;\"} Unsurprisingly, in @DabrowskaExperienceAptitudeIndividual2019's study, English L1 participants, on average, scored higher in an English vocabulary test than L2 participants. Calculate the difference between L1 and L2 participants' mean `Vocab` test results and round off this means difference to two decimal places.\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<form name=\"form_89448\" onsubmit=\"return validate_form_89448()\" method=\"post\">\n<input type=\"text\" placeholder=\"\" name=\"answer_89448\"/>\n<input type=\"submit\" value=\"Check answer\"/>\n<div id=\"result_89448\"></div>\n</form>\n<script>function validate_form_89448() {var x, text; var x = document.forms['form_89448']['answer_89448'].value;if (x == '16.33'){text = 'That‚Äôs right. Very well done!';} else {text = 'That‚Äôs not it. Check the code chunk below if you are unsure how to proceed.';} document.getElementById('result_89448').innerHTML = text; evaluate_final_score(); return false;}function evaluate_final_score(){\n         element = document.getElementById('checkdown_final_score');\n         if(element === null){return false;} else {var element, text, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, res12, res13, res14, res15, res16, res17;res1 = document.getElementById('result_62702').innerText == 'That‚Äôs right. The printed message ‚Äú[ reached ‚Äòmax‚Äô / getOption(‚Äúmax.print‚Äù) ‚Äì omitted 45 rows ]‚Äù is not an error, but merely a message informing us that not all the rows could be printed.'; res2 = document.getElementById('result_41553').innerText == 'That‚Äôs right! In fact, three of the above options will work. Try them out to work out which three they are!'; res3 = document.getElementById('result_94951').innerText == 'Correct. These job categories cannot be meaningfully ordered.'; res4 = document.getElementById('result_79198').innerText == 'That‚Äôs right. Even though we know that human gender is not actually binary, in this dataset, the variable Gender is binary because all of the participants either identified as female (F) or male (M).'; res5 = document.getElementById('result_35797').innerText == 'That‚Äôs right. These are participants‚Äô score on a vocabularly test. The more items they got right, the more points they got.'; res6 = document.getElementById('result_54179').innerText == 'That‚Äôs right, well done!'; res7 = document.getElementById('result_17807').innerText == 'That‚Äôs right! And there are more columns that are specific to the L2 dataset but which are not listed here.'; res8 = document.getElementById('result_92830').innerText == 'That‚Äôs right! int is a subset of the numeric data type. It stands for ‚Äòinteger‚Äô which is a whole number without a decimal place.'; res9 = document.getElementById('result_61677').innerText == 'Yes, well done!'; res10 = document.getElementById('result_23050').innerText == 'That‚Äôs correct.'; res11 = document.getElementById('result_98531').innerText == 'Brawo! üéâ'; res12 = document.getElementById('result_89662').innerText == 'Great job!'; res13 = document.getElementById('result_44125').innerText == 'That‚Äôs right!'; res14 = document.getElementById('result_40258').innerText == 'That‚Äôs right.'; res15 = document.getElementById('result_56672').innerText == 'That‚Äôs right.'; res16 = document.getElementById('result_55768').innerText == 'Yes, well done!'; res17 = document.getElementById('result_89448').innerText == 'That‚Äôs right. Very well done!';text = res1 + res2 + res3 + res4 + res5 + res6 + res7 + res8 + res9 + res10 + res11 + res12 + res13 + res14 + res15 + res16 + res17;element.innerHTML = text;\n         return false;\n         }}</script>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"hint_22734\" onmouseover=\"return show_hint_22734()\">üòá Hover for a hint</div>\n<div id=\"result_22734\" onmouseover=\"return show_hint_22734()\"></div>\n<script>function show_hint_22734(){var x = document.getElementById('result_22734').innerHTML; if(!x){document.getElementById('result_22734').innerHTML = 'There are several ways to solve this puzzle. It does not have to involve the pipe operator. Don‚Äôt hesitate to work in several steps by saving an intermediary result as an <code>R</code> object.';} else {document.getElementById('result_22734').innerHTML = '';}}</script>\n```\n\n:::\n:::\n\n\n¬†\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### Click here for a detailed answer to Q7.16\n\nThey are lots of ways to tackle question 16. Here is one approach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(mean(L1.data$Vocab) - mean(L2.data$Vocab)) |> \n  round(digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.33\n```\n\n\n:::\n:::\n\n\nNote that this approach requires a set of brackets around the first subtraction operation, otherwise only the second mean value is rounded off to two decimal places. Compare the following lines of code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(L1.data$Vocab) - mean(L2.data$Vocab)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.33315\n```\n\n\n:::\n\n```{.r .cell-code}\n(mean(L1.data$Vocab) - mean(L2.data$Vocab)) |> \n  round(digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.33\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(L1.data$Vocab) - round(mean(L2.data$Vocab), digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.3358\n```\n\n\n:::\n:::\n\n\nAnother solution would be to store the difference in means as an `R` object and pass this object to the round() function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean.diff.vocab <- mean(L1.data$Vocab) - mean(L2.data$Vocab)\nround(mean.diff.vocab, digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.33\n```\n\n\n:::\n:::\n\n\nOr, if you want to use the pipe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean.diff.vocab <- mean(L1.data$Vocab) - mean(L2.data$Vocab)\nmean.diff.vocab |> \n  round(digits = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 16.33\n```\n\n\n:::\n:::\n\n:::\n\n### Check your progress üåü {.unnumbered}\n\nYou have successfully completed [`<span id=\"checkdown_final_score\">0</span>`{=html} out of 17 questions]{style=\"color:green;\"} in this chapter.\n\nAre you confident that you can...?\n\n-   [ ] Inspect a data set in `R` (@sec-InspectingData)\n-   [ ] Recognise different types of variables (@sec-Variables)\n-   [ ] Access individual columns and data points in `R` (@sec-DollarSign) - (@sec-SquareBrackets)\n-   [ ] Use built-in `R` functions and change function arguments (@sec-RFunctions)\n-   [ ] Combine functions in `R` using both the nesting and the piping methods (@sec-Nesting) - (@sec-Piping)\n\nYou are now ready to some statistics in `R`! In [Chapter 8](@sec-DescRiptiveStats), we begin with descriptive statistics.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}