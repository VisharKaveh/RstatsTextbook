[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Literacy for the Language Sciences",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#what-is-this-book-about",
    "href": "index.html#what-is-this-book-about",
    "title": "Data Literacy for the Language Sciences",
    "section": "What is this book about?",
    "text": "What is this book about?\nThis textbook is intended as a hands-on introduction to data management, statistics, and data visualisation for students and researchers in the language sciences. It relies exclusively on freely accessible, open-source tools, focusing primarily on the programming language and environment R.\nIt is often claimed that learning R is ‚Äúnot for everyone‚Äù, or that it has ‚Äúa steep learning curve‚Äù. This textbook aims to prove that the opposite is true. There are many reasons why it is worth investing the time and effort to learn how to do research in R, and it is no more difficult than learning any other new skill. In fact, the results of a recent study suggests that language aptitude is a much stronger predictor of programming aptitude than numeracy (i.e., ‚Äúbeing good at numbers‚Äù) (Prat et al. 2020). So if you have successfully learnt a foreign language in the past, there is no reason why you shouldn‚Äôt succeed in learning a programming language!\n\n‚ÄúLearning R is like learning a foreign language. If you enjoy learning languages, then ‚ÄòR‚Äô is just another one. [‚Ä¶] You have to learn vocabulary, grammar and syntax. Similar to learning a new language, programming languages also have steep learning curves and require quite some commitment.‚Äù (Dauber 2024)\n\nThe rationale for this textbook is based on my personal observations, in both teaching and consulting, that many ‚Äòintroductory‚Äô textbooks to statistics and/or R are not suitable for many humanities scholars, who typically have little to no prior programming experience and for whom the word ‚Äústatistics‚Äù often evokes little more than unpleasant memories of school mathematics. It is worth stressing that is not a matter of generation (I have observed this phenomenon across all age groups), intelligence (I have taught people far more intelligent than me), or an innate inability to deal with numbers and/or computers (although these are beliefs that, sadly, some have deeply internalised). Instead, I am convinced that, for many people, it is simply a matter of finding a sturdy, first stepping stone and gathering up the courage to step on it to begin this learning journey.\nThe aim of this textbook is by no means to replace any of the brilliant, existing textbooks aimed at imparting statistical literacy for linguistics research, but rather to provide a stepping stone to be able to access these wonderful resources.1",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#who-is-this-book-for",
    "href": "index.html#who-is-this-book-for",
    "title": "Data Literacy for the Language Sciences",
    "section": "Who is this book for?",
    "text": "Who is this book for?\nThe target audience for this book are students and researchers in the language sciences, including (applied) linguistics, (first and second) language teaching, and language education research. All examples are taken from these research areas. Ultimately, however, this textbook may be of use to anyone who feels they could benefit from a maximally accessible stepping stone, whichever discipline they are coming from.\nThis textbook is intended to be read linearly, chapter by chapter. Apart from the first introductory chapter, all other chapters will require several hours of commitment. They include quiz questions and short practical tasks. Completing the these questions and tasks is essential to genuinely assimilate the textbook‚Äôs contents. That‚Äôs because the best way to learn new skills is to try things out so, with this in mind, let‚Äôs get cracking!\n\n\n\n\n\n\nFigure¬†1: Artwork encouraging beginner R learners by @allison_horst.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#about-the-author",
    "href": "index.html#about-the-author",
    "title": "Data Literacy for the Language Sciences",
    "section": "About the author",
    "text": "About the author\nI started learning about statistics and R in 2017 when I realised that it would be important for me to conduct the kind of quantitative analyses that I wanted to do as part of my PhD in applied linguistics/English language teaching (Le Foll 2022). I had no previous experience in either and there were no such courses at my university. Even though I mostly learnt by myself, it would be incorrect to say that I am self-taught: I learnt from some of the resources listed in Appendix A, attended bootcamps and summer schools, read countless posts on StackOverflow and various blogs, and exchanged with like-minded people on social media (#Rstats, #dataviz, #TidyTuesday). This why it is fairer to say that I am community-taught.\nI now like to describe myself as an ‚Äúadvanced beginner‚Äù in R and statistics. I am not a programmer, nor a statistician, but rather an applied linguist and committed educator. I enjoy teaching data literacy, statistics, and data visualisation to current and future generations of linguists, language education scholars, and teachers. I teach regular methods courses at the University of Cologne that are attended not just by M.A.¬†and M.Ed. students, but also by some doctoral and post-doctoral researcher colleagues. I also teach workshops for both doctoral and post-doctoral researchers at other institutions on a freelance basis.\nThis textbook was partly designed on the basis of materials that I have developed for these courses and workshops. Publishing these materials is my way to contribute to the wonderful community of people who have helped me on my leaRning journey. ü§ó\n\n\n\nMe back in 2017, proudly presenting at my first international conference.2\n\n\nIf (parts of) this textbook helped you on your leaRning journey or for your teaching, do drop me a line to let me know! If you have any suggestions for improvements, I would also love to hear from you. ‚úâÔ∏è\n\n\n\n\nDauber, Daniel. 2024. R for non-programmers: A guide for social scientists. Open Education Resource. https://bookdown.org/daniel_dauber_io/r4np_book/.\n\n\nLe Foll, Elen. 2022. Textbook English: A corpus-based analysis of the language of EFL textbooks used in secondary schools in France, Germany and Spain. Osnabr√ºck University PhD thesis. https://doi.org/10.48693/278.\n\n\nPrat, Chantel S., Tara M. Madhyastha, Malayka J. Mottarella & Chu-Hsuan Kuo. 2020. Relating natural language aptitude to individual differences in learning programming languages. Scientific Reports. Nature 10(1). 3817. https://doi.org/10.1038/s41598-020-60661-8.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Data Literacy for the Language Sciences",
    "section": "",
    "text": "A (work-in-progress) list of next-step resources can be found in Appendix A.‚Ü©Ô∏é\nI chose this picture because I vividly remember two professors pointing out that I had written ‚Äúp¬†=¬†0.00‚Äù on my poster (which I had copied-and-pasted from the output of the statistics tool that I had used) and laughing among themselves (but well within earshot) at how stupid that was. Learning these skills certainly requires a lot of effort on the part of the learner, but it also requires an academic culture that strives to include rather than exclude. This textbook explicitly aims for an inclusive approach to teaching the basics of data literacy and I have included this photo as a reminder to always persevere, whether in the face of seemingly insurmountable error message or snarky remarks!‚Ü©Ô∏é",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "OpenScholarship.html",
    "href": "OpenScholarship.html",
    "title": "1¬† Open Scholarship",
    "section": "",
    "text": "1.1 Open Source\nIn line with its aim to provide an accessible introduction to statistics and data visualisation, this textbook relies exclusively on open-source software and programming languages, foremost LibreOffice Calc, R and RStudio. Open source refers to software whose source code is available under a license that grants anyone the rights to study, modify, and distribute the software to anyone and for any purpose. If we think of a software application as a cake, the source code is like its recipe. It contains the list of ingredients and the steps to bake the cake. Open source means that the recipe is publicly available. You can access it, read it, and use it to bake the cake. You can also modify it to add your own twist, such as adding a new ingredient or making it vegan, and share it with others. In the context of software, this allows many people to collaborate, make improvements, and share their versions, resulting in better and more diverse software.\nUsing open-source software in this introductory textbook means that anyone2 can download, install and use the required software at no cost. However, it is very important to note that not all free software (freeware) is open source. Let us illustrate the difference by comparing different spreadsheet programmes as, in Chapter 2, we will begin exploring tabular data structures in a spreadsheet programme.\nThe most most widely used spreadsheet programme to date is undoubtedly Microsoft Excel. Excel is a commercial, proprietary spreadsheet editor which forms part of the Microsoft 365 package. As such, to use Excel on your personal computer, you need to buy a license or be a member of an organisation (e.g., your university or company) that pays for such a license. It is true that Microsoft now also offers a free (functionally limited) web-based version of Excel, yet this still does not make it open source. This is because Microsoft does not share the source code of any Excel version, which means that, even if they are giving away free cake, we do not have the recipe to bake the cake ourselves should the company decide to start charging money for the cake or to no longer distribute it at all! Similarly, you may be familiar with a popular, web-based alternative to Excel: Google Sheets. Whilst it is (currently) free to use, as the name suggests, Google Sheets is owned by Google and is therefore not open source, either. By contrast, LibreOffice Calc is a project of The Document Foundation (TDF) that provides a popular, free, open-source office productivity software suite comparable to Microsoft 365 called LibreOffice. LibreOffice is developed collaboratively by very many different people across the world who all do so on a volunteer basis. The Document Foundation estimates that there are 200 million active LibreOffice users worldwide, about 25% of whom are thought to be students (figures from 2018, see LibreOffice 2024). Its popularity is likely due to the fact that it not only uses open formats (e.g., .odt and .ods), but can also open and save to a range of popular formats including those used by Microsoft (e.g., .docx and .xlsx).",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Open Scholarship</span>"
    ]
  },
  {
    "objectID": "OpenScholarship.html#sec-OpenSource",
    "href": "OpenScholarship.html#sec-OpenSource",
    "title": "1¬† Open Scholarship",
    "section": "",
    "text": "Quiz time!\n\n\n\n1) Which of these is an open-source alternative to Microsoft Word?\n\n\nLibreOffice Writer\n\n\nPages\n\n\nGoogle Docs\n\n\n\n\n\n¬†\n2) Which of these is an open-source alternative to Microsoft Powerpoint?\n\n\nLibreOffice Impress\n\n\nGoogle Slides\n\n\nKeynote\n\n\n\n\n\n¬†\n3) Not only can software be open source, programming languages can, too. In fact, most modern programming languages are open source. In this book, we will focus on the open-source programming language R. Which of these is not an open-source programming language?\n\n\nJavaScript\n\n\nPython\n\n\nMATLAB\n\n\n\n\n\n¬†\n4) There are also many open-source operating systems. Which of these is an open-source alternative to the operating system Windows?\n\n\nUbuntu\n\n\nMacOS\n\n\niOS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTask 1\n\n\n\nYour first task is to download and install LibreOffice as we will use its spreadsheet editor, LibreOffice Calc, in the next few chapters.\n\nLibreOffice is available for Windows, Mac and Linux. You can download it from here: https://www.libreoffice.org/download/download-libreoffice/.\nYou will find detailed installation instructions here: https://www.libreoffice.org/get-help/install-howto/.\nDetailed documentation is also available in many different languages: https://documentation.libreoffice.org/en/english-documentation/",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Open Scholarship</span>"
    ]
  },
  {
    "objectID": "OpenScholarship.html#sec-OpenEducation",
    "href": "OpenScholarship.html#sec-OpenEducation",
    "title": "1¬† Open Scholarship",
    "section": "1.2 Open Education",
    "text": "1.2 Open Education\nThe web-based version of this textbook is published as an Open Educational Resource (OER; see Figure¬†1.1) under the Creative Commons license: CC BY-NC-SA. This means that it is free to read and use, as well as edit, remix, and expand upon, provided that:\n\nthe original author and source is mentioned (hence you should specify who it is BY),\nany derived version is not made into a commercial product (NC stands for non-commercial), and that\nany derived versions of this textbook (e.g., a translated version or a version adapted for history scholars) are also shared with this same license (SA stands for share alike).\n\nIn line with the principles of Open Education, all of the datasets that we will work with in this textbook have been published in Open Access, which means that we can freely use them to learn about statistics and data visualisation using real datasets from published research studies in applied linguistics and language education.\n\n\n\n\n\n\nFigure¬†1.1: OER sketch note by Yvonne Stry\n\n\n\n\n\n\n\n\n\nTips to go further\n\n\n\n\n\nThis chapter has simplified things considerably. To be considered open source, software distributions actually have to comply with ten criteria. You can read up on them here:\n\nhttps://opensource.org/osd\n\nTo find out more about the benefits of open-source software in the context of research, I recommend reading:\n\nhttps://book.the-turing-way.org/reproducible-research/open/open-source\n\nTo find out more about Open Educational Resources (OERs), I recommend exploring the following OER databases:\n\nhttps://oercommons.org/\nhttps://www.twillo.de/oer/web/\n\n\n\n\n\n\n\n\n2024. LibreOffice. Wikipedia. https://en.wikipedia.org/w/index.php?title=LibreOffice&oldid=1218520104.\n\n\nParsons, Sam, Fl√°vio Azevedo, Mahmoud M. Elsherif, Samuel Guay, Owen N. Shahim, Gisela H. Govaart, Emma Norris, et al. 2022. A community-sourced glossary of open scholarship terms. Nature Human Behaviour. Nature 6(3). 312‚Äì318. https://doi.org/10.1038/s41562-021-01269-4.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Open Scholarship</span>"
    ]
  },
  {
    "objectID": "OpenScholarship.html#footnotes",
    "href": "OpenScholarship.html#footnotes",
    "title": "1¬† Open Scholarship",
    "section": "",
    "text": "Emprical data is based on what is experienced or observed rather than on theory alone.‚Ü©Ô∏é\nProvided that they have access to the internet and a functioning personal computer.‚Ü©Ô∏é",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Open Scholarship</span>"
    ]
  },
  {
    "objectID": "Data.html",
    "href": "Data.html",
    "title": "2¬† Data",
    "section": "",
    "text": "Chapter overview\nThis chapter first considers what data means in the context of language research, before turning to how these data are formatted and stored. You will learn about:\nAlong the way, you will get insights into an eye-tracking study involving cute Playmobil figures and a meta-science investigation that highlights the utmost importance of a solid grounding in data literacy for research. Read on to find out more!",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "Data.html#data-in-the-language-sciences",
    "href": "Data.html#data-in-the-language-sciences",
    "title": "2¬† Data",
    "section": "2.1 Data in the language sciences",
    "text": "2.1 Data in the language sciences\nIn this book, we are concerned with empirical research in the language sciences, in other words, with research that is based on the analysis of data. But what is data exactly? Data can be collected via surveys, measurements, or observations. To begin with, however, these collected datasets are ‚Äúraw‚Äù. Data only becomes information once we have analysed and interpreted the data in a meaningful way. Hence, just like uncooked pasta does not make a flavourful meal, we must learn to ‚Äúcook‚Äù the raw data to obtain meaningful information.\nWhat kind of data are analysed in the language sciences? To get a rough idea of the range of data types analysed in the language sciences, let us take a look at the IRIS database. IRIS is a public, open repository where anyone can deposit the data, materials, instruments, code, and tools that they used ‚Äúfor research into languages, including first, second, and beyond, and signed language learning, multilingualism, language education, language use, and language processing‚Äù. As such, it supports Open Science and Open Scholarship (see Chapter 1).\n\n\n\n\n\n\nTask 1\n\n\n\nConnect to the IRIS website. Go to its Search and Download page and scroll down to the filter option Data Type. Browse through the different data types most commonly used in language-related research. For which kinds of studies could these different types of data have been collected?\n\n\n\n\n\n\nFigure¬†2.1: Screenshot from the IRIS database search page (accessed on 17 April 2024)",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "Data.html#sec-ResearchData",
    "href": "Data.html#sec-ResearchData",
    "title": "2¬† Data",
    "section": "2.2 Types of research data",
    "text": "2.2 Types of research data\nGiven the wide range of methods used in language research, it is no surprise that they are so many different types of research data. Although the data types listed on the IRIS search page (see Figure¬†2.1 for extract) are very broad and the categories not clearly defined, the list illustrates well the breadth of research data types typically analysed in language studies. The first data type category, ‚ÄúOral production‚Äù, for instance, can equally refer to text transcriptions of language users‚Äô oral production, audio, or video files. It can also refer to either raw data or to (more or less) processed data. For example, a transcript of a conversation could have been automatically annotated for part-of-speech, meaning that every word would be marked for their word class (e.g., This_DT is_VBZ not_RB raw_JJ text_NN data_NN ._PUNC), or it could have been manually anonymised by adding placeholders (e.g., Is &lt;NAME&gt; going out with &lt;NAME&gt;?) indicating that certain words have been retracted for data protection reasons.\nThe second most frequent data type category, ‚ÄúClosed response format‚Äù, includes different kinds of questionnaires and tests. Questionnaires may ask study participants to disclose personal information relevant to the research questions using single or multiple-choice questions, such as what language they speak at home, how long they have studied a language for, or how old they are. Tests may be designed to assess participants‚Äô language competences (e.g., in the form of a vocabulary or grammar test), as well as other aspects relevant to the research questions being investigated (e.g., short-term memory or baseline reaction times).\nIn this book, we will focus on research processes that happen post data collection. However, it is crucial to be acutely aware of the conditions and context in which the data that we are analysing were collected and pre-processed as these steps of the research process can entirely change the results of the data analysis. Imagine that we decided to compare the ability of two groups of French L2 learners. To this end, a language production test was administered to two entire classes of secondary school pupils learning French as a second language with two different teaching methods. If one group had 15 minutes to complete the test, whilst the other group had up to 60 minutes, the results would not be comparable.\n\nQuiz time!\n1) Which other reasons could potentially jeopardise the comparison of test results data from two different groups of pupils?\n\n\nOne group having French lessons on Tuesday mornings, the other on Friday afternoons.\n\n\nOne group having a single native speaker of French, whilst the other has none.\n\n\nOne group having a higher proportion of pupils from migrant families.\n\n\nThe two groups having different teachers.\n\n\nOne group having a higher proportion of pupils with reading difficulties.\n\n\nOne group having a classroom decorated with French flags and posters about France.\n\n\n\n\n\n\nIn research, we typically differentiate between primary data, which is the data that you collected yourself, and secondary data, which is data that was collected by others. If you were to conduct a new study based on data that you found on IRIS, this would be a secondary data analysis.\nEspecially when conducting secondary data analyses, it is crucial that we have enough information about the data itself. This is metadata, i.e.¬†data that describes other data. Metadata is crucial for finding, sharing, evaluating, and reusing datasets. Metadata can be generated automatically and stored within the data file. For example, unless this metadata was explicitly deleted or amended, Word files typically contain data describing who created the file, when it was first created, and when the file was last modified. For some data and projects, it also makes sense to create separate metadata files that contain additional or more detailed metadata.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "Data.html#sec-FileExtensions",
    "href": "Data.html#sec-FileExtensions",
    "title": "2¬† Data",
    "section": "2.3 Data formats and file extensions",
    "text": "2.3 Data formats and file extensions\nDifferent data types come in different data formats. For audio files, you may be familiar with the MP3 format, but this by no means the only format in which audio files can be saved. Many other audio file formats exist, such as Waveform Audio File Format (WAVE) and Free Lossless Audio Codec (FLAC).\nWe can usually tell in what format a file is in by looking at its file extension. The file extension is the suffix of the file name. It comes at the end of the file name and is preceded by a dot. The file extension of a WAVE file is .wav, whereas that of an MP3 file is .mp3; hence the file recording.wav is a WAVE file, whereas recording.mp3 is an MP3 file.\n\nQuiz time!\n2) In which format are Microsoft Word files typically saved?\n\n\n.odt\n\n\n.docx\n\n\n.docs\n\n\n.msword\n\n\n\n\n\n¬†\n3) Which of these files are audio files?\n\n\ndialog_01.csv\n\n\n001_dialog.flac\n\n\ndialogue001.mp3\n\n\nDIALOGUE.audio\n\n\ndialogue001.wav\n\n\n\n\n\n\nUnfortunately, many ‚Äúmodern‚Äù operating systems have a tendency to hide file extensions by default; in which case the files recording.wav and recording.mp3 would both be displayed as recording (compare Figure¬†2.2 (a) and Figure¬†2.2 (b)). This is misleading and can lead to all kinds of problems.\n\n\n\n\n\n\n\n\n\n\n\n(a) Displaying file names without file extensions\n\n\n\n\n\n\n\n\n\n\n\n(b) Displaying file names with their extensions\n\n\n\n\n\n\n\nFigure¬†2.2: Demonstrating the importance of seeing file extensions.\n\n\n\nTo ensure that you can always see the extensions of the files on your computer in the File Explorer (on Windows) or the File Finder (on macOS), follow these instructions:\n\nOn Windows: https://www.howtogeek.com/205086/beginner-how-to-make-windows-show-file-extensions/.\nOn macOS: https://support.apple.com/en-gb/guide/mac-help/mchlp2304/mac (select the version of your operating system at the top of the page).",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "Data.html#sec-Sharing",
    "href": "Data.html#sec-Sharing",
    "title": "2¬† Data",
    "section": "2.4 Sharing research data and materials",
    "text": "2.4 Sharing research data and materials\nIn line with the principles of Open Science (see Chapter 1), it is important to ensure that both the materials that were used to collect research data (e.g., questionnaire items, audio, image or video stimuli, language aptitude tests, etc.) and the data themselves are made openly available to the research community, whenever legally possible and ethically responsible. Sharing materials ensures that studies can be replicated with new participants. Sharing research data also allows independent researchers to verify published results and to conduct additional analyses that may confirm, contradict, or extend the conclusions of the original studies. Table¬†2.1 provides a non-exhaustive list of public repositories of research data and materials (number of entries as of early June 20241). If you completed the first task in Section 2.2, you are already familiar with at least one of these! üòâ\n\n\n\n\nTable¬†2.1: Non-exhaustive list of public repositories of research data and materials.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRepository\nDiscipline\nNb. of entries\nProvides DOI\nOnline since\n\n\n\n\nDryad\nAll\n60000\nYes\n2008\n\n\nFigshare\nAll\n8000000\nYes\n2012\n\n\nHAL\nAll\n5000000\nNo\n2001\n\n\nHarvard Dataverse\nAll\n160000\nYes\n2006\n\n\nIRIS\nLinguistics\n3500\nNo\n2011\n\n\nOpen Science Repository, OSF\nAll\n153663\nYes\n2012\n\n\nTroms√∏ Repository of Language and Linguistics, TROLLing\nLinguistics\n4500\nYes\n2014\n\n\nVivil\nClinical research\n7000\nYes\n2013\n\n\nZenodo\nAll\n3750000\nYes\n2013\n\n\n\n\n\n\n\n\n\nIn the following tasks, we will look at a study by Schimke et al. (2018) (see Figure¬†2.3 (a)), which is an example of a publication which was awarded the Open Data and the Open Materials badges (see Figure¬†2.3 (b)). This means that the research materials and data associated with this study can be found in an open, online repository. The authors could have chosen to upload their materials and data to any of the online repositories listed in Table¬†2.1 but, in this case, they chose IRIS.\n\n\n\n\n\n\n\n\n\n\n\n(a) Title page of the Schimke et al. (2018)\n\n\n\n\n\n\n\n\n\n\n\n(b) The Open Data and Open Materials badges\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) The paper‚Äôs data and materials availability statement\n\n\n\n\n\n\n\nFigure¬†2.3: An example of a publication for which both research materials and data have been published.\n\n\n\nAmong other results, Schimke et al. (2018) report on two eye-tracking experiments. One of these experiments involved Spanish-speaking participants listening to ambiguous sentences in Spanish whilst looking at images of Playmobil figures (see Figure¬†2.4 for an example).\n\n\n\n\n\n\nFigure¬†2.4: Image from Experiment 1 in Schimke et al. (2018)\n\n\n\n\n\n\n\n\n\nHow did the experiment work?\n\n\n\nIn this eye-tracking experiment, participants were instructed to decide whether the sentences they heard matched the Playmobil images or not. Consider the following two sentences from the experiment:\n\n\nEl barrendero se encontr√≥ con el cartero antes de que recogiera las cartas.\n[The street sweeper met the postman before he fetched the letters.]\nEl barrendero se encontr√≥ con el cartero antes de que recogiera la escoba.\n[The street sweeper met the postman before he fetched the broom.]\n\n\nUp until the point at which either las cartas [the letters] or la escoba [the broom] are heard, it is unclear who ‚Äúhe‚Äù is.\nParticipants were presented with Figure¬†2.4 as they were listening to either Sentence 1 or Sentence 2. At the same time, the researchers measured how long it took for the participants to look at the person referred to by the ambiguous pronoun ‚Äúhe‚Äù. In other words, for Sentence 1, they were interested in how long it took participants to focus on the postman Playmobil figure and, in Sentence 2, on the street sweeper. These measurements were made using an eye-tracking device.\n\n\n\n\n\n\n\n\nTask 2\n\n\n\nImagine that you want to run an experiment similar to the one carried out in Schimke et al. (2018). To do so, you would like to reuse the Playmobil image files that the researchers created. These can be found in the IRIS database. In which file format do you think the images are archived?\nTo find out, click here to go directly to the list of data and materials associated with the study. Next, look for the ‚ÄúPictorial‚Äù entry which contains the images. It allows you to download a ZIP file called Images_online.zip. ZIP is an archive file format that can contain one or more compressed files. Download this ZIP file.\nOnce the download was successful, navigate to the folder where the file was saved on your computer and unzip the file, i.e., decompress it and extract its contents:\n\nTo unzip on Windows, double-click the file, select ‚ÄòExtract All‚Äô, select a folder, and then click ‚ÄòExtract‚Äô.\nOn a Mac, simply double-click the file to unzip it.\nIf you are using the Linux command line, use the command unzip followed by the name of the file to unzip it. You should find that the ZIP file contains a folder entitled ‚ÄòImages‚Äô, which contains 58 pictures of combinations of Playmobil figures that correspond to the experiment‚Äôs stimulus sentences.\n\n1a) In which file format are these Playmobil image files?\n\n\nBMP\n\n\nGIMP\n\n\nJPEG\n\n\nPNG\n\n\nGIF\n\n\n\n\n\n¬†\nImage files typically contain metadata that is embedded in the image files themselves. This metadata may include the dimensions of the image and its colour profile. To view this metadata, right-click on one of the image files that you have extracted from the ZIP file and select the option to get more information about the file, e.g., ‚ÄúGet Info‚Äù or ‚ÄúProperties‚Äù.\n1b) How wide are these Playmobil images in pixel?",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "Data.html#working-with-tabular-data",
    "href": "Data.html#working-with-tabular-data",
    "title": "2¬† Data",
    "section": "2.5 Working with tabular data",
    "text": "2.5 Working with tabular data\nThe measurements made by the eye-tracking device in Schimke et al. (2018)‚Äôs eye-tracking experiments were stored in the form of tables. Table¬†2.2 is an extract of a table that contains processed eye-tracking data from Schimke et al. (2018). It forms part of the study‚Äôs supplementary materials and can be downloaded from the IRIS database.\nIn this table, each row corresponds to the data associated with one participants‚Äô eye movements while listening to a single stimulus sentence and looking at the corresponding Playmobil image (e.g., Figure¬†2.4). This extract only displays the data associated with the first six stimulus sentences (items) that participant ‚Äús1‚Äù, a Spanish L2 learner, listened to. The columns crit1, crit2 and crit3 contain values derived from the measurements made using the eye-tracking device.2 From Table¬†2.2, we can also see that participant ‚Äús1‚Äù was 19 years old when they started formally learning Spanish (AoO stands of ‚Äúage of onset of formal instruction‚Äù) and that they were 20 when the experiment was conducted.\n\n\n\n\nTable¬†2.2: Extract of table containing eye-tracking data from Schimke et al.¬†(2018)'s appendix\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlanguage\nsubject\ndisambiguation\nitem\ncrit1\ncrit2\ncrit3\nAoO\nage\n\n\n\n\nS\ns1\n1\n1\n0.3451355\n-0.5618789\n0.7036070\n19\n20\n\n\nS\ns1\n2\n2\n-0.2679332\n-1.5849625\n0.1852149\n19\n20\n\n\nS\ns1\n1\n3\n-1.1563420\n0.9898042\n-1.5849625\n19\n20\n\n\nS\ns1\n2\n4\n-1.5849625\n-0.0874628\n-1.5849625\n19\n20\n\n\nS\ns1\n1\n5\n1.5849625\n0.1831223\n1.5849625\n19\n20\n\n\nS\ns1\n2\n6\n-0.7824086\n-0.8548021\n-1.1758498\n19\n20\n\n\n\n\n\n\n\n\n\nWhen working with data, tables are ubiquitous. Data stored in tables are called tabular data. Hence, learning to work with tabular data is a crucial data literacy skill. In the language sciences, the results of most studies (whether experimental or corpus studies) are stored in tables.\nFor example, when researchers conduct an online survey, the data collected by the online survey platform (e.g., Qualtrics, SoSci, SurveyMonkey) is automatically stored in the form of one or more table(s). These can then be exported from the survey platform in various tabular file formats (e.g., .csv, .json, .xlsx).\nIn some cases, data may be collected by analogue means, e.g., by getting participants to answer a paper questionnaire or collecting school children‚Äôs work on paper. However, for quantitative analysis, analogue research data are first digitalised. Then, the data are typically stored as text files in file formats such as .txt or .csv.\n\n2.5.1 Delimiter-separated values (DSV) files\nTables can be stored in many data formats but the simplest and most widely used in linguistic research are text files with delimiter-separated values (DSV). For sharing and archiving research data, DSV files are favoured over formats specific to propriety software such as .xslx (Microsoft Excel files) or .numbers (Apple Numbers files). This is because DSV files can be ‚Äúunderstood‚Äù by many different programs and on all operating systems. The fact that they are simple text files means that we will also be able to reliably read them in the future, even if programs such as Excel or Numbers have evolved or have been discontinued. Reliability and compatibility are fundamental to maintaining the integrity of research data and ensuring that data can be reused, even in the distant future.\nIn DSV files, each value (e.g., measurement or response) is separated by a specific separator character. In principle, any character can be used to separate values, but the most common separators are the comma (,), tab (\\t), and colon (:). Below is the .csv file corresponding to Table¬†2.2.\nRepository,Discipline,Nb. of entries,Provides DOI,Online since\nDryad,All,60000,Yes,2008\nFigshare,All,8000000,Yes,2012\nHAL,All,5000000,No,2001\nHarvard Dataverse,All,160000,Yes,2006\nIRIS,Linguistics,3500,No,2011\n\"Open Science Repository, OSF\",All,153663,Yes,2012\n\"Troms√∏ Repository of Language and Linguistics,TROLLing\",Linguistics,4500,Yes,2014\nVivil,Clinical research,7000,Yes,2013\nZenodo,All,3750000,Yes,2013\nAs you can see, the values are separated by commas.3 Additionally, some of the values are enclosed in, or delimited by, double quotation marks (\"). This prevents any commas that may occur within an actual field value, e.g., the comma in the field Open Science Repository, OSF, from being interpreted as a separator character.\nGiven that DSV files are text files, it is possible to open them in a plain-text editor (e.g., Notepad++ or BBEdit) or a text-processing program (e.g., Microsoft Word or LibreOffice Writer). However, these programmes will typically display DSV files as in Figure¬†2.5.\n\n\n\n\n\n\nFigure¬†2.5: The .csv file corresponding to Table¬†2.2 opened in Word\n\n\n\nWe can probably agree that what we are seeing in Figure¬†2.5 is not a very reader-friendly way to display tabular data! This is why DSV files are more often opened in spreadsheet programs (e.g., LibreOffice Calc, Google Sheets, Microsoft Excel, Numbers) than in text-editing programs. Let‚Äôs find out how in the next section.\n\n\n2.5.2 Opening DSV files in LibreOffice Calc\nThere are several ways to open a DSV file in LibreOffice Calc but the safest is to launch LibreOffice (see Task 1 in Section 1.1 if you have not yet installed LibreOffice) and, from the list of options under ‚ÄòCreate‚Äô, click on ‚ÄòCalc Spreadsheet‚Äô to open up a blank spreadsheet. Then, from the ‚ÄòFile‚Äô drop-down menu, select ‚ÄòOpen‚Ä¶‚Äô or use the keyboard shortcut Ctrl/Cmd + O and locate the DSV file that you wish to open.\nOn opening a DSV file in LibreOffice Calc, we get a dialogue box with various options (see Figure¬†2.6).\n\n\n\n\n\n\nFigure¬†2.6: Text import dialogue in LibreOfficeCalc\n\n\n\nTo correctly import this particular DSV file, it is necessary to specify that the separator character is the comma (,) and that the delimiter character is the double quotation mark (\") (see selected options in Figure¬†2.6). With these settings in LibreOffice Calc, the table is rendered as in Figure¬†2.7.\n\n\n\n\n\n\nFigure¬†2.7: CSV file opened in LibreOffice Calc\n\n\n\n\n\n\n\n\n\nOpening a .csv or .tsv file in LibreOffice from a Finder/Explorer window\n\n\n\n\n\nAs a reminder: Do not simply double-click on a .csv and .tsv file and let the default program open it!\nTo avoid this happening accidentally double-clicking on a .csv and .tsv file and having the file corrupted, I recommend making either LibreOffice or a plain-text editor your default application to open up such files.\nOn MacOS, you can change the default application used to open files of any file extensions by right-clicking on a file name with this particular extension and than selecting ‚ÄòGet Info‚Äô. In the tab ‚ÄòOpen with:‚Äô, you can then select LibreOffice (provided you have installed it beforehand!) and finally click on ‚ÄòChange All‚Ä¶‚Äô. You will be asked to confirm your choice.\n\n\n\n\n\n\nFigure¬†2.8: Get Info of a MacOS file\n\n\n\n\n\n\nInfo dialogue with highlighted ‚ÄòOpen with‚Äô section\n\n\n\n\n\n\n\n\nFigure¬†2.9: Permanently change the app used to open all files of this particular type\n\n\n\nIf your operating system is Windows, you should look inside your Windows‚Äô settings for the option ‚ÄòDefault Apps‚Äô (see Figure¬†2.10).\n\n\n\n\n\n\nFigure¬†2.10: Default apps in Windows settings\n\n\n\nIn the next step, select ‚ÄòChoose default apps by file type‚Äô. Here, you can search for .csv as a file type, and choose which program you want to set as the default program for opening .csv files. If Excel is currently your default (as in Figure¬†2.11 (a)), you can click on Excel and choose a different program. LibreOffice is a sensible, open-source alternative (see Figure¬†2.11 (b)). A plain-text editor such as Notepad would also be fine (also listed on Figure¬†2.11 (b)).\n\n\n\n\n\n\n\n\n\n\n\n(a) Excel as the default programme for .csv files\n\n\n\n\n\n\n\n\n\n\n\n(b) Changing the default programme for .csv files\n\n\n\n\n\n\n\nFigure¬†2.11: Changing the default app for opening .csv files in Windows\n\n\n\nIf it is not possible to adjust the default app settings, either due to insufficient permissions or because you only have temporary access to this PC, do not to open .csv or .tsv files with the default program. Instead, right-click on the file name and, using the ‚ÄòOpen with‚Äô option, select the option to open the file with LibreOffice, if available, or else with a plain-text editor.\n\n\n\nNote that if you open a DSV file in Excel or Google Sheets, you will not be shown such a dialogue box. Instead, these programs assume that they can guess which separator and delimiter characters your file uses. Whilst this may, at first, sound convenient, this is not good news: you should be the one in control of how your data files are interpreted, not the program! In the next section, you will learn why opening DSV files such as .csv and .tsv files in Microsoft Excel, Google Sheets, or Numbers can be very dangerous. In some cases, these programs will ‚Äúcorrupt‚Äù, i.e.¬†permanently damage, your DSV files, which can lead to irreversible data loss!\nThe bad news is that, if you are using Windows or MacOS, it is very likely that either Excel or Numbers is your default app to open DSV files. This means that if you double click on a .csv and .tsv file in your Finder/Explorer window, the file will likely automatically open up in either Excel or Numbers. This is why it is important you do not double-click on such files to open them: Files only need to be opened once to be corrupted! If this happens to you with a file that you have downloaded from a repository, your best bet is to delete your local version of the file and download a fresh version so that you can start again from scratch.\n\n\n\n\n\n\nTask 3\n\n\n\nIn this task, we will practice opening a DSV file in LibreOffice Calc. Our example file is a real dataset from Schimke et al. (2018). We will begin by downloading it from the public repository IRIS.\nIn addition to the eye-tracking experiments, Schimke et al. (2018) conducted two further experiments in which participants completed a gap-filling task via an online survey platform. In the first of these experiments, the participants were native (L1) speakers of French, German, and Spanish. In the second, they were French- and Spanish-speaking learners (L2) of German.\nIn both experiments, the L1 and L2 participants were shown ambiguous sentences similar to the ones used in the eye-tracking experiment with the Playmobil images (?sec-eyetracking). After having read each stimulus, the participants were asked to complete a gap-fill task according to their understanding of the preceding ambiguous sentence. Participants were told ‚Äúthat there were no incorrect responses and that they should answer spontaneously‚Äù (Schimke et al. 2018: 755). Below is an example questionnaire item in the three languages examined:\n\n\n1. Der Brieftr√§ger ist dem Stra√üenfeger begegnet, bevor er schnell ein Sandwich geholt hat. ___________________ hat ein Sandwich geholt.\n2. Le facteur a rencontr√© le balayeur avant qu‚Äôil prenne rapidement un sandwich. ___________________ a pris un sandwich.\n3a. El cartero se reuni√≥ con el barrendero antes de que √©l recogiera velozmente un emparedado. ___________________ recogi√≥ un emparedado.\n3b. El cartero se reuni√≥ con el barrendero antes de que recogiera velozmente un emparedado. ___________________ recogi√≥ un emparedado.\n\n\nNote that, for Spanish, there were two types of stimuli: one with an overt pronoun (as in 3a. with √©l) and one without (as in 3b. with a null pronoun), as both variants are possible in Spanish. All three examples translate as:\n\n\nThe postman encountered the street sweeper before he quickly fetched a sandwich. ___________________ fetched a sandwich.\n\n\nTo complete the gap, participants could either select ‚ÄòThe postman‚Äô or ‚ÄòThe street sweeper‚Äô.\n\nGo back to the study‚Äôs page on IRIS and select the second entry entitled ‚ÄòOther questionnaire‚Äô which, among other things, contains ‚ÄòWritten production data‚Äô.\n\nNote that this database entry includes both research data and research materials: the file sentences_offline_task.xlsx contains the full list of questionnaire items, including both experimental and filler items, with which we could reconstruct the experiment to replicate it with a new set of participants. For now, however, we are not interested in obtaining materials to replicate the study, but rather in examining the study‚Äôs original data.\nThis IRIS entry also contains three data files. The last file (logoddslearnersfinal.txt) is the DSV file that was used to create Table¬†2.2 above. In this task, we are going to look at the questionnaire data corresponding to the gap-filling task experiment with German L2 learners.\n\nTo this end, download the file entitled offlinedataLearners.txt and save it on your computer (see Section 3.3).\nLaunch LibreOffice (see Section 1.1 if you have not yet installed LibreOffice) and, from the list of options under ‚ÄòCreate‚Äô, click on ‚ÄòCalc Spreadsheet‚Äô to open up a blank spreadsheet.\nFrom the ‚ÄòFile‚Äô drop-down menu, select ‚ÄòOpen‚Ä¶‚Äô or use the keyboard shortcut ‚ÄòCtrl/Cmd + O‚Äô. Find offlinedataLearners.txt in the folder where you saved it and click on ‚ÄòOpen‚Äô.\nA ‚ÄòText Import‚Äô dialogue box will pop up. This a DSV file, not a fixed-width file, so ensure that the option ‚ÄòSeparated by‚Äô is selected. If not already set by default, it is also a good idea to select ‚ÄòUnicode (UTF-8)‚Äô for the ‚ÄòCharacter set‚Äô.\nExperiment with the different ‚ÄòSeparator Options‚Äô until the preview at the bottom of the dialogue box looks like a table.\nEnsure that, apart from the ‚ÄòSeparator Options‚Äô, all other options in the dialogue box are unselected and then click on ‚ÄòOK‚Äô.\n\n\nQuiz time!\na) What is the separator character in the file offlinedataLearners.txt?\n\n\nTab\n\n\nComma\n\n\nSemicolon\n\n\nSpace\n\n\nAll of them\n\n\n\n\n\n¬†\nb) What is the delimiter character in the file offlinedataLearners.txt?\n\n\n'\n\n\nThere is none.\n\n\n\"\n\n\nBoth \" and '\n\n\n\n\n\n¬†\nc) How many observations does the file offlinedataLearners.txt contain?\n\n\n701\n\n\n3505\n\n\n5\n\n\n3500\n\n\n700\n\n\n\n\n\n¬†\nd) In this table, what does each observation correspond to?\n\n\nA participant's response to a single sentence gap.\n\n\nAll the responses from a single participant.\n\n\nAll the responses to a single sentence in a single language.\n\n\nAll the responses in a single language.\n\n\n\n\n\n\n¬†\n\n\n\n\n\n\n\n\nWhat if I absolutely have to open a DSV file in Excel? üòß\n\n\n\n\n\nIf you absolutely must open a DSV file (e.g., a .csv or .tsv file) in Excel (for example because you do not have sufficient permissions to install LibreOffice on the computer that you are using), do not open the file by double clicking on the file as this will automatically trigger Excel‚Äôs problematic auto-formatting behaviour! Instead, first launch Excel and create a new blank workbook. Then navigate to the ‚ÄòData‚Äô tab, select the ‚ÄòGet Data‚Äô option, and then ‚ÄòFrom Text/CSV‚Äô (see Figure¬†2.12). In the following dialogue, you can specify how the data should be imported. The options are very similar to the ones offered in LibreOffice (see above).\nNote that with this method it may be possible to prevent Excel from automatically (and irreversibly!) applying transformations to your data. However, sadly, this may not suffice. Read on to find out more‚Ä¶\n\n\n\n\n\n\nFigure¬†2.12: Import data into excel",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "Data.html#a-word-of-warning-about-spreadsheet-programs",
    "href": "Data.html#a-word-of-warning-about-spreadsheet-programs",
    "title": "2¬† Data",
    "section": "2.6 A word of warning about spreadsheet programs ‚ö†Ô∏è",
    "text": "2.6 A word of warning about spreadsheet programs ‚ö†Ô∏è\nYou should be aware that opening DSV files in spreadsheet programs can corrupt the files! Once a file is corrupted, it is often not possible to retrieve the original data so this is very bad news, indeed. Such problems are particularly frequent when opening DSV files with Microsoft Excel and Google Sheets. This is because the default settings in these programs surreptitiously modify files upon opening. These ‚Äúauto-format‚Äù modifications include replacing certain values by dates (e.g., changing 3-4 to March, 4th) or numbers (e.g., changing 1.23E5 to 123000)4, removing leading zeros (e.g., changing 001 to 1), or misinterpreting special characters (e.g., the value -ism will generate an error if the hyphen is interpreted as minus sign). Not only can these auto-format modifications lead to inaccurate data analysis, in the worst of cases, they can cause data loss. The problem is that, often, users do not realise what the program has done in the background. How bad can this be? Find out by completing the task below.\n\n\n\n\n\n\nTask 4\n\n\n\nIn the field of genetics, researchers who use spreadsheets for their analyses regularly have their data so badly damaged that it affects the results of their publications. A report about this went viral in 2016, when Ziemann, Eren & El-Osta (2016) published a study in which they reported that a fifth of genetics publications with supplementary .xls or .xlsx files with gene lists contained errors caused by Excel‚Äôs auto-formatting behaviour.\nClick on the link below to read the open-access article ‚ÄúGene name errors: Lessons not learnt‚Äù by Abeysooriya et al. (2021) to find out whether the situation has improved since and answer the questions below:\n\nAbeysooriya, Mandhri, Megan Soria, Mary Sravya Kasu & Mark Ziemann. 2021. Gene name errors: Lessons not learned. PLOS Computational Biology. Public Library of Science 17(7). e1008984. https://doi.org/10.1371/journal.pcbi.1008984.\n\na) Has the proportion of genetics publications with Excel gene lists affected by these auto-formatting errors decreased since 2016?\n\n\nNo, it increased between 2016 and 2020.\n\n\nYes, it decreased between 2016 and 2020.\n\n\nNo, it has remained stable.\n\n\n\n\n\n¬†\nb) Does using LibreOffice Calc also cause these same issues?\n\n\nWhilst LibreOffice is better than Excel or Google Sheets, it is still less than ideal for data analysis.\n\n\nNo, LibreOffice does not lead to such errors.\n\n\nYes, LibreOffice is just as likely to cause such errors.\n\n\nNo, if you cannot afford Excel, than LibreOffice Calc is a good open-source alternative.\n\n\n\n\n\n¬†\nc) Did highly reputable journals publish fewer articles with erroneous Excel gene lists?\n\n\nNo, they published more.\n\n\nYes, they published fewer.\n\n\nNo, publications with problematic Excel files were found in more or less equal proportions in all journals.\n\n\n\n\n\n\n\nIt is worth noting that, for some Windows users, these auto-formatting issues can corrupt files that they have never actively opened in Excel! ü§Ø This happens when Windows applies Excel‚Äôs default settings to all CSV files, regardless of what program they are actually opened with. To ensure that this does not happen to you, check that Excel is definitely not your default app to open .csv and .tsv files (see ?sec-DefaultApp for instructions).\n\n\n\n\nAbeysooriya, Mandhri, Megan Soria, Mary Sravya Kasu & Mark Ziemann. 2021. Gene name errors: Lessons not learned. PLOS Computational Biology. Public 17(7). e1008984. https://doi.org/10.1371/journal.pcbi.1008984.\n\n\nSchimke, Sarah, Israel de la Fuente, Barbara Hemforth & Saveria Colonna. 2018. First language influence on second language offline and online ambiguous pronoun resolution. Language Learning 68(3). 744‚Äì779. https://doi.org/10.1111/lang.12293.\n\n\nZiemann, Mark, Yotam Eren & Assam El-Osta. 2016. Gene name errors are widespread in the scientific literature. Genome Biology 17(1). 177. https://doi.org/10.1186/s13059-016-1044-7.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "Data.html#footnotes",
    "href": "Data.html#footnotes",
    "title": "2¬† Data",
    "section": "",
    "text": "Note that, for some repositories, the number of entries includes other types of research outputs, e.g., preprints and figures.‚Ü©Ô∏é\nDetails of what these values mean are not relevant here but, for those of you who are curious, they correspond to the ‚Äúlog odds of looks‚Äù that participant made towards one or the other Playmobil figure whilst listening to the experimental stimulus sentences at three time points, called ‚Äúcritical regions‚Äù. These critical regions include the time window between the onset of the pronoun and 480 milliseconds after the onset of the disambiguating information. Schimke et al. (2018): 768-769 explain that ‚Äú[a] positive value of the log odds indicates more looks to the subject than to the object antecedent, while a negative value indicates the reverse pattern.‚Äù‚Ü©Ô∏é\nNote that the file extension .csv stands for ‚Äúcomma-separated values‚Äù. Confusingly, however, DSV files are often given a .csv extension even when the separator character is not the comma. As a result, even though the .tsv extension stands for ‚Äútab-separated values‚Äù, .csv files are frequently separated by a tab (\\t) rather than comma. Isn‚Äôt that fun? üôÉ‚Ü©Ô∏é\nIn scientific notation, ‚ÄúE‚Äù stands for ‚Äúexponent‚Äù, which refers to the number of times a number needs to be multiplied by 10. This notation is used as a shorthand way of writing very large or very small numbers. This is why ‚Äú1.23E5‚Äù is interpreted by Excel as 1.23 multiplied by 10 to the power of 5, which is to say: 1.23 multiplied by 100,000. This operation shifts the decimal point five places to the right, resulting in the number 123000.‚Ü©Ô∏é",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "DataManagement.html",
    "href": "DataManagement.html",
    "title": "3¬† Data management",
    "section": "",
    "text": "Chapter overview\nEven if you are confident that you have no trouble managing your computer files, it is still worth taking a few minutes to read up on the basics of data management. This is especially true if you consider yourself a ‚Äúdigital native‚Äù as modern operating systems have made the way that computers deal with files very opaque. In this chapter, you will learn about:",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Data management</span>"
    ]
  },
  {
    "objectID": "DataManagement.html#masterchef-meets-masters-thesis-recipes-for-successful-data-management",
    "href": "DataManagement.html#masterchef-meets-masters-thesis-recipes-for-successful-data-management",
    "title": "3¬† Data management",
    "section": "3.1 MasterChef meets Master‚Äôs Thesis: Recipes for successful data management",
    "text": "3.1 MasterChef meets Master‚Äôs Thesis: Recipes for successful data management\nData management is hardly a ‚Äúhot‚Äù topic that people like to dwell on. That‚Äôs a shame because good file management is absolutely central to be able to conduct research and poor file management has the potential to seriously ‚Äòspice things up‚Äô‚Ä¶ but not in a good way! üå∂Ô∏è Whether you are working on a short course assignment, your Master‚Äôs or PhD thesis, or as part of a large research project team: research-related files must be named appropriately and safely stored in meaningful places.\nImagine trying to make a curry in an utterly disorganised kitchen that contains dozens of different spices, scattered across different cabinets and drawers, with vague or misleading labels. For example, you might have three jars labelled ‚ÄúChilli‚Äù and no way of knowing which is mild ‚ÄúKashmiri Chilli‚Äù as opposed to the extra hot ‚ÄúThai Bird‚Äôs Eye Chilli‚Äù. The third might not be chilli at all, but actually a jar of paprika that has been entirely mislabelled. Some of these spices have been gathering dust for decades but the labels have no best-before dates so there is no way of knowing which are still fragrant. Cooking in such a kitchen would turn even the simplest cooking task into a tedious, time-consuming, and error-prone chore: If you‚Äôre not extremely careful, you could easily end up serving something that is bland or, in the worst of cases, entirely inedible! Similarly, in research, if your files are poorly named or stored haphazardly, it will make your work far less efficient, considerably more error-prone, and ultimately utterly frustrating.\nBut the good news is: just as a tidy, well-organized kitchen can greatly enhance your cooking experience, good file management can streamline your research process, help you avoid making mistakes, and reduce stress. In the following sections, we will cook up some good practices for file naming, data management, and project organisation. We will start with basic recipes for naming and managing your files. See the ‚ÄòGoing further‚Äô boxes for tips on learning the ‚Äògourmet skills‚Äô needed to handle more complex projects. So, let‚Äôs don the chef‚Äôs hat and learn how to create a user-friendly computer workspace. And remember, as with cooking, practice makes perfect! üßëüèΩ‚Äçüç≥",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Data management</span>"
    ]
  },
  {
    "objectID": "DataManagement.html#sec-FileNaming",
    "href": "DataManagement.html#sec-FileNaming",
    "title": "3¬† Data management",
    "section": "3.2 Naming conventions",
    "text": "3.2 Naming conventions\nFile names are labels. They tell us what is inside a file and helps us identify the correct file quickly and reliably. If you had to run to the printing shop to get your thesis printed in time for a tight deadline, which of these sets of files would you rather have to choose from? Which is more likely to lead you to getting the wrong version printed?\n\n\n\n\n\n\n\n\n\n\n\n(a) ¬†\n\n\n\n\n\n\n\n\n\n\n\n(b) ¬†\n\n\n\n\n\n\n\nFigure¬†3.1: Two sets of file names, one clearly better than the other.\n\n\n\nLike the labels on your neatly organised spice jars, file and folder names should be clear, concise, and easily readable. Good file and folder names should be both human-friendly and computer-friendly.\nBy human-friendly we mean that you and any other human being should easily be able to understand what a folder or file contains. Just like you wouldn‚Äôt want a label on a spice jar to be a random string of numbers (e.g., 0171) or only include the best-before date but nothing else (e.g., 31 Jan 2028), you also wouldn‚Äôt want to guess what a file contains based on an ambiguous or unclear name like Chili. Labels should be informative but succinct (e.g., Thai Bird's Eye Chilli 31 Jan 2028 not Thai Bird's Eye Chilli bought on December 19, 2023 whilst Christmas shopping with mum, note that the best before date is 31 January 2028)! Unless you and all your colleagues read Thai, do not be tempted to write the part of the file name in Thai as this could also lead to misunderstandings.\nAnother reason for not including Thai characters in your file name is that it would not be computer-friendly. In general, computers are not good at dealing with names that contain anything else but Latin alphanumeric characters, e.g., the letters A to Z with no accents and the numbers 0 to 9. Hyphens (-) and underscores (_) can also be used but not spaces. The dot (.) is reserved for the file extension and should not be used elsewhere in the file name.\nHence, whilst Thai Bird's Eye Chilli 31 Jan 2028 is human-friendly, it is not computer-friendly. To make it a computer-friendly label, we would need to remove all spaces as well as the apostrophe. The spaces can be replaced by hyphens (-) and underscores (_) and the two can be combined meaningfully. For example, in the label Thai-Birds-Eye-Chilli_31-Jan-2028, the _ distinguishes between two different pieces of information, whilst the - helps humans to parse individual words within a piece of information. Using such patterns consistently not only helps humans to read file names efficiently, it also means that computers can easily ‚Äòparse‚Äô, i.e., break down such names into meaningful items. This can be very useful to search for files or automatically extract metadata from file names.\n\n\n\nTo help us remember the different, systematic ways to use letter case, hyphens, and underscores in naming conventions, these patterns have fun names (art work by @allison_horst).\n\n\nIt is fine to use both lower-case and upper-case letters in file and folder names. However, it is worth noting that some operating systems will treat upper-case and lower-case letters as the same, whilst others will not. This means that you should avoid having file names that are only distinguishable by case.\n\n\n\n\n\n\nQuiz time!\n\n\n\n1) In which case is this file name? my_first_file_name.R\n\n\ncamelCase\n\n\nUpperCamel\n\n\nUPPER_SNAKE\n\n\nlower_snake\n\n\nkebab-case\n\n\n\n\n\n¬†\n2) Why is this file name problematic? MyDocument final.1a.docx\n\n\nUse of special character other than _ or -\n\n\nMixed capitalisation\n\n\nSpaces in file name\n\n\nLack of clarity\n\n\n\n\n\n¬†\n3) Which of these file names are both human-friendly and computer-friendly?\n\n\nMANUSCRIPT_CORRECTIONS.docx\n\n\n05.01.24_Draft.docx\n\n\nMC1.png\n\n\n2024-01-05_TermPaper.docx\n\n\nAnalysis_24April.R\n\n\n\n\n\n\n\nIt is also important to ensure that file names are easily sortable. If you have a series of files that document a process, consider beginning each file name with a number that correspond to the order of the process, e.g., 01_DataPreparation.R, 02_DataAnnotation.R, 03_AnnotationEvaluation.R. Left-padding the numbers with one or more 0 will mean that the files are sorted numerically, even when files are listed alphabetically (see Figure¬†3.2 (b)).\n\n\n\n\n\n\n\n\n\n\n\n(a) File names without additional zeros numbers\n\n\n\n\n\n\n\n\n\n\n\n(b) File names with left-padded numbers\n\n\n\n\n\n\n\nFigure¬†3.2: Why left-padding file names is good file naming practice.\n\n\n\nIt is often a good idea to include the date in file names. However, many date formats are not easily sortable (see Figure¬†3.3 (a)). This is why dates are formatted using the ‚ÄòYYYY-MM-DD‚Äô format. Formatting dates in this way will allow you to easily sort your files in chronological order (see Figure¬†3.3 (b)).\n\n\n\n\n\n\n\n\n\n\n\n(a) File names with a non-ordered date format\n\n\n\n\n\n\n\n\n\n\n\n(b) File names with an ordered date format\n\n\n\n\n\n\n\nFigure¬†3.3: Why using the YYYY-MM-DD is good file naming practice.\n\n\n\nEven though computers have gotten much better at dealing with folder and file names containing spaces and special characters, using anything other than basic Latin alphanumeric characters, - and _ in file and folder names will - sooner or later - cause you or your colleagues some serious issues. This is especially true when you start coding. Do not delay getting used to using systematic, human- and computer-friendly folder and file names! These simple guidelines will make your digital life much smoother and save you much time and stress in the long run.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Data management</span>"
    ]
  },
  {
    "objectID": "DataManagement.html#sec-FoldersPaths",
    "href": "DataManagement.html#sec-FoldersPaths",
    "title": "3¬† Data management",
    "section": "3.3 Folders and paths",
    "text": "3.3 Folders and paths\nNow that you know how to name your files and folders sensibly, we can turn to best practices for organising these files and folders. Returning to our kitchen analogy, imagine that, over many years, you collected hundreds of recipes from friends and family. These recipes are jotted down on individual sheets of paper, all of which have been thoughtlessly tossed into a large kitchen drawer called ‚ÄòDocuments‚Äô, which also happens to contain receipts for kitchen appliances still under warranty, takeaway brochures, and various other bits of paper. In such a kitchen, finding Aunt Sophie‚Äôs famous caramelised apple cake could take a while! If, however, you had a dedicated kitchen drawer for recipes which contained neatly labelled folders different types of dishes, you would know to look for this cake recipe in the Desserts folder. Within the Desserts folder, you could have sub-folders for different types of desserts (e.g., cakes, ice creams, trifles). This would make finding Aunt Sophie‚Äôs recipe an absolute piece of cake!\nThinking about how to structure folders and sub-folders for your projects is about creating a kind of road map that should be readily interpretable by both humans and computers. This is where the concept of ‚Äòpaths‚Äô arises. Paths, in simple terms, describe the location of a file or a folder in a computer‚Äôs filesystem. There are different types of paths. An absolute path provides a complete path from the computer‚Äôs ‚Äúroot folder‚Äù. If our house were our root folder, the absolute path to Aunt Sophie‚Äôs recipe would be \"/Kitchen/Recipes/Desserts/Cakes/Apple-Cake_Aunt-Sophie\". Hence, just like your home‚Äôs postal address, which ideally specifies your home‚Äôs absolute location worldwide, an absolute path provides a complete path from a computer‚Äôs root folder to the file or folder in question.\nBy contrast, a relative path represents the location of a file or folder relative to another folder. Hence, if we already have the Dessert folder open in front of us, the relative path to the apple cake recipe would simply be \"Cakes/Apple-Cake_Aunt-Sophie\". However, if we wanted to access a recipe in the Starters folder from the Cakes folder, we would first have to go ‚Äúback up the path‚Äù from the Cakes folder to the Recipes drawer. This is achieved by adding ../ to the front of the relative path, e.g., \"../Starters/Soups/Pea-Mint-Soup_Barbara\".\nFor example, \"/Users/lefoll/Documents/Teaching/RstatsTextbook/ToDo.txt\" is the absolute path from my computer‚Äôs root folder to my to-do list file in relation to this textbook project. By contrast, a ‚Äúrelative path‚Äù represents the location of a file or folder relative to another folder. Hence, if I am already in the directory \"/Users/lefoll/Documents/Teaching/RstatsTextbook/\", the relative path to my to-do list is only \"ToDo.txt\".\nTo complicate things a little, the way paths are written varies depending on the computer‚Äôs operating system. In Unix-based systems like Linux and macOS, paths are written using forward slashes (e.g., \"/Users/elen/Documents/Teaching/RstatsTextbook/ToDo.txt\"), whereas on Windows, paths are written using backslashes (e.g., \"C:\\Users\\elen\\Documents\\Teaching\\RstatsTextbook\\ToDo.txt\").\nThere are many ways to find out where your files are stored on your computer. Let us begin by opening a Finder window (on macOS) or a File Explorer window (on Windows). Navigate to the folder which contains the file for which you want to find the absolute path. Alternatively you could use your computer‚Äôs search function to search for the file. Once you have found it:\n\non Windows: Right-click on the file (in some older Windows versions, you may also need to press the ‚Äúshift‚Äù key). Among the options presented to you, click on the one to copy the file path (e.g., ‚ÄúCopy as path‚Äù or similar in the language of your operating system).\non macOS: Right-click on the file and then press the Option/‚å• key on your keyboard. Pressing down this key will change the options you are given after having right-clicked. One of these options should now be ‚ÄúCopy ‚Ä¶ as Pathname‚Äù (or something equivalent in the language of your operating system). Click on this option.\n\nThen, open any text-editing programme (e.g., LibreOffice Writer, Microsoft Word, TextEdit, or NotePad++) and use the shortcut Ctrl/Cmd + V to paste your file‚Äôs path in the empty document. If you are on Windows, your path should have backslashes, whereas if you are on Linux or macOS, your path should have forward slashes.\n\n\n\n\n\n\nQuiz time!\n\n\n\n\n\n\n\n\n\nFigure¬†3.4: Screenshot of a Finder window showing the hierarchical folder structure within the UzK folder (which stands for University of Cologne)\n\n\n\n4) What is the absolute path to the highlighted file in Figure¬†3.4?\n\n\nUzK/2024_SoSe_Stats/Rscripts/2_ErrorsAreFun.R\n\n\nUsers/lefoll/Documents/UzK/2024_SoSe_Stats/Rscripts/2_ErrorsAreFun.R\n\n\nUsers\\lefoll\\Documents\\UzK\\2024_SoSe_Stats\\Rscripts\\2_ErrorsAreFun.R\n\n\n../UzK/2024_SoSe_Stats/Rscripts/2_ErrorsAreFun.R\n\n\n\n\n\n¬†\n5) From the ‚ÄúUzK‚Äù folder, what is the relative path to the highlighted file in Figure¬†3.4?\n\n\n../UzK/2024_SoSe_Stats/Rscripts/2_ErrorsAreFun.R\n\n\nRscripts/2_ErrorsAreFun.R\n\n\n2024_SoSe_Stats/Rscripts/2_ErrorsAreFun.R\n\n\nUzK/2024_SoSe_Stats/Rscripts/2_ErrorsAreFun.R\n\n\n\n\n\n¬†\n6) From the ‚ÄúRscripts‚Äù folder, what is the relative path to the folder ‚Äú2023_SoSe_CADS‚Äù (see Figure¬†3.4)?\n\n\n../../2023_SoSe_CADS\n\n\n../../2023-SoSe-CADS\n\n\n../2023_SoSe_CADS\n\n\n../../../2023_SoSe_CADS\n\n\n\n\n\nHint: From the Rscript folder, you will need to go ‚Äúback up the path‚Äù twice: once to get to the course folder 2024_SoSe_Stats and a second time to get to the UzK folder, before you can move to the 2023_SoSe_CADS folder. Going back up the path is achieved with ../.\n\n\n\n\n\n\n\n\nTask\n\n\n\nRead the abstract of the following academic article. What was this experimental study about?\n\nTerai, Masato, Junko Yamashita & Kelly E. Pasich. 2021. Effects of Learning Direction in Retrieval Practice on EFL Vocabulary Learning. Studies in Second Language Acquisition 43(5). 1116‚Äì1137. https://doi.org/10.1017/S0272263121000346.\n\na) According to the study, which is the most effective way of learning vocabulary in a foreign language?\n\n\nBy first reading a word in one's native language, and then reading a translation in the target language.\n\n\nBy first reading a word in the target language, and then a translation in one's native language.\n\n\nIt's impossible to tell as all learners are individuals.\n\n\nBeginners learn better if they are first exposed to a word in their native language and then in the target language. The opposite is true for more advanced learners.\n\n\n\n\n\n¬†\nThe authors of this article have published the data and materials associated with this study on IRIS. You can find them here: https://iris-database.org/search/?s_publicationAPAInlineReference=Terai%20et%20al.%20(2021)\nb) In which format are the video files associated with this publication?\n\n\n.mp4\n\n\n.mxf\n\n\n.mov\n\n\n.avi\n\n\n\n\n\n¬†\nc) In which format is the analysis code which they shared on IRIS?\n\n\nR\n\n\nRmarkdown\n\n\nHTML\n\n\nPython\n\n\n\n\n\n¬†\nd) The associated materials also include a section entitled ‚ÄúScores on measures / tests‚Äù. Download the file dataset1_ssla_20210313.csv from this section. Which character is used as the separator in this delimiter-separated values (DSV) file?\n\n\nSpace\n\n\nComma\n\n\nColon\n\n\nSemicolon\n\n\nTab",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Data management</span>"
    ]
  },
  {
    "objectID": "DataManagement.html#backing-up-data-fire-safety-measures-in-the-digital-kitchen",
    "href": "DataManagement.html#backing-up-data-fire-safety-measures-in-the-digital-kitchen",
    "title": "3¬† Data management",
    "section": "3.4 Backing up data: ‚ÄòFire safety‚Äô measures in the digital kitchen üßØ",
    "text": "3.4 Backing up data: ‚ÄòFire safety‚Äô measures in the digital kitchen üßØ\nA basic principle of sound data management consists in keeping a copy of all your files in more than one place. This ensures that, should something go awry, your research is not lost forever but instead can be recovered and restored promptly. There are many ways things could go wrong: laptops can get stolen or permanently damaged (laptops are not terribly keen on hot chocolate as it turns out‚Ä¶ üôà), computer files can be corrupted and become unusable, you or someone else may accidentally delete files, your computer can become infested with a nasty virus, etc.\nAn effective way to protect your projects is to abide by the 3-2-1 rule (Schweinberger 2022). It‚Äôs simple:\n\nEnsure that you have at least three copies of your data (e.g., one that you work with on your personal computer and two back-up copies).\nSplit the backup copies between two different storage media (e.g., a hard-drive stored in your office and online in a secure cloud service).\nStore one of these copies in a secure place off-site (i.e., not where your computer usually is).\n\nOne solution is to store your three copies on:\n\nyour personal laptop or computer,\na backup hard drive stored in a secure location, and\na secure online repository such as the data management system provided by your institution, e.g., Sciebo, ownCloud, or GitLab.\n\nChoosing an online repository will protect your data if your computer malfunctions or is damaged or stolen, but remember that it can also potentially make your data accessible to others. This is particularly true of commercial back-up solutions such as Microsoft‚Äôs OneDrive, Google‚Äôs Drive, Apple‚Äôs iCloud, or Dropbox, which although convenient and very user-friendly, should not be used to store sensitive data (e.g., data that may be used to identify individuals, contain financial information, health records, location data, or proprietary research data). Always check if your institution has its own, secure cloud option. If not, keeping a second hard-drive copy in a separate, secure location is likely the safest solution.\nWhilst the 3-2-1 rule stipulates that you should keep at least three copies of each file, in an optimal scenario, each file should exist only once at each location (e.g., on your laptop, a separate hard-drive, and the server of an online repository). It is quite easy to (often unknowingly) end up with several duplicates of the same file on any one machine but this can cause issues if, for example, you end up updating the wrong version of the file. Avoiding and eliminating file duplicates is therefore an important step towards proficient data management.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Data management</span>"
    ]
  },
  {
    "objectID": "DataManagement.html#conclusion",
    "href": "DataManagement.html#conclusion",
    "title": "3¬† Data management",
    "section": "3.5 Conclusion",
    "text": "3.5 Conclusion\nSound data management - comprising of both good folder and file naming practices and the smart organisation of these folders and files - is the foundation for efficient research workflow. Understanding and applying these basic principles of file management will ensure that everything in your digital ‚Äòkitchen‚Äô has its place, is well labelled, and easy to find. By ensuring that we keep our kitchens clean, tidy, and safe, we can whip out some truly delicious dishes!\n\n\n\n\n\n\nFigure¬†3.5: Artwork by xkcd\n\n\n\nWhilst the above caption is true, if it helps, you might want to imagine that someone very judgemental could actually look in your Documents folder at any given time!\n\n\n\n\n\n\nGoing further\n\n\n\n\n\nThis short online module is ideal to learn more about smarter ways to work with files and data:\nThe University of Queensland Library. 2023. Work with Data and Files. The University of Queensland. https://uq.pressbooks.pub/digital-essentials-data-and-files/. (14 May, 2024).\nTo go further, here are some great in-depth resources to learn more about data management in linguistics and education research specifically:\n\nBerez-Kroeker, Andrea L., Bradley McDonnell, Eve Koller & Lauren B. Collister. 2022. The Open Handbook of Linguistic Data Management. MIT Press. https://doi.org/10.7551/mitpress/12200.001.0001.\nLewis, Crystal. Data Management in Large-Scale Education Research. https://datamgmtinedresearch.com/. (14 May, 2024).\n\nBoth of these are available as Open Educational Resources.\n\n\n\n\n\n\n\nSchweinberger, Martin. 2022. Data management, version control, and reproducibility. https://ladal.edu.au/repro.html.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Data management</span>"
    ]
  },
  {
    "objectID": "InstallingR.html",
    "href": "InstallingR.html",
    "title": "4¬† Installing R and RStudio",
    "section": "",
    "text": "Chapter overview\nThis chapter is designed to help you get started using R and RStudio, assuming no prior use of either. We will be covering the following topics:\nIf you already have some experience of using R and RStudio, please ensure that both are up-to-date. Whilst parts of this chapter will likely be revision, others may be the opportunity to learn some new tips about setting up and using R in RStudio, installing and citing packages. Once you‚Äôve skimmed through this chapter, feel free to swiftly move on to Chapter 5.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Installing `R` and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#why-learn-r",
    "href": "InstallingR.html#why-learn-r",
    "title": "4¬† Installing R and RStudio",
    "section": "4.1 Why learn R?",
    "text": "4.1 Why learn R?\nIn short, because R can do it all! üôÉ This statement is only a slight exaggeration: R is indeed a highly versatile programming language and environment that allows us to do a multitude of tasks relevant to the language sciences. These include data handling and processing, statistical analysis, creating effective and appealing data visualisations, web scraping, text analysis, generating reports in various formats, designing web pages, and interactive apps, and much, much more! üí™\nWhilst some will claim that R has a steep learning curve, this textbook aims to prove that the opposite is true! Whilst it‚Äôs fair to say that, as with all new things, it will take you a while to get the hang of it, once you‚Äôve got started, you will see that your possibilities are (pretty much) endless and that learning how to do new things in R makes for fun and very rewarding challenges. What‚Äôs more, this textbook introduces the {tidyverse} approach to programming in R, which is particularly accessible to beginners. We will also use RStudio to access R, which makes things considerably more intuitive and generally easier to work with.\nWhat‚Äôs more, both R and the RStudio Desktop version that we will be using are free and open source (see Section 1.1), which means that they are accessible to all, regardless of their institutional affiliation or professional status. This is in contrast to proprietary statistical software such as SPSS, for which you or your university needs to buy an expensive license. To get started in R, all you will need is access to the internet, a computer (unfortunately, a tablet will not suffice), and the intrinsic motivation to work your way through the basic skills taught in this textbook.\n\n‚Äú[U]sing R - it‚Äôs like the green and environment-friendly gardening alternative to buying plastic wrapped tomatoes in the supermarket that have no taste anyway.‚Äù (Martin Schweinberger 2022)\n\n\n\n\n\n\nFigure¬†4.1: ‚ÄúTomato Harvest, Yellow & Red‚Äù by OakleyOriginals is licensed under CC BY 2.0.\n\n\n\n\nLast but not least, in choosing to learn R, you are entering a vibrant community of users. As an open-source programming environment, R is the product of many different people‚Äôs contributions. Everyday, new packages, functions, and resources are being developed, improved, and shared with the community. Given that R has evolved into one of the most popular languages for scientific programming (and has become ‚Äúthe de facto standard in the language sciences‚Äù Winter 2019: xiii), many of these have been created by scientists and are particularly well-suited to research workflows. Moreover, the R community is known for being welcoming, supportive, and inclusive (sadly, the same cannot be said of all communities in the computing world). This is reflected in the strong presence of many community-led initiatives such as RLadies and RainbowR, which encourage under-represented groups to participate in and contribute to the R community. ü§ó\n\n\n\n\n\n\nFigure¬†4.2: Logo of the RLadies Ribeir√£o Preto meet-up group, one of many RLadies chapters.\n\n\n\n\n‚ÄúLook, I am studying languages so why should I learn to code?‚Äù ü§î\nUsing scripts rather than GUI software will help you make your research less error-prone, more transparent, and sustainable. Being open-source, there are no restrictions as to who can run R code and older versions are available ensuring that exact reproduction is possible, even years later. As many other language scientists use R, you will be able to collaborate with others and understand other researchers‚Äô R code. As we will see in a future chapter, in RStudio, it is also very easy to export R code and share your scripts, for example as part of an appendix to your research publication, in various formats (including .html that can be opened in any browser and .pdf).\nIn addition, learning to code in R is an excellent way to understand the basics of data literacy and statistical reasoning. These are skills that are highly valued among employers, both in academia and the industry. Many companies, public institutions (e.g., ministries, hospitals, national agencies) and NGOs hire data scientists who often work in R. And, even if you end up doing little to no coding yourself, understanding the basic principles of programming is undoubtedly a highly useful skill in the modern world.\n\n\n\n\n\n\nWhat about learning Python instead? üêç\n\n\n\n\n\nSome of you may be wondering whether you should be learning Python rather than R. Both are widely used languages in scientific programming and data science. At the time of writing, there are more resources specifically aimed at linguists and education researchers in R than there are in Python simply because it is currently the most widely used language in these disciplines. Should you wish to learn Python at a later stage, many of the same principles that you will have learned in this textbook will apply: it should feel somewhat like learning Italian when you already speak Spanish or French.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Installing `R` and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#installing-r-and-rstudio",
    "href": "InstallingR.html#installing-r-and-rstudio",
    "title": "4¬† Installing R and RStudio",
    "section": "4.2 Installing R and RStudio",
    "text": "4.2 Installing R and RStudio\n\n4.2.1 What are R and RStudio? And why do I need both?\nAs a beginner, it‚Äôs easy to confuse R and RStudio, but it‚Äôs important to understand that they are two very different things. R is a programming environment for statistical computing and graphics that uses the programming language R. Think of it as the engine with which we will learn to perform lots of different tasks. RStudio, by contrast, is a set of tools, a so-called ‚Äòintegrated development environment‚Äô (IDE). It makes working in R much more intuitive and efficient. If R is the engine of our car, you can imagine RStudio as our dashboard. Hence, even though we will later on appear to only be working in RStudio, R will actually be doing the heavy-lifting, under the hood.\n\n\n\n\n\n\n\n\n\n\n\n(a) Logo of the programming language and environment R\n\n\n\n\n\n\n\n\n\n\n\n(b) Logo of the IDE RStudio (RStudio¬Æ is a trademark of Posit Software, PBC)\n\n\n\n\n\n\n\nFigure¬†4.3: Even the two logos are easy to confuse, but remember that R and RStudio are two very different things!\n\n\n\n\n\n\n\n\n\nUsing other IDEs to work in R\n\n\n\n\n\nAt the time of writing, RStudio is the most widely used Integrated Development Environment (IDE) to work in R. However, it is worth noting that many other IDEs that can be used to access R. These include:\n\nJupyter notebook\nVisual Studio Code\nPyCharm\nEclipse\n\nWhilst this textbook will assume that everyone is working in RStudio, if you are already familiar with another IDE that works well with R, you are welcome to continue working in that IDE. Each IDE has a different feel to it and offers different functions so, ultimately, it‚Äôll be up to you to find the one that suits you best!\n\n\n\n\n\n4.2.2 Installing R\n\nGo to the website of the Comprehensive R Archive Network (CRAN): https://cran.r-project.org.\nClick on the ‚ÄúDownload R for ‚Ä¶‚Äù link that matches your operating system (Linux, macOS or Windows), then:\n\nFor Windows, click on the top ‚Äòbase‚Äô link, also marked as ‚Äúinstall R for the first time‚Äù (Note that you should also use this link if you are updating your R version). On the next page, click on the top ‚ÄúDownload R‚Äù link.\nFor MacOS, click on either the top .pkg link if you have an Apple silicon Mac (e.g., M1, M2, M3) or the second .pkg link, if you have an older Intel Mac.\nFor Linux, click on your Linux distribution and then follow the instructions on the following pages.\n\n\n\n\nOnce you have downloaded one of these R versions, navigate to the folder where you have saved it (by default, this will be your Downloads folder), and double click on the executable file to install R.\nFollow the on-screen instructions to install R.\nTest that R is correctly installed. On Windows and MacOS, navigate to your Applications folder and double click on the R icon. On Linux, open up R by typing R in your terminal. This should open up an R Console. You can type R commands into the Console after the command prompt &gt;. Type the following R code after the command prompt and then press enter: plot(1:10).\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Test command in the R Console\n\n\n\n\n\n\n\n\n\n\n\n(b) Resulting plot (note that the proportions of your plot may be different depending on the size of your window)\n\n\n\n\n\n\n\nFigure¬†4.4: Testing R\n\n\n\n‚úÖ If you see the plot above, you have successfully installed and tested R and you can go on to installing RStudio.\n‚ö†Ô∏è If that‚Äôs not the case, make a note of the errors produced (copy and paste them into a text document or take a screenshot) and search for solutions on the Internet. It is very likely that many other people have already encountered the same problem as you and that someone from the R community has posted a solution online.\n\n\n\n\n\n\nWhat to do if you cannot get R and/or RStudio working on your computer\n\n\n\n\n\nThe aim of this chapter is to install both R and R Studio on your own computer so that you can write and run your own scripts locally (i.e., on your own computer without the need for an internet connection). In some cases, however, this might not be possible. For example, because the programmes are not available for your operating system, or because you do not have admin rights on your computer, or because your disk is full and you cannot delete anything. None of these situations are ideal to do research, but don‚Äôt give up on learning R: there is an alternative!\nYou can sign up to Posit Cloud. Posit Cloud will allow you to run R in RStudio in a browser (e.g., Firefox or Chrome) without having to install anything on your computer. Although Posit Cloud‚Äôs free plan is limited, it will suffice to learn the contents of this textbook. You will be able to follow the textbook in exactly the same way as everyone else. However, you will need a stable internet connection and you may find that you need to be a bit more patient as things are likely to run a little slower. If you decide to opt for the Posit Cloud solution, create a free account and then go straight to Setting up RStudio.\n\n\n\n\n\n4.2.3 Installing RStudio\nWhen you head over to their website, it may be confusing to you that the company that provides RStudio, Posit, also offers paid-for versions of RStudio and other paying services. Do not worry, we will not need any of these: These are products designed for companies and large organisations. The version of RStudio Desktop that we will be using, however, is completely free and, given that it is open source, even if Posit decided to stop working on this product one day, others in the R community would take over. Such is the beauty of open-source software! ü§ó\n\nHead over to this page https://posit.co/download/rstudio-desktop/ to download the latest version of RStudio Desktop.\nAs you have already installed R, you can jump straight to the section entitled ‚Äú2: Install RStudio‚Äù. The website should have detected which operating system your computer is running on, so that you can most likely simply click on the ‚ÄúDownload RStudio Desktop‚Ä¶‚Äù button. Your download should start straight away.\n\nIf an incorrect operating system is detected, simply scroll down the page to find your operating system and download the corresponding version of RStudio.\n\n\n\n\nOnce you have downloaded RStudio, navigate to the folder where the downloaded file has been saved (by default, this will be your Downloads folder), and double click on the executable file to install RStudio.\nFollow the on-screen instructions to install RStudio.\n\nIf you run into any issues that you cannot solve with existing online posts, the Posit Community forums are a good place to ask for help.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Installing `R` and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#setting-up-rstudio",
    "href": "InstallingR.html#setting-up-rstudio",
    "title": "4¬† Installing R and RStudio",
    "section": "4.3 Setting up RStudio",
    "text": "4.3 Setting up RStudio\nFrom now on, we will only be accessing R through RStudio. When you open up RStudio for the first time, you might find the layout rather intimidating. The application window is divided into several sections, which we call ‚Äòpanes‚Äô. Each pane also has several tabs. Although it may seem overwhelming at first, you will soon see that these different panes and tabs will actually make life much easier.\n\n4.3.1 Global options\nBefore we get staRted properly, however, we need to change some of the default settings of RStudio. The first set of changes that we are going to make ensure that, each time we launch a new R session in RStudio, we are starting afresh.\nTo do so, head over to the ‚ÄòTools‚Äô dropdown menu and click on ‚ÄòGlobal Options‚Äô. Make sure that the first three boxes are unticked (see Figure¬†4.5 (a)). Under ‚ÄúSave workspace to .RData on exit‚Äù, select the option ‚ÄúNever‚Äù. Always starting afresh is good programming practice. It avoids any problems being carried over from previous R sessions. You can think of it like cooking in a freshly cleaned, tidy kitchen. It‚Äôs much safer than preparing a meal in a messy, possibly even contaminated kitchen! Or use the keyboard shortcut Ctrl/Command + ,\n\n\n\n\n\n\n\n\n\n\n\n(a) General tab\n\n\n\n\n\n\n\n\n\n\n\n(b) Code tab\n\n\n\n\n\n\n\nFigure¬†4.5: RStudio‚Äôs Global Options\n\n\n\nNext, under the ‚ÄòGlobal Options‚Äô tab ‚ÄòCode‚Äô of the ‚ÄòGlobal Options‚Äô window, ensure that the option ‚ÄúUse native pipe operator‚Äù is ticked (see Figure¬†4.5 (b)). This is a new feature in R that is very useful so we will make use of it in this textbook. The other options are not relevant for now.\nFinally, head over to the ‚ÄòPane Layout‚Äô tab. From here, you can rearrange the panes of your RStudio window. To do so, click on the ÔπÄ symbols to get a dropdown menu corresponding to each pane. You can also select which tabs you would like to see in each pane. If you are already familiar with RStudio, feel free to stick to your favourite set-up. Personally, I use the panes layout below and, if you are new to R, I recommend that you select this layout, too. You can always go back to these ‚ÄòGlobal Options‚Äô to change this setup at any stage. Don‚Äôt forget to click on ‚ÄòOK‚Äô at the bottom of the Global Options page to save your settings. Then, the panes in your RStudio window should be ordered as in Figure¬†4.6 (b).\n\n\n\n\n\n\n\n\n\n\n\n(a) Panes Layout tab\n\n\n\n\n\n\n\n\n\n\n\n(b) Customised panes layout\n\n\n\n\n\n\n\nFigure¬†4.6: Recommended RStudio panes layout\n\n\n\n\n\n4.3.2 Testing RStudio\nIt is now time we tested whether RStudio is communicating well with R. To do so, let‚Äôs run the same test as in the R Console. This time, head over to the Console tab in the top right pane of your RStudio window and, after the command prompt &gt;, type: plot(1:10) and then press enter. You should see the same plot as earlier on (see Figure¬†4.4 (b)), appearing in the Plots tab of the bottom-right pane of your RStudio window.\nIf you get the following error message Error in plot.new() : figure margins too large, this is because your bottom-right pane is hidden from view or too small for the plot to be printed there. Click on the small two-window icon in the bottom-right corner if it is hidden (see Figure¬†4.7 (a)). Or, if it is too small, click on the dividing line between the two right-hand side panes and, whilst still holding down the mouse button, drag up the line until it is about halfway up. Then, re-type the command plot(1:10) in the Console pane and press enter again. The plot should appear as in Figure¬†4.7 (b).\n\n\n\n\n\n\n\n\n\n\n\n(a) Hidden (minimised) bottom-right pane\n\n\n\n\n\n\n\n\n\n\n\n(b) Now the dividing line between the two panes is halfway up and the plot has been successfully output in the Plots pane\n\n\n\n\n\n\n\nFigure¬†4.7: Testing that RStudio is communicating well with your R installation.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Installing `R` and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#installing-r-packages",
    "href": "InstallingR.html#installing-r-packages",
    "title": "4¬† Installing R and RStudio",
    "section": "4.4 Installing R packages",
    "text": "4.4 Installing R packages\n\n4.4.1 What are packages?\nYou now have a base installation of R. Base R is very powerful and comes with many standard packages and functions that R users use on a daily basis. If you click on the Packages tab in the bottom-right pane and scroll down, you will see that there are many packages available. Only a few are selected. These are part of the base R installation.\nIn addition to the members of the R Core Team who develop and maintain base R, thousands of R users develop and share additional R packages every day. These enable us to vastly increase the capacities of base R. Packages are a very helpful way to bundle together a set of functions, data, and documentation files so that other R users can easily download these bundles and add them to their local R installation.\nThroughout this textbook, the names of packages will be enclosed in curly brackets like this: {ggplot2}.\n\n\n\n\n\n\nQuiz time!\n\n\n\n1) Which of these packages is not part of base R?\n\n\n{ggplot2}\n\n\n{graphics}\n\n\n{stats}\n\n\n{datasets}\n\n\n\n\n\n¬†\n2) Is it possible to create an R package that provides access to the full texts of all of Jane Austen‚Äôs published novels for computational text analysis in R?\n\n\nYes, pretty much anything is possible in R!\n\n\nNo way, that sounds impossible!\n\n\n\n\n\n¬†\n3) Is the {janeaustenr} package installed as part of base R?\n\n\nYes\n\n\nNo\n\n\n\n\n\n\n\n\n\n4.4.2 Installing packages\nTo install a package, you will first need to download it from the internet. Packages are typically stored on different websites (online repositories), but the most trustworthy one and easiest to work with is CRAN (Comprehensive R Archive Network). To install the {janeaustenr} package from CRAN, simply type the following command in the Console pane and then type enter: install.packages(\"janeaustenr\").\nThis command will take a few seconds to run (or longer depending on how slow your internet connection is). You should then see a message in red in the console indicating (among other things that you can ignore) that the package has been successfully downloaded and its size (here: 1.5 megabyte), as well as the path to where the package‚Äôs content has been saved on your computer (see Figure¬†4.8). You do not need to worry about any of the other information.\n\n\n\n\n\n\nFigure¬†4.8: Screenshot showing that the package has been correctly installed.\n\n\n\nTo check that the package has been successfully downloaded and installed, head over to the Packages tab of the bottom-right pane and scroll down to the {janeaustenr} package, or search for it using the search window within this same tab. The {janeaustenr} package should now be visible, which tells us that the package is installed on your computer. Note, however, that the checkbox next to it is currently empty. This means that the package hasn‚Äôt been loaded in our current R session and therefore cannot be used yet. Note that whilst you only need to install each package once, you will need to load it every time we want to use it in a new R session. This is because, when we start a new R session, the kitchen is perfectly clean and tidy and everything is back in storage. And the good news is that we don‚Äôt even need to do the washing-up! üôÉ\n\n\n\n\n\n\nMore ways of installing R packages\n\n\n\n\n\nThere are other ways to install packages, e.g., from Bioconductor and GitHub.\nTo find out more, read Section 1.5 from Douglas et al. (2024), which is available as an Open Educational Resource (see Chapter 1).\n\n\n\n\n\n4.4.3 Loading packages\nYou can think of base R as a fully functional student kitchen. It is rather small and only has the most essential ingredients and equipment, but it still has everything you need to cook simple, delicious meals. Downloading and installing additional packages is like buying fancier ingredients (these are packages that include datasets) or more sophisticated and specialised kitchen devices (these are packages that include additional functions).\nOnce you have downloaded and installed a new package, it is put in storage (either in the fridge or in a kitchen cupboard). In this case, the package appears in your Packages tab, but is not yet selected. If you want to use the new ingredient or the piece of equipment that was delivered in the new package, you need to get it out of the fridge or the cupboard and place it on the kitchen counter. This is the equivalent to loading a package. Once they are unpacked (i.e., installed), packages are usually referred to as libraries.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Installing `R` and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#package-documentation",
    "href": "InstallingR.html#package-documentation",
    "title": "4¬† Installing R and RStudio",
    "section": "4.5 Package documentation",
    "text": "4.5 Package documentation\nTo find out more about any package or function, simply use the command help() or its shortcut ?. For example, to find out more about the {janeaustenr} package, enter the command help(janeaustenr) or ?janeaustenr in the Console. The help file will open up in the Help tab of the bottom-right pane. It contains the name of the package and a short description, as well as the name of the package maintainer, Julia Silge, and some additional links.\nOne of these links takes us to the package creator‚Äôs GitHub repository. This is where we can find a source code for the package, should we want to check how it works under the hood, or amend it in any way. Click on this link and scroll down the package‚Äôs GitHub page to consult its README file. This document informs us that the package includes plain text versions of Jane Austen‚Äôs six completed, published novels and tells us under what name they are stored within the library. For example, to access Pride and Prejudice, we need to load the library object prideprejudice. Note that the object names in R cannot contain spaces or hyphens.\nPick your favourite Jane Austen novel and enter its corresponding object name in the Console, e.g., emma. The entire novel will be printed in the Console output! You can print only a few lines by selecting them within square brackets, e.g., the command emma[20:25] will only print lines 20 to 25 of the object emma (see Figure¬†4.9).\n\n\n\n\n\n\nFigure¬†4.9: Screenshot showing a selection of lines from the object emma (note that you can adjust the size of the Console pane to see more or less of the text at any one time).\n\n\n\nTo find out more about a dataset or function within a package, use the functions help() or ?, e.g., help(emma) or ?emma. In this case, the help file provides us with a short description of this object and a link to the original source from which the package creator obtained the novel (which is in the public domain, otherwise it would not be possible to share it in this way).",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Installing `R` and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#citing-r-packages",
    "href": "InstallingR.html#citing-r-packages",
    "title": "4¬† Installing R and RStudio",
    "section": "4.6 Citing R packages",
    "text": "4.6 Citing R packages\nWhen we use a package that is not part of base R, it is very important to reference the package adequately. There are two main reasons for doing this. For a start, the people who create and maintain these packages largely do so in their free time and they deserve full credit for their incredibly valuable work and contribution to science. Hence, whenever you use a package for your research, you should cite it, just like you would other sources.\nThe help page of the {janeaustenr} package already informed us that the maintainer of the package is Julia Silge. To get a full citation, however, we should use the citation() function. Enter citation(\"janeaustenr\") in the Console to find out how to cite this package.\nNote that the recommended bibliographic reference also includes the package version, which is important for reproducibility as the package may evolve and someone wanting to reproduce your analysis (and this may well be future you!) will need to know which version you used. This is the second main reason why we should be diligent about citing the packages that we used. In a research report, thesis, or academic article, you could cite the {janeaustenr} package like this:\n\nWe used the janeaustenr package (Silge 2022) to access Jane Austen‚Äôs six published novels in R (R Core Team 2024).\n\nYou can see the full references by hovering on the in-text citation links or by going to the References section of this book.\n\n\n\n\n\n\nMore about referencing packages\n\n\n\n\n\nYou may also want to install the {report} package, which includes a number of useful functions for citing R versions and R packages:\n\nreport::report_system()\n\nAnalyses were conducted using the R Statistical language (version 4.3.1; R Core\nTeam, 2023) on macOS Sonoma 14.4.1\n\nreport::cite_packages()\n\n  - Makowski D, L√ºdecke D, Patil I, Th√©riault R, Ben-Shachar M, Wiernik B (2023). \"Automated Results Reporting as a Practical Tool to Improve Reproducibility and Methodological Best Practices Adoption.\" _CRAN_. &lt;https://easystats.github.io/report/&gt;.\n  - Moroz G (2020). _Create check-fields and check-boxes with checkdown_. &lt;https://CRAN.R-project.org/package=checkdown&gt;.\n  - R Core Team (2023). _R: A Language and Environment for Statistical Computing_. R Foundation for Statistical Computing, Vienna, Austria. &lt;https://www.R-project.org/&gt;.\n  - Silge J (2022). _janeaustenr: Jane Austen's Complete Novels_. R package version 1.0.0, &lt;https://CRAN.R-project.org/package=janeaustenr&gt;.\n  - Xie Y (2023). _knitr: A General-Purpose Package for Dynamic Report Generation in R_. R package version 1.45, &lt;https://yihui.org/knitr/&gt;. Xie Y (2015). _Dynamic Documents with R and knitr_, 2nd edition. Chapman and Hall/CRC, Boca Raton, Florida. ISBN 978-1498716963, &lt;https://yihui.org/knitr/&gt;. Xie Y (2014). \"knitr: A Comprehensive Tool for Reproducible Research in R.\" In Stodden V, Leisch F, Peng RD (eds.), _Implementing Reproducible Computational Research_. Chapman and Hall/CRC. ISBN 978-1466561595.\n\nreport::report_packages()\n\n  - report (version 0.5.8; Makowski D et al., 2023)\n  - checkdown (version 0.0.12; Moroz G, 2020)\n  - R (version 4.3.1; R Core Team, 2023)\n  - janeaustenr (version 1.0.0; Silge J, 2022)\n  - knitr (version 1.45; Xie Y, 2023)\n\n\nTo find out more, it is also worth reading Steffi LaZerte‚Äôs blog post on ‚ÄúHow to cite R and R packages‚Äù: https://ropensci.org/blog/2021/11/16/how-to-cite-r-and-r-packages/.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Installing `R` and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#keeping-things-up-to-date",
    "href": "InstallingR.html#keeping-things-up-to-date",
    "title": "4¬† Installing R and RStudio",
    "section": "4.7 Keeping things up to date ‚ú®",
    "text": "4.7 Keeping things up to date ‚ú®\nAs with all software, it is a good idea to keep your installations of RStudio and R up-to-date. New features are constantly being added, bugs are corrected and updates may include important security fixes.\n\n4.7.1 Updating RStudio\nBy default, RStudio will let you know when a new version is available in a pop-up window. To update RStudio simply follow the same instructions as for the first installation (see Section 4.2.3). This time, however, when you add RStudio to your apps, you will get a pop-up message warning you that an older version of this programme already exists on your computer (see Figure¬†4.10). You can safely click on the option ‚ÄúReplace‚Äù. All of your previous Global Options settings will be transferred to your updated RStudio version so this should be a quick-and-easy process.\n\n\n\n\n\n\nFigure¬†4.10: Warning message on MacOS when installing an updated version of RStudio\n\n\n\nYou can also check which version of RStudio you are running by clicking on the ‚ÄúHelp‚Äù menu in RStudio‚Äôs top toolbar and then selecting the option ‚ÄúAbout RStudio‚Äù. In the ‚ÄúHelp‚Äù drop-down menu, you also have an option to ‚ÄúCheck for Updates‚Äù.\n\n\n4.7.2 Updating R\nUpdating R is a little more complex because you will also need to update all of your R packages. Some of the packages that you use may not (yet) be available for the latest R version. This is why, for beginners, I do not recommend updating R in the middle of a project. That said, it is a good idea to keep your R version up-to-date. To find out which version of R you are currently working with, run this command in the Console.\n\nR.version.string\n\n[1] \"R version 4.3.1 (2023-06-16)\"\n\n\nCompare this version number with the number of the latest version available on CRAN (see Figure¬†4.11). If the version that you are running is not the same as the latest R version available on CRAN, you might want to update it. As a rule of thumb, it is a good idea to do an update if your version is more than six months old. To proceed with the update, close RStudio on your computer. Than, follow the same instructions as for the first-time installation of R (see Section 4.2.2).\n\n\n\n\n\n\nFigure¬†4.11: CRAN R for macOS page using the latest recommended R version\n\n\n\n\n\n4.7.3 Updating R packages\nOnce you have updated R, it is important that you also update your installed packages. To do so, run the following command in the Console:\n\nupdate.packages(ask = FALSE, checkBuilt = TRUE)\n\nAlternatively, you can also go to the Packages tab of RStudio and click on the button ‚ÄúUpdate‚Äù. A pop-up window will appear with a list of the packages that need updating. Click on ‚ÄúSelect All‚Äù and ‚ÄúInstall Updates‚Äù.\n\n\n\n\n\n\n\n\n\n\n\n\nFigure¬†4.12: Update button in RStudio‚Äôs Packages tab\n\n\n\n\n\n\n\n\n\n\n\nFigure¬†4.13: Update Packages dialogue in RStudio\n\n\n\n\n\n\n\nUpdating packages using RStudio‚Äôs Graphical User Interface (GUI)\n\n\n\nNote that, if you have installed a lot of packages, this updating operation could take a while. It requires a stable internet connection and a bit of patience. üßòüèæ\n\n\n\n\n\n\nAn easier way to update R using {installr} (for Windows only)\n\n\n\n\n\nThe {installr} package simplifies updating R on Windows. To install the package use the usual commands:\n\ninstall.packages(\"installr\") # Run this command the first time you use the package.\n\nlibrary(installr) # Run this command everytime you want to update R using this package.\n\nThen, run the updateR() function, which automates the updating process by detecting your current R version, comparing it with the latest available version, and guiding you through the process of downloading and installing the latest version.\nIt is also possible to customise the update process with arguments like updateR(update_packages = FALSE) to skip package updates. For more details, check the documentation using the command ?updateR.\n\n\n\n\n\n\n\nDouglas, Alex, Deon Roos, Francesca Mancini & David Lusseau. 2024. An introduction to R. https://intro2r.com/.\n\n\nR Core Team. 2024. R: A language and environment for statistical computing. R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nSilge, Julia. 2022. Janeaustenr: Jane Austen‚Äôs complete novels. https://CRAN.R-project.org/package=janeaustenr.\n\n\nWinter, Bodo. 2019. Statistics for linguists: An introduction using R. Routledge. https://doi.org/10.4324/9781315165547.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Installing `R` and RStudio</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html",
    "href": "GettingStaRted.html",
    "title": "5¬† Getting staRted",
    "section": "",
    "text": "Chapter overview\nNow that you have installed and tested R and RStudio, in this chapter, you will learn how to:\nIf you are already familiar with the basics of R and are keen to learn more about doing statistics in R, you can skip most of this chapter. That said, it‚Äôs probably not a bad idea to have a go at the quiz questions and the final task to refresh your memory.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Getting sta`R`ted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#using-the-console",
    "href": "GettingStaRted.html#using-the-console",
    "title": "5¬† Getting staRted",
    "section": "5.1 Using the Console",
    "text": "5.1 Using the Console\nThis is what you did in the previous chapter when you tested that RStudio was working properly (using the command: plot(1:10)).\nOne way to write R code in RStudio is to use the Console. If you set up RStudio as recommended here, the Console should be in your top-right pane. You can type a line of code immediately after the command prompt &gt; and press ‚ÄúEnter‚Äù.\nData input is the most basic operation in R. Try inputting a number by typing it out in the Console and then pressing ‚ÄúEnter‚Äù. R will interpret the number and return it. You can input both integers (whole numbers, e.g., 13) and decimal numbers (e.g., 0.5).\n\n\n\n\n\n\nFigure¬†5.1: Inputting numbers in the Console\n\n\n\nR can handle not only numbers but also text data, known as ‚Äúcharacter strings‚Äù or just ‚Äústrings‚Äù. Strings must always be enclosed in quotation marks. You can choose to use either double quotation marks \" \" or single quotation marks ' ', but it is important to be consistent. In this textbook, we will use double quotation marks throughout.\nTry first inputting a single word and then an entire sentence in the Console.\n\n\n\n\n\n\nFigure¬†5.2: Inputting strings in the Console\n\n\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n1) What happens if you enter a word without quotation marks?\n\n\nR automatically wraps the word in quotation marks and processes it as a string.\n\n\nR returns an error message because it interprets the word as an object name or command.\n\n\nR returns an error indicating that you probably mistyped the word.\n\n\nR returns an error message indicating that it expected a number.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Getting sta`R`ted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#doing-maths-in-r",
    "href": "GettingStaRted.html#doing-maths-in-r",
    "title": "5¬† Getting staRted",
    "section": "5.2 Doing maths in R",
    "text": "5.2 Doing maths in R\nR can also be used as a very powerful calculator. The lines of code in Figure¬†5.3 demonstrate mathematical operations involving addition (+), subtraction (-), division (/), and multiplication (*). Try out a few yourself!\n\n\n\n\n\n\nFigure¬†5.3: Using the R Console as a calculator\n\n\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n2) Try entering 13^2 in the Console. What does the ^ (caret) operator do?\n\n\nThe ^ operator is used to calculate the modulus of 13, with 2 as the base.\n\n\nThe ^ operator performs an exponentiation operation.\n\n\nThe ^ operator is used to create a vector with 13 occurrences of the integer 2.\n\n\n\n\n\n¬†\n3) Compare 13*13 with 13 * 13. What is the difference in the output?\n\n\nAdding a space generates an error.\n\n\nThere is no difference.\n\n\nIt is impossible to add a space in the R Console.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Getting sta`R`ted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#working-with-r-objects",
    "href": "GettingStaRted.html#working-with-r-objects",
    "title": "5¬† Getting staRted",
    "section": "5.3 Working with R objects",
    "text": "5.3 Working with R objects\nSo far, we have used the Console like a calculator. It‚Äôs important to understand that, just like with a standard calculator, the output of all of our operations was not saved anywhere.\nR allows us to store values, sequences of values, and the results of computations in so-called ‚Äúobjects‚Äù for later use. We use the assignment operator (&lt;-) to assign a value or sequence of values to an object name.\nWrite out the following line to create an object called my.favourite.number that contains your own favourite number.\n\nmy.favourite.number &lt;- 13\n\nWhen you enter this line in the Console and press ‚ÄúEnter‚Äù, it should look like nothing happened: R does not return anything in the Console. Instead, it saves the output in an object called my.favourite.number. However, if you look in your Environment pane, you should see that an object has appeared (Figure¬†5.4).\n\n\n\n\n\n\nFigure¬†5.4: Created object in the Environment pane\n\n\n\nTo save an object containing a character string, we use quotation marks. Create an object called my.favourite.word containing your favourite word (in any written language of your choice).\n\nmy.favourite.word &lt;- \"empathy\"\n\nYour Environment pane should now contain two objects. You can print the content of a stored object by entering the object name in the Console and then pressing ‚ÄúEnter‚Äù (see Figure¬†5.5).\nTip: If you feeling lazy or simply want to avoid making a typo, you can type only the first few letters of an object name and then press the ‚ÄúTab‚Äù key (‚Üπ or ‚á•). RStudio will then give you a drop-down menu with possible options. Select the one you want by clicking on it or pressing ‚ÄúEnter‚Äù.\n\n\n\n\n\n\nFigure¬†5.5: Calling up stored objects in the Console to view their content\n\n\n\nThese two objects are of different types. We can use the class() function to find out which type of object an object is.\n\n\n\n\n\n\nFigure¬†5.6: Using the class() function\n\n\n\nHere, my.favourite.number is a numeric object, while my.favourite.word is a character object.\nObject naming conventions in R are fairly flexible. We can use dots (.), underscores (_) and capital letters to make our object names maximally informative and easy for us humans to read. However, spaces and other symbols are not allowed. All of these options work:\n\nword2 &lt;- \"cheerful\"\nmy.second.word &lt;- \"cheerful\"\nmy_second_word &lt;- \"cheerful\"\nMySecondWord &lt;- \"cheerful\"\n\n\n\n\n\n\n\nFigure¬†5.7: Environment pane showing all of the objects currently stored in the R session environment\n\n\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n4) Which of these object names are not allowed in R? Try to create an object with each of these names and see if you get an error message or not.\n\n\n1TopWord\n\n\nmy-favourite-word\n\n\nTop1Word\n\n\nBestWordEver!\n\n\ntop word\n\n\nAgn√®s.Favourite.Word\n\n\n\n\n\nüòá Hover for a hint\n\n\n\n\nObject names should not contain spaces or symbols like !, nor should they contain hyphens as the hyphen is reserved for the mathematical operator ‚Äúminus‚Äù. Digits can be used anywhere except at the beginning of an object name. And whilst it is possible to have special characters such as accented letters like ‚Äú√®‚Äù, it is not recommended that you use them for object names.\nObject names are unique. If you create a new object with an existing object name, it will overwrite the existing object with the new one. In other words, you will lose the values that you saved in the original object. Try it out by running this line and observing what happens in your Environment pane:\n\nword2 &lt;- \"surprised\"\n\nEarlier on, you created an object called word2 which contained the string ‚Äúcheerful‚Äù. But, by running this new line of code, ‚Äúcheerful‚Äù has been replaced by the string ‚Äúsurprised‚Äù - with no warning that you were about to permanently delete ‚Äúcheerful‚Äù! üò≤\nThe command to delete a single object from your environment is remove() or rm(). Hence, to permanently delete the object MySecondWord, you can use either of these commands:\n\nremove(MySecondWord)\nrm(MySecondWord)",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Getting sta`R`ted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#writing-and-saving-.r-scripts",
    "href": "GettingStaRted.html#writing-and-saving-.r-scripts",
    "title": "5¬† Getting staRted",
    "section": "5.4 Writing and saving .R scripts",
    "text": "5.4 Writing and saving .R scripts\nIf we shut down RStudio right now, we will lose all of our work so far. This is because the objects that we have created are only saved in the environment of our current R session. Whilst this might sound reckless, it is actually a good thing: In the previous chapter, we set our Global Options settings in RStudio such that, whenever we restart RStudio, we begin with a clean slate, or a perfectly clean and tidy kitchen. We don‚Äôt want any dirty dishes or stale ingredients lying around when we enter the kitchen! With this in mind, close RStudio now and open it again to start a new R session.\nYou should now have an empty history in your Console pane and an empty Environment pane. Whilst nobody wants to start cooking in a messy kitchen, it‚Äôs also true that, if we want to remember what we did in a previous cooking/baking session, we should write it down. The pages of our recipe book are .R scripts. In the following, we will see that writing scripts is much better than running everything from the Console. It allows us to save and rerun our entire analysis pipeline any time we want. It also ensures that our analyses are reproducible and saves us time as we don‚Äôt have to rewrite our code every time. Crucially, if we made a mistake at any stage, we can go back and correct it and rerun the entire corrected script at the click of a button.\nThere are three ways to create a new .R script in RStudio. Pick the one that you like best:\n\nNavigate to the top menu item ‚ÄúFile‚Äù, then select ‚ÄúNew File‚Äù, then click on ‚ÄúR Script‚Äù.\nClick on the icon with a white page and a green plus button in the top left corner of the tool bar.\nUse the keyboard shortcut Shift + Ctrl/Cmd + N.\n\nWhichever option you chose, RStudio should have opened an empty file in a fourth pane. This is the ‚ÄúSource pane‚Äù and it should have appeared in the top-left corner of your RStudio window.\nWe can now type our code in this empty .R script in the Source pane, just like we did in the Console. Type the following lines of code:\n\n13*13\nmy.favourite.number &lt;- 13\nmy.favourite.word &lt;- \"empathy\"\n\nYou will have noticed that when you pressed ‚ÄúEnter‚Äù after every line, nothing happened: Nowhere can we see the result of 13*13, nor have our two objects been saved to the environment as the Environment pane remains empty (see Figure¬†5.8). Just like a recipe for a cake is not an actual, delicious cake, but simply a set of instructions, a script is only a text file that contains lines of code as instructions. For these instructions to be executed, we need to send them to the R Console where they will be interpreted as R code.\n\n\n\n\n\n\nFigure¬†5.8: Writing code in a script\n\n\n\nTo send a line of code to the Console, or ‚Äúrun‚Äù a line of code, select the line that you want to run, or place your mouse cursor anywhere within that line and then click on the ‚ÄúRun‚Äù button (in the top-right corner of the pane, see Figure¬†5.8) or use the keyboard shortcut Ctrl/Cmd + Enter.\nRun the three lines of code of your script using these two options and check that a) you are seeing the result of the mathematical operation in the Console output and b) two objects have been added to your environment.\nIt is now very easy to rerun this script any time we want to redo this calculation and recreate these two R objects. However, our .R script is not yet saved! RStudio is warning us about this by highlighting the file name ‚ÄúUntitled1*‚Äù in red (see Figure¬†5.8). Just like with any unsaved computer file, if we were to shut RStudio down now, we would loose our work. So, let us save this .R script locally, that is on our own computer. To do so either:\n\nNavigate to the top menu item ‚ÄúFile‚Äù and then click on ‚ÄúSave‚Äù,\nClick on the save icon üíæ, or\nUse the keyboard shortcut Ctrl/Cmd+ S.\n\nGive your script a meaningful file name. Remember that file names should be both computer-readable and human-readable. If you navigate to the folder where you saved your .R script, you should see that its file extension is .R. You should also see that it is a tiny file because it contains nothing more than a few lines of text. If you double click on an .R file, RStudio should automatically open it. However, if you wanted, you could open .R files with any text-processing software, such as LibreOffice Writer or Microsoft Word.\n\n5.4.1 Writing comments\nJust like in a recipe book, in addition to writing the actual instructions, we can also write some notes, for example to remind ourselves of why we did things in a particular way or for what occasion we created a special dish. In programming, notes are called ‚Äúcomments‚Äù and they are typically preceded by the # symbol.\nThus, if a line starts with a # symbol, we say that it is ‚Äúcommented out‚Äù. RStudio helpfully displays lines that are commented out in a different colour. These lines will not be interpreted as code even if you send them to the Console. Write the following lines in your script and try to run them.\n\n#13^13\n\n#StringObject3 &lt;- \"This line has been commented out so the object will not be saved in the environment even if you try to run it.\"\n\nAs you can see, nothing happens. You can also add comments next to a line of interpretable code. In this case, the code is interpreted up until the #. This can be helpful to make a note of what a line of code does, e.g.:\n\nsqrt(169) # Here the sqrt() function will compute the square root of 169.\n\nIt is good practice to comment your code when working in an .R script. Comments are crucial for other people to understand what your code does and how it achieves that. But even if you are confident that you are the only person who will ever use your code, it is still a very good idea to use comments to make notes documenting your intentions and your reasoning as you write your script.\nFinally, writing comments in your code as you work through the examples in this book is a great way to reinforce what you are learning. From this chapter onwards, I recommend that, for each chapter, you create an .R script documenting what you have learnt, adding lots of comments to help you remember how things work. This is generally more efficient (and less error-prone!) than trying to take notes in a separate document (e.g., in a Microsoft Word file) or on paper.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Getting sta`R`ted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#using-relational-operators",
    "href": "GettingStaRted.html#using-relational-operators",
    "title": "5¬† Getting staRted",
    "section": "5.5 Using relational operators",
    "text": "5.5 Using relational operators\nNow that we have saved some objects in our environment, we can use them in calculations. Try out the following operations (and any other that take your fancy) with your own favourite number:\n\nmy.favourite.number / 2\n\n[1] 6.5\n\nmy.favourite.number*my.favourite.number\n\n[1] 169\n\nsqrt(my.favourite.number)\n\n[1] 3.605551\n\nsqrt(my.favourite.number*my.favourite.number)\n\n[1] 13\n\n\nWe can also use relational operators such &gt;, &lt;, &lt;=, &gt;=, == and != to make comparisons. Experiment with the following commands to understand what these relational operators do:\n\nmy.favourite.number &gt; 10\nmy.favourite.number &lt; 10\nmy.favourite.number == 25\nmy.favourite.number &gt;= 13\nmy.favourite.number &lt;= -13\nmy.favourite.number != 25\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n5) What is the relational operator that checks whether a value is ‚Äúmore than or equal to‚Äù another value?\n\n\n\n\n\n\nüòá Hover for a hint\n\n\n¬†\n6) What is the relational operator that checks whether a value ‚Äúis not equal to‚Äù another value?\n\n\n\n\n\n\nüòá Hover for a hint\n\n\n\n\nThe relational operators == and != can also be used with character objects. Find out how they work by first creating a new character object with a word that was added to the 2025 edition of the Petit Larousse dictionary:\n\nNew.French.Word &lt;- \"√©cogeste\"\n\nThen copy these lines of code to test how these relational operators work with string characters.\n\nNew.French.Word == \"√©cogeste\" \nNew.French.Word != \"trottinettiste\"\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n7) Why does this line of code return FALSE even though New.French.Word was assigned the character string ‚Äú√©cogeste‚Äù?\n\nNew.French.Word == \"ecogeste\"\n\n[1] FALSE\n\n\n\n\nBecause R automatically removed the accent as object names must be in English.\n\n\nBecause == cannot be used to compare character strings in French.\n\n\nBecause \"√©cogeste\" and \"ecogeste\" are two different strings in R.\n\n\n\n\n\n¬†\n8) Why does this line of code return FALSE even though New.French.Word was assigned the character string ‚Äú√©cogeste‚Äù?\n\nNew.French.Word == \" √©cogeste\"\n\n[1] FALSE\n\n\n\n\nBecause string objects cannot include any special characters. This includes spaces.\n\n\nBecause R is case-sensitive.\n\n\nBecause this string includes an additional space character.\n\n\n\n\n\n¬†\n9) Why does this line of code return FALSE even though New.French.Word was assigned the character string ‚Äú√©cogeste‚Äù?\n\nNew.French.Word == \"√âcogeste\"\n\n[1] FALSE\n\n\n\n\nBecause strings should never start with a capital letter.\n\n\nBecause this word is not in the dictionary of the Acad√©mie Fran√ßaise.\n\n\nBecause R is case-sensitive.\n\n\n\n\n\n¬†\n10) Why does this line of code return FALSE even though New.French.Word was assigned the character string ‚Äú√©cogeste‚Äù?\n\nNew.French.Word != \"√©cogeste\"\n\n[1] FALSE\n\n\n\n\nBecause this command asks whether New.French.Word is not equal to \"√©cogeste\".\n\n\nBecause √©cogeste is no longer a new French word.\n\n\nBecause this string is in a different text encoding.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Getting sta`R`ted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#sec-Errors",
    "href": "GettingStaRted.html#sec-Errors",
    "title": "5¬† Getting staRted",
    "section": "5.6 Dealing with errors ü§¨",
    "text": "5.6 Dealing with errors ü§¨\nWhen R cannot interpret your code, the Console will display an error message in red. A large part of learning to code is really about learning how to interpret these error messages and developing an intuition for the most common reasons why errors occur.\n\n\n\n\n\n\nFigure¬†5.9: The process of fixing programming errors is called ‚Äúdebugging‚Äù and often involves an array of emotions (artwork by @allison_horst).\n\n\n\nAs you begin your journey learning to code in R, you are very likely to encounter one problem on a regular basis. So let‚Äôs take a closer look at that error. Copy and paste this exact line of code and try to run it in your R Console:\n\nsqrt(my.favourite.number\n\nNotice that, in this erroneous line of code, we have (intentionally) forgotten to include the final bracket. As a result, after you hit ‚ÄúEnter‚Äù, the Console output shows a ‚Äú+‚Äù instead of the result of the mathematical operation. The ‚Äú+‚Äù indicates that the line is incomplete and therefore cannot be interpreted yet. R is therefore asking you to complete your line of code.\n\n\n\n\n\n\nFigure¬†5.10: Incomplete function in console\n\n\n\nThere are two ways to fix this. The first method is to complete the line of code directly in the Console. In this case, this means adding the closing bracket ‚Äú)‚Äù after the ‚Äú+‚Äù and hitting ‚ÄúEnter‚Äù. Now that the line has been completed, R is able to interpret it as an R command and will output the result of the operation.\nIf you are running a line of code just once, from the Console, this first method is fine. As we have seen above, however, most of the time, you will write your code in a script rather than in the Console. So this first, on-the-fly, method is only recommendable for lines of code that you will genuinely only need once. These include commands to install packages, like install.packages(\"janeaustenr\"), or to get consult documentation files, e.g., help(janeaustenr).\nGiven that we will mostly be working in scripts, let‚Äôs now generate this error from an .R script. To do so, copy and paste the erroneous line of code in your .R script and try to run it by either clicking on the ‚ÄúRun‚Äù icon or using the shortcut Ctrl/Cmd + Enter:\n\nsqrt(my.favourite.number\n\nAgain, our incomplete line of code cannot be interpreted and the ‚Äú+‚Äù symbol appears in the Console. Now, correct the error in your script by adding the missing ‚Äú)‚Äù and try to run the command again:\n\nsqrt(my.favourite.number)\n\nEven though we have corrected the problem, we now get an error! ü§Ø At first sight, this does not make sense, but look carefully at what happened in the Console: The line of code that R tried to interpret is sqrt(my.favourite.number + sqrt(my.favourite.number), i.e., the combination of the incomplete version of the command plus the complete one. This is obviously nonsense and R tells us so by outputting an error message!\n\n\n\n\n\n\nFigure¬†5.11: Error message in console\n\n\n\nTo be able to enter a new line of code, we must see the command prompt &gt; in the Console. So, let‚Äôs generate the error again and learn how to fix it with the second method. Add this erroneous line to your script again and run it:\n\nsqrt(my.favourite.number\n\nThe + situation arises again, but we will now solve it using the second method. Head over to the Console and place your cursor next to the +. This time, instead of completing the line by adding a closing bracket, press ‚ÄúEsc‚Äù on your keyboard. This will cancel the incomplete line of code. Then, you can add the missing ) in your script and rerun the newly completed line of code from the Source pane.\nThis second method is the one you should use when you are documenting your code in a script. If you don‚Äôt make the changes immediately in your script, you will forget and you will run into this error again in the future. Think of it like a pastry chef who realises that they need to put a little more baking powder in a cake batter for the texture to be just right, but does not make a note of that change in their recipe book. Next time, the pastry chef will likely forget and not put the correct amount of baking powder. If it is one of their assistants who prepares the cake, they will not be able to know that the chef made that change!\nLearning to make sense of error messages is a very important skill that, like all skills, takes practice. Most errors are very easy to fix if you keep your cool. In fact, 90% of errors are simply typos.\n\n\n\n\n\n\nTask 1\n\n\n\nCopy and paste the following lines of code in a new .R script. Try to run each line individually. Each line will generate an error of some kind. In some cases, RStudio will warn you in advance that a line of code is likely wrong by displaying a red cross icon to the left of the erroneous line. If you hover over the red cross icon, RStudio will display a message that may help you to fix the error.\nCan you decode the error messages to find out what is causing these errors and fix these ten erroneous commands?\n\nmy.favourite.word &lt;- \"empathy\"\nmy.favourite.number &lt;- 13\n\n# Error 1:\nmy.favourite.number + my.favorite.number\n\n# Error 2:\nNegin-Fav-Word &lt;- \"Ach so!\" \n\n# Error 3:\nmy.favourite.numbers^2\n\n# Error 4:\n√∂mers_favourite_ number &lt;- 52\n\n# Error 5:\n    √∂mers_favorite_number =   my.favourite..number\n\n# Error 6:\nmy.favourite.number*2 -&gt; half.my.fav.number\n\n# Error 7:\nrose's.favourite.number &lt;- 5\n\n# Error 8:\nBestWordEver &lt;- \"supercalifragilisticexpialidocious\n\n# Error 9:\n2FavNumbers &lt;- my.favourite.number + √∂mers_favourite_number\n\n# Error 10:\ngood.luck &lt;- ŸÖŸàŸÅŸÇ ÿ®ÿßÿ¥ŸäÿØ\"\n\n\n\n\n\n\n\n\n\nFigure¬†5.12: Debugging is an unavoidable part of writing code. If you‚Äôre stuck and starting to feel fustrated, the best thing you can usually do is to take a short break (artwork by @allison_horst).\n\n\n\n\n\n\n\n\n\nClick here for the solutions to Task 1\n\n\n\n\n\n\nThe first error was object 'my.favorite.number' not found. This means that the object my.favorite.number is not stored in your environment. If you think it is, the problem is most likely due to a typo. Here, my.favorite.number uses American English spelling, whereas we used British English spelling when we created the object. To correct the error, you need to use exactly the same spelling as when you created the object.\nThe second error is also object 'Negin' not found. However, here we do not expect an object called Negin to be in the environment because what we are actually trying to do is create and save a new object called Negin-Fav-Word! The problem is that R interprets the hyphens in this object name as ‚Äúminus‚Äù and therefore tries to find the object Negin in order to then subtract Fav and Word from it. To correct this error, you need to remove the hyphens or replace them by dots.\nThe third error is yet another object not found error. It is another typo: the correct object name is not in the plural form.\nThe fourth error is Error: unexpected symbol in \"√∂mers_favourite_ number\". In addition, RStudio warned us that there were some ‚Äúunexpected tokens‚Äù in this line of code. The unexpected item is the space between _ and number. To fix this error, you need to remove this space character.\nThe object my.favourite..number is not found because the name of the object saved in the environment does not have two consecutive dots. Note that the error does not come from the fact that this line begins with some white space and includes multiple space characters after the = sign. These added spaces make the line more difficult for us humans to read, but R simply ignores them. Hence, to fix this error, what you need to do is remove one of the consecutive dots in the object name. It is also worth noting that this line replaces the value originally stored in √∂mers_favorite_number with the value stored in my.favourite.number. If you check your environment pane, you will see that, once you have corrected the double dot, this line will change √∂mers_favorite_number to 13 - with no warning! In other words, here, the equal sign = behaves in the same way as the assignment operator &lt;-.\nIf you tried to run this line, you will have noticed that it does not actually generate an error. However, you may have noticed that the assignment operator is in the opposite direction. This means that my.favourite.number is multiplied by two and that this number is then assigned to a new object called half.my.fav.number. With this in mind, you will likely want to amend the line for the outcome to make mathematical sense (or rename the object).\nRunning this line will have caused you to run into a + situation in the console. As explained earlier in this chapter, to get out of it, you should first take your mouse cursor to the Console pane and then press ‚Äúesc‚Äù on your keyboard to cancel this erroneous line. Whilst there is no error message to help you understand where the problem is coming from, RStudio helpfully displays a red cross icon to the left of the line; hovering over it displays a multi-line message. The first line is the relevant one: unexpected token 's.favourite.number &lt;- 5. This tells us that apostrophes are forbidden in object names. Remove the ' and the error will be fixed.\nThis line also causes a + situation. In this case, it is due to a missing quotation mark. To fix this error, first cancel the incomplete line of code by escaping it. Then, add the missing double quotation mark in your script and rerun the completed line.\nThe message Error: unexpected symbol in \"2FavNumbers\" is due to the fact that object names cannot start with a number. Change the object name to something like TwoFavNumbers or Fav2Numbers to fix the error.\nHere, too, the error message reads unexpected symbol. However, it is important to remember that the unexpected symbol is not within the character string, but rather within the command to assign the string to the object name good.luck. Hence, the problem is not that this string is in Persian, but rather that one of the quotation marks is missing. You can fix the error by ensuring that the phrase is enclosed in quotation marks.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Getting sta`R`ted</span>"
    ]
  },
  {
    "objectID": "ImpoRtingData.html",
    "href": "ImpoRtingData.html",
    "title": "6¬† ImpoRting data",
    "section": "",
    "text": "Chapter overview\nMany introduction R textbooks postpone this section until much later because they include practical tasks that typically rely on datasets that are directly accessible as R data objects. In real life, however, research data rarely comes neatly packaged as an R data object. Your data will most likely be stored in a spreadsheet table or as text files of some kind. And -let‚Äôs be honest- they will be more messy that you would like to admit, which this chapter and the next are crucial to learning how to do data analysis in R.\nThis chapter will take you through the process of:\nIn future chapters, we will continue to work with this data. We will learn how to ‚Äúclean it up‚Äù for data analysis, before we begin to explore it using descriptive statistics and data visualisations.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Impo`R`ting data</span>"
    ]
  },
  {
    "objectID": "ImpoRtingData.html#accessing-data-from-a-real-applied-linguistics-study",
    "href": "ImpoRtingData.html#accessing-data-from-a-real-applied-linguistics-study",
    "title": "6¬† ImpoRting data",
    "section": "6.1 Accessing data from a real applied linguistics study",
    "text": "6.1 Accessing data from a real applied linguistics study\nAs we saw in Chapter Chapter 1, it is good practice to share both the data and materials associated with research studies so that others can reproduce and replicate the research.\nIn the following chapters, we will focus on data associated with the following study:\n\nDƒÖbrowska, Ewa. 2019. Experience, Aptitude, and Individual Differences in Linguistic Attainment: A Comparison of Native and Nonnative Speakers. Language Learning 69(S1). 72‚Äì100. https://doi.org/10.1111/lang.12323.\n\n\n\n\nTitle page from the journal Language Learning\n\n\nFollow the DOI1 link above and read the abstract to find out what the study was about. You do not need to have institutional or paid access to the full paper to read the abstract.\n\n\n\n\n\n\nQuiz time!\n\n\n\n1) What kind of data was collected as part of this study?\n\n\nParticipants' results on a grammar test\n\n\nParticipants' results on a nonverbal intelligence test\n\n\nParticipants' resuls on a collocations test\n\n\nParticipants' results on a language analytic ability test\n\n\nSociodemograhic information about the participants including their age and level of education\n\n\nParticipants' resuls on a vocabulary test\n\n\n\n\n\n¬†\n2) On average, how did the English L2 speakers fare compared to the native speakers?\n\n\nOn average, native speakers outperformed L2 speakers on all language tasks, with the most significant difference observed in collocation tasks.\n\n\nThe observed differences in performance between native speakers and L2 speakers were not statistically significant.\n\n\nOn average, both groups performed equally well on grammar and vocabulary tasks.\n\n\nOn average, L2 speakers performed better on grammar tasks than native speakers\n\n\n\n\n\n¬†\n3) In this study, did all native speakers perform better in the English vocabulary and grammar tests than the L2 speakers?\n\n\nThis study only looked at average trends so that no conclusive statement can be made about any individual participants.\n\n\nYes, the L1 speakers clearly outperformed the L2 speakers in both grammar and vocabulary.\n\n\nNo, while L1 speakers generally performed better, some L2 speakers demonstrated equally high proficiency in grammar and vocabulary.\n\n\n\n\n\n¬†\n\n\nThe author, Ewa DƒÖbrowska, has made the data used in this study available on an open repository (see Section 2.4). To find out on which repository, go back to the study‚Äôs DOI link and click on the drop-down menu ‚ÄúSupporting Information‚Äù. It links to a PDF file. Click on the link and scroll to the last page which contains the following information about the data associated with this study:\n\nAppendix S4: Datasets\nDƒÖbrowska, E. (2018). L1 data [Data set]. Retrieved from https://www.iris-database.org/iris/app/home/detail?id=york:935513\nDƒÖbrowska, E. (2018). L2 data [Data set]. Retrieved from https://www.iris-database.org/iris/app/home/detail?id=york:935514\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n4) On which repository/repositories can the data be found?\n\n\ndatabase.org\n\n\nAll of the above.\n\n\nZenodo\n\n\nIRIS\n\n\nResearchGate\n\n\n\n\n\nüê≠ Click on the mouse for a hint.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Impo`R`ting data</span>"
    ]
  },
  {
    "objectID": "ImpoRtingData.html#sec-SavingData",
    "href": "ImpoRtingData.html#sec-SavingData",
    "title": "6¬† ImpoRting data",
    "section": "6.2 Saving and examining the data",
    "text": "6.2 Saving and examining the data\nClick on the two links listed in Appendix S4 and download the two datasets. Save them in an appropriate place on your computer (see ?sec-PathsFolders), as we will continue to work with these two files in the following chapters.\n\n\n\n\n\n\nWhat‚Äôs a good place to save these files? ü§î\n\n\n\n\n\nIf you haven‚Äôt already done so, I suggest that you create a folder in which you save everything that you create whilst learning from this textbook. This folder could be called something along the lines of DataLiteracyTextbook, 2024_data_literacy, or LeFoll_2024_DataLiteracy (see Section 3.2). Then, within this folder, I recommend that you create another folder called Dabrowska2019 (note how I have not included the ‚ÄúƒÖ‚Äù character in the folder name as this could cause problems), and within this folder, create another folder called data. This is the folder in which you can save these two files.\n\n\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n5) In which data format are these two files saved?\n\n\nThey are both .html files.\n\n\nThey are both .txt files.\n\n\nThey are both .csv files.\n\n\nThey are both .xslx files.\n\n\n\n\n\n¬†\n\n\nThe file Dabrowska_2018_L1_data.csv contains data about the study‚Äôs L1 participants. It is a delimiter-separated values (DSV) file (see Section 2.5.1). The first five lines of the file are printed below. Note that this is a very wide table as it contains many variables (you can scroll to the right to view all the columns).\nParticipant,Age,Gender,Occupation,OccupGroup,OtherLgs,Education,EduYrs,ReadEng1,ReadEng2,ReadEng3,ReadEng,Active,ObjCl,ObjRel,Passive,Postmod,Q.has,Q.is,Locative,SubCl,SubRel,GrammarR,Grammar,VocabR,Vocab,CollocR,Colloc,Blocks,ART,LgAnalysis\n1,21,M,Student,PS,None,3rd year of BA,17,1,2,2,5,8,8,8,8,8,8,6,8,8,8,78,95,48,73.33333333,30,68.75,16,17,15\n2,38,M,Student/Support Worker,PS,None,NVQ IV Music Performance,13,1,2,3,6,8,8,8,8,8,8,7,8,8,8,79,97.5,58,95.55555556,35,84.375,11,31,13\n3,55,M,Retired,I,None,No formal (City and Guilds),11,3,3,4,10,8,8,8,8,8,7,8,8,8,8,79,97.5,58,95.55555556,31,71.875,5,38,5\n4,26,F,Web designer,PS,None,BA Fine Art,17,3,3,3,9,8,8,8,8,8,8,8,8,8,8,80,100,53,84.44444444,37,90.625,20,26,15\n\n\n\n\n\n\nQuiz time!\n\n\n\n7) Which character is used to separate the values in the file Dabrowska_2018_L1_data.csv?\n\n\ncomma\n\n\ntab\n\n\nspace\n\n\ncolon\n\n\ndouble quotation mark\n\n\n\n\n\n¬†\n8) Which character is used to delineate the values?\n\n\ndouble quotation mark\n\n\ndot\n\n\nnone\n\n\nspace\n\n\nsingle quotation mark",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Impo`R`ting data</span>"
    ]
  },
  {
    "objectID": "ImpoRtingData.html#using-projects-in-rstudio",
    "href": "ImpoRtingData.html#using-projects-in-rstudio",
    "title": "6¬† ImpoRting data",
    "section": "6.3 Using Projects in RStudio",
    "text": "6.3 Using Projects in RStudio\nOne of the advantages of working with RStudio is that it allows us to harness the potential of RStudio Projects. Projects help us to keep our digital kitchen nice and tidy. In RStudio, each project has its own directory, environment, and history which means that we can work on multiple projects at the same time and RStudio will keep them completely separate from each other. This means that we can easily switch between cooking different dishes, say a gluten-free egg curry and vegan pancakes, without fear of accidentally setting the wrong temperature on the cooker or contaminating either dishes.\nRegardless of whether or not you‚Äôre a keen multi-tasker, RStudio Projects are a great way to help you keep together all the data, scripts, and outputs associated with a single project in an organised manner. In the long run, this will make your life much, much easier. It will also be an absolute lifesaver as soon as you need to share your work with others (e.g., your supervisor, colleagues, reviewers, etc.).\nTo create a new Project, open RStudio. Select ‚ÄòFile‚Äô, then ‚ÄòNew Project‚Ä¶‚Äô. Alternatively, you can click on the Project button in the top-right corner of RStudio and then select ‚ÄòNew Project‚Ä¶‚Äô.\nBoth options will open up a window with three options for creating a new project:\n\nNew Directory (which allows you to create an entirely new project for which you do not yet have a folder on your computer)\nExisting Directory (which allows you to create a project in an existing folder associated with your project)\nVersion Control (see Bryan).\n\nIn Section 6.2, you should have already saved the data that we want to import in a dedicated folder on your computer. Here, a folder is the same as a directory. Hence, you can select the second option: ‚ÄòExisting Directory‚Äô.\nThis will open up a new window. Click on ‚ÄòBrowse‚Ä¶‚Äô to navigate to the folder corresponding to your DƒÖbrowska (2019) project. If you followed my suggestions earlier on, this would be a folder called something along the lines of Dabrowska2019. Once you have selected the correct folder, select the option ‚ÄòOpen in a new session‚Äô and then click on ‚ÄòCreate Project‚Äô.\n\n\n\nNew project window\n\n\nCreating an RStudio project will have generated a new file in your folder project called Dabrowska2019.Rproj. You can see it in the Files pane of RStudio.\nNote that the extension of this newly created file is .Rproj. Such .Rproj files store information about your project options, which you will not need to edit. More usefully, .Rproj files can be used as shortcuts for opening your projects. To see how this works, shut down RStudio. Then, in your computer file system (e.g., using a File Explorer window on Windows and a Finder window on macOS), navigate to your project folder to locate your .Rproj file. Double-click on the file. This will automatically launch RStudio with all the correct settings for this particular project. Alternatively, you can use the Project button to open up a project from RStudio itself.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Impo`R`ting data</span>"
    ]
  },
  {
    "objectID": "ImpoRtingData.html#sec-WorkingDirectories",
    "href": "ImpoRtingData.html#sec-WorkingDirectories",
    "title": "6¬† ImpoRting data",
    "section": "6.4 Working directories",
    "text": "6.4 Working directories\nThe folder in which in the .Rproj file was created corresponds to your project‚Äôs working directory. Once you have opened a Project, you can see the path to your project‚Äôs working directory at the top of the Console pane in RStudio. The Files pane should also show the content of this directory.\nClick on the ‚ÄúNew Folder‚Äù icon in your Files pane to create a new subfolder called analysis. Your folder Dabrowska2019 should now contain an .RProj file and two subfolders called analysis and data.\n\n\n\nContents of the project folder as displayed by RStudio",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Impo`R`ting data</span>"
    ]
  },
  {
    "objectID": "ImpoRtingData.html#sec-ImportingDataCSV",
    "href": "ImpoRtingData.html#sec-ImportingDataCSV",
    "title": "6¬† ImpoRting data",
    "section": "6.5 Importing data from a .csv file in R",
    "text": "6.5 Importing data from a .csv file in R\nWe will begin by creating a new R script in which we will write the code necessary to import the data from DƒÖbrowska (2019)‚Äòs study in R. To do, so click on the analysis folder to open it and then click on the ‚ÄôNew Script‚Äô icon in the top-left corner of RStudio and select ‚ÄòR Script‚Äô. This will open a new, empty R script in your Source pane. It is best to always begin by saving a newly created file. Save this empty script with a computer- and human-friendly file name such as as 1_DataImport.R (Section 3.2).\nGiven that we want to import two .csv files, we are going to use the function read.csv(). You can find out what this function does by running the command ?read.csv or help(read.csv) in the Console to open up the documentation. This help file contains information about several base R functions used to import data. Scroll down to find the information about the read.csv() function. It reads:\nread.csv(file, header = TRUE, sep = \",\", quote = \"\\\"\",\n         dec = \".\", fill = TRUE, comment.char = \"\", ...)\nThis line from the documentation informs us that this function‚Äôs first argument is the path to the file from which we want to import the data. It also informs us that file is the only argument that does not have a default value (as it is not followed by an equal sign and a value). In this function, file is therefore the only argument that is compulsory. Hence, in theory, all we need to write to import the data is:\n\nL1.data &lt;- read.csv(file = \"data/Dabrowska_2018_L1_data.csv\")\n\nIn fact, we could shorten things even further as, unless otherwise specified, R will assume that the first value listed after a function corresponds to the function‚Äôs first argument which, here, is file. In other words, this command and the one above are equivalent:\n\nL1.data &lt;- read.csv(\"data/Dabrowska_2018_L1_data.csv\")\n\nThe file path \"data/Dabrowska_2018_L1_data.csv\" informs R that the data is located in a subfolder of the project‚Äôs working directory called data and that, within this data subfolder, the file that we want to import is called Dabrowska_2018_L1_data.csv. Note that the file extension must be specified (see Section 2.3). Note, also, the file path is separated with a single forward slash /. In R, this should work regardless of the operating system that you are using and, in order to be able to easily share your scripts with others, it is recommended that you use forward slashes even if you are running Windows (@sec-FoldersPaths).\nAlthough the command above did the job, in practice, it is often safer to spell things out further to remind ourselves of some of the default settings of the function that we are using in case they need to be checked or changed at a later stage. In this example, we will therefore import the data with the following command:\n\nL1.data &lt;- read.csv(file = \"data/Dabrowska_2018_L1_data.csv\",\n                    header = TRUE,\n                    sep = \",\",\n                    quote = \"\\\"\",\n                    dec = \".\")\n\nIn the command above, header = TRUE, explicitly tells R to import the first row of the .csv table as column headers rather than values. This is not strictly necessary because, as we saw from the function‚Äôs help file, TRUE is already set as the default value for this argument, but it is good to reminder ourselves of how this particular dataset is organised.\nThe arguments sep and quote specify the characters that, in this .csv file are used to separate the values on the one hand, and delineate them, on the other (see Section 2.5.1). As we saw above, DƒÖbrowska (2019)‚Äôs .csv files use the comma as the separator and the double quotation mark as the quoting character. Note that the \" character needs to be preceded by a backslash (\\) (we say it needs to be ‚Äúescaped‚Äù) because otherwise R will interpreted it as part of the command syntax, which would lead to an error. Finally, the argument dec = \".\" explicitly tells R that this .csv file uses the dot as the decimal point. In some countries, e.g., Germany and France, the comma is used to represent decimal places so, if you obtain data from a German or French colleague, this setting may need to be changed to dec = \",\" for the data to be imported correctly.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Impo`R`ting data</span>"
    ]
  },
  {
    "objectID": "ImpoRtingData.html#checking-that-the-data-have-been-correctly-imported",
    "href": "ImpoRtingData.html#checking-that-the-data-have-been-correctly-imported",
    "title": "6¬† ImpoRting data",
    "section": "6.6 Checking that the data have been correctly imported",
    "text": "6.6 Checking that the data have been correctly imported\nIt is crucial that you check whether your data has genuinely been correctly imported. Here‚Äôs a list of things to check (in that order):\n\nWere you able to run the import command without producing any errors? If you are getting an error, this is most likely due to a typo! Check the name of the file or press the tab key on your keyboard to get RStudio to auto-complete the file name for you. Also check that you have correctly written the name of the function and have all the necessary brackets and quotation marks.\nHas the R data object appeared in your Environment pane? Does it have the expected number of rows (observations) and columns (variables)? L1.data contains 90 observations and 31 variables. If you are getting different numbers, this might be because you previously opened the .csv file with Excel or that your computer converted it to Excel format automatically. To remedy this, ensure that you have followed all the steps described in Section 2.5.2.\nTo view the entire table, use the function View() with the name of your data object as the first and only argument, e.g., View(L1.data)2. This will open up a new tab in your Source pane that displays the full table, much like in a spreadsheet programme. You can search and filter the table in this tab, but you cannot edit it in any way (and that‚Äôs a good thing because, if we want to edit things, we want to ensure that we keep track of our changes in a script!). Browse through the table and check that everything ‚Äúlooks healthy‚Äù. This is much like visually inspecting and smelling ingredients before using them in a recipe. It‚Äôs not perfect but if something is really off, you should notice it. Check that each cell appears to have one and only one value.\nFinally, use the str() function to view the structure of your data object in a more compact way. Using the command str(L1.data) will display a summary of the data.frame in the Console. The summary begins by informing us that this data object is a data.frame, that contains 90 observations and 31 variables. Then, it lists all of the variables, followed by the type of values stored in this variable (e.g., character strings or integers) and then the first few values for each variable. Especially with very wide tables that contain a lot of variables, it is often easier to check the summary of the imported data with str() than with View(), though I would always recommend taking a few seconds to do both. This is time well spent!\n\n\n\n\n\n\n\nTask 1\n\n\n\nImport both data files from DƒÖbrowska (2019) using the read.csv function as described above. Save the first as the R object L1.data (as in the example above) and the second as L2.data. Then, answer the following questions.\na) In the two data files from DƒÖbrowska (2019), each row corresponds to one participant. How can L1 participants were included in this study?\n\n\n221\n\n\n17\n\n\n90\n\n\n31\n\n\n2790\n\n\n\n\n\nüê≠ Click on the mouse for a hint.\n\n\n¬†\nb) How many L2 participants were included in DƒÖbrowska (2019)‚Äôs study?\n\n\n90\n\n\n45\n\n\n67\n\n\n220\n\n\n306\n\n\n\n\n\nüê≠ Click on the mouse for a hint.\n\n\n¬†\nc) Compare the data frames containing the L1 and L2 data. Which datasets contains more variables?\n\n\nL2.data\n\n\nL1.data\n\n\nThey have the same number of variables\n\n\n\n\n\nüê≠ Click on the mouse for a hint.\n\n\n¬†\nd) You have saved the two datasets to your local R environment as L1.data and L2.data. What kind of R objects are L1.data and L2.data? You can find out by using the command class(). It takes just the name of the object as its only argument.\n\n\nlist\n\n\ncharacter\n\n\ntibble\n\n\ntable\n\n\ninteger\n\n\n\n\n\nüê≠ Click on the mouse for a hint.\n\n\n¬†\ne) Why does the L2 dataset contain the variable NativeLg, but not the L1 dataset?\n\n\nBecause, in this study, all L1 participants have English as their native language.\n\n\nBecause Dr. DƒÖbrowska decided not to collect this information for L1 participants.\n\n\nBecause some or all of the L1 participants did not wish to answer this question.\n\n\nBecause this variable was removed from the dataset for data protection reasons.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Impo`R`ting data</span>"
    ]
  },
  {
    "objectID": "ImpoRtingData.html#importing-tabular-data-in-other-formats",
    "href": "ImpoRtingData.html#importing-tabular-data-in-other-formats",
    "title": "6¬† ImpoRting data",
    "section": "6.7 Importing tabular data in other formats",
    "text": "6.7 Importing tabular data in other formats\nWe have seen how to load data from a .csv file into R by creating an R data frame object that contains the data extracted from a .csv file. But, as we saw in Chapter 2, not all datasets are stored as .csv files. Fear not: there are many import functions in R, with which you can import pretty much all kinds of data formats! This section introduces a few of the most useful ones for research in the language sciences.\nWe begin with the highly versatible function read.table(). The read.csv() is actually a variant of read.table(). You recall that when we called up the help file for the former using ?read.csv(), we obtained a combined help file for several functions, the first of which was read.table(). By specifying the following arguments as we did earlier, we can actually use the read.table() function to import our .csv file with exactly the same results:\n\nL1.data &lt;- read.table(file = \"data/Dabrowska_2018_L1_data.csv\",\n                    header = TRUE,\n                    sep = \",\",\n                    quote = \"\\\"\",\n                    dec = \".\")\n\nIn Chapter 2, we looked at a DSV file with a .txt extension that was separated by tabs. If we change the separator character argument to \\t for tab, we can import this dataset using the same read.table() function:\n\nOfflineLearnerData &lt;- read.table(file = \"data/offlinedataLearners.txt\",\n                                        header = TRUE,\n                                        sep = \"\\t\",\n                                        dec = \".\")\n\nFigure¬†6.1 displays an extract of the dataset AJT_raw_scores_L2.csv from an experimental study by Busterud et al. (2023). Although this DSV file has a .csv extension, it is actually separated by semicolons. Figure¬†6.1 shows that, in this dataset, the comma is used to show the decimal place.\n\n\n\n\n\n\nFigure¬†6.1: Extract of data file AJT_raw_scores_L2.csv from Busterud et al.\n\n\n\nIf you look carefully, you will also see that this dataset has some empty cells. This data can be downloaded from https://doi.org/10.18710/JBMAPT. It is delivered with a README file. As the name suggests, it is always a good idea to read README files! üôÉ This particular README explains, among other things, that in this file: ‚ÄúMissing data are represented by empty cells.‚Äù\nIf you call up the help file for the read.table() function again, you will see that there is an argument called na.strings. The default value is NA. When we import this dataset AJT_raw_scores_L2.csv from Busterud et al. (2023), we will therefore need to change this argument to ensure that empty cells are recognised as missing values.\nIn addition to the file path, the command that we can use to import this dataset therefore specifies the separator character as the semicolon (sep = \";\"), the character used to represent decimals (dec = \",\"), and empty cells (na.strings = \"\") for missing values:\n\nAJT.raw.scores.L2 &lt;- read.table(file = \"data/AJT_raw_scores_L2.csv\",\n                          header = TRUE,\n                          sep = \";\",\n                          dec = \",\",\n                          na.strings = \"\")\n\nOnce we have run this command, we should check that it has been correctly imported, for example using the View() function:\n\nView(AJT.raw.scores.L2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\nL3\nYears.of.L3\nGender\nL3.selfasses\nL3.grade\nL2.selfasses\nL2.grade\n\n\n\n\nBKRE452\n2\n4\n2\n2.5\n3\n4\n3\n\n\nSHEL876\n2\n4\n2\n3.0\n5\n6\n5\n\n\nSVI√ò510\n2\n4\n1\n4.0\n4\n6\n5\n\n\nEHEA194\n2\n4\n1\n2.0\n2\n6\n4\n\n\nERAO442\n2\n4\n2\n3.0\n3\n5\n4\n\n\nSEIO103\n2\n4\n1\n2.0\n3\n4\n3\n\n\nNMOI241\n2\n4\n1\n3.0\n4\n4\n4\n\n\nBBIE911/77\n2\n4\n1\nNA\n3\nNA\n4\n\n\nUUNO561\n2\n4\n1\n2.0\n3\n3\n4\n\n\nSMAO470\n2\n4\nNA\n3.0\nNA\n6\nNA\n\n\nSSID616\n2\n3\n1\n2.0\n2\n6\n4\n\n\nSHRI714\n2\n1\n2\n4.0\n3\n3\n3\n\n\nHALI620\n2\n1\n2\n5.0\n6\n4\n4\n\n\n\n\n\n\nHere, we can see that the data has been correctly imported as a table. The commas have been correctly converted to decimal points and the empty cells are now labelled NA.3\n\n\n\n\n\n\nUsing {readr} from the {tidyverse} to import tabular files\n\n\n\n\n\nThe {tidyverse} is a family of packages that we will use a lot in future chapters. This family of package includes the {readr} package which features some very useful functions to import data into R. You can install and load the {readr} package either individually or as part of the {tidyverse} bundle:\n\n# Install the package individually:\ninstall.packages(\"readr\")\n\n# Or install the full tidyverse (this will take a little longer):\ninstall.packages(\"tidyverse\")\n\n# Load the library:\nlibrary(readr)\n\n\n6.7.0.0.1 Delimiter-separated values (DSV) files\nThe {readr} package includes functions to import DSV files that are similar, but not identical to the base R functions explained above. The main difference is that the {readr} functions load data into an R object of type ‚Äútibble‚Äù rather than ‚Äúdata frame‚Äù. In practice, this will not make a difference for our work in future chapters. Hence, the following two commands can equally be used to import Dabrowska_2018_L1_data.csv:\n\n# Import .csv file using the base R function read.csv():\nL1.data &lt;- read.csv(file = \"data/Dabrowska_2018_L1_data.csv\", \n                    header = TRUE, \n                    quote = \"\\\"\")\n\nclass(L1.data)\n\n[1] \"data.frame\"\n\n# Import .csv file using the {readr} function read_csv():\nL1.data &lt;- read_csv(file = \"data/Dabrowska_2018_L1_data.csv\", \n                    col_names = TRUE, \n                    quote = \"\\\"\")\n\nclass(L1.data)\n\n[1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\" \n\n\nNote that instead of the argument header = TRUE, the {readr} function read_csv() takes the argument col_names = TRUE, which has the same effect. There are a few more differences between the two functions\nJust like read.csv() was a special case of read.table, the {readr} function read_csv() is a special variant of read_delim() that can be used to import data from all kinds of DSV files. Check the help file to find out all the options by running the command ?read_delim.\n\n\n6.7.0.0.2 Fixed width files\nFixed width files (with file extensions such as .gz, .bz2 or .xz) are a less common type of data source in the language sciences. In this text-based files, the values are separated not by a specific character such as comma or tab, but by a set amount of white/empty space other than a tab. Fixed width files can be loaded using the read_fwf() function from {readr}. Fields can be specified by their widths with fwf_widths() or by their positions with fwf_positions().\n\n\n\n\n\n6.7.1 Importing files from spreadsheet software\nIf your data is currently stored in a spreadsheet software (e.g., LibreOffice Calc, Google Sheets, or Microsoft Excel), you can export in to .csv or .tsv. However, if you do not wish to do this (e.g., because your colleague wishes to maintain the spreadsheet format that includes formatting elements such as bold or coloured cells), there are functions to import these file formats directly into R.\nFor LibreOffice Calc, you can install the {readODS} package and use its read_ods() function to import .ods files. Details about all the options can be found here https://www.rdocumentation.org/packages/readODS/versions/2.3.0.\n\n# Install from CRAN (safest option):\ninstall.packages(\"readODS\")\n\n# Or install the development version from Github:\nremotes::install_github(\"ropensci/readODS\")\n\n# Load the library:\nlibrary(readODS)\n\n# Import your .ods data:\nMyLibreOfficeData &lt;- read_ods(\"data/MyLibreOfficeTable.ods\",\n                            sheet = 1,\n                            col_names = TRUE,\n                            na = NA)\n\nVarious packages can be used to import Microsoft Excel file formats, but the simplest is {readxl}, which is part of the {tidyverse}. It allows users to import data in both .xlsx and the older .xls format. You can find out more about its various options here: https://readxl.tidyverse.org/.\n\n# Install from CRAN (safest option):\ninstall.packages(\"readxl\")\n\n# Or install the development version from Github:\nremotes::install_github(\"tidyverse/readxl\")\n\n# Load the library:\nlibrary(readxl)\n\n# Import your .ods data:\nMyExcelData &lt;- read_excel(\"data/MyExcelSpreadsheet.xlsx\",\n                            sheet = 1,\n                            col_names = TRUE,\n                            na = NA)\n\nFinally, there are also several ways to import data from Google Sheets. The simplest is to export your tabular data as a .csv, .tsv, .xslx, or .ods file by selecting Google Sheet‚Äôs menu option ‚ÄòFile‚Äô &gt; ‚ÄòDownload‚Äô. Then, you can simply import this downloaded file in R using the corresponding function as described above.\nHowever, if you want to directly import your data from Google Sheets and be able to dynamically update the analyses that you conduct in R even as the input data is amended on Google Sheets, you can use the {googlesheets4} package (which is part of the {tidyverse}):\n\n# Install from CRAN (safest option):\ninstall.packages(\"googlesheets4\")\n\n# Or install the development version from Github:\nremotes::install_github(\"tidyverse/googlesheets4\")\n\n# Load the library:\nlibrary(googlesheets4)\n\n# Import your Google Sheets data using your (spread)sheet's URL:\nMySheetsData &lt;- read_sheet(\"https://docs.google.com/spreadsheets/d/1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077\",\n                            sheet = 1,\n                            col_names = TRUE,\n                            na = \"NA\")\n\n# Or import your Google Sheets data using just the sheet's ID:\nMySheetsData &lt;- read_sheet(\"1U6Cf_qEOhiR9AZqTqS3mbMF3zt2db48ZP5v3rkrAEJY/edit#gid=780868077\",\n                            sheet = 1,\n                            col_names = TRUE,\n                            na = \"NA\")\n\n\n\n\n\n\n\nFigure¬†6.2: Dialogue box to consent to the {tidyverse} API Packages having access to your Google Drive to import directly from a Google Sheet. Read this carefully before clicking on ‚ÄòContinue‚Äô.\n\n\n\nNote that, as spreadsheet software typically allow users to have several ‚Äúsheets‚Äù or ‚Äútabs‚Äù within a file that each contains separate tables, the functions read_excel(), read_ods(), and read_sheet include an argument called sheet which allows you to specify which sheet should be imported. The default value is 1, which simply means that the first one is imported. If your sheets have names, you can also use its name as the argument value, e.g.:\n\nMyExcelData &lt;- read_excel(\"data/MyExcelSpreadsheet.xlsx\",\n                            sheet = \"raw data\",\n                            col_names = TRUE,\n                            na = NA)\n\n\n\n6.7.2 Importing data files from SPSS, SAS and Stata\nIf you‚Äôve recently switched from working in SPSS, SAS, or Stata (or are collaborating with someone who uses these programmes), it might be useful to know that you can also import the data files created by programmes directly into R using the {haven} package. Details of all the options can be found here: https://haven.tidyverse.org/.\n\n# Install from CRAN (safest option):\ninstall.packages(\"haven\")\n\n# Or install the development version from Github:\nremotes::install_github(\"tidyverse/haven\")\n\n# Load the library:\nlibrary(haven)\n\n# Import an SAS file\nMySASData &lt;- read_sas(\"MySASDataFile.sas7bdat\")\n\n# Import an SPSS file\nMySPSSDataFile &lt;- read_sav(\"MySPSSDataFile.sav\")\n\n# Import a Stata file\nMyStataData &lt;- read_dta(\"MyStataDataFile.dta\")\n\n\n\n6.7.3 Importing other file formats\nAs you can imagine, there are many more R packages and functions that are available and allow you to import all kinds of other file formats including .json, .html, various database formats and files with complex structures (see, e.g., https://rc2e.com/inputandoutput). In this textbook, we will only deal with DSV files (@sec-DSV).\n‚Äî‚Äî‚Äî To be added ‚Äî‚Äî‚Äî-\n\n\n6.7.4 Quick-and-dirty (aka bad!) ways to import data in R\n\n6.7.4.1 Loading data using RStudio\nWhy it‚Äôs a bad idea.\n\n\n6.7.4.2 Hardcoding file paths in R scripts\nWhy it‚Äôs a bad idea to copy-and-paste full file paths.\n\n\n\n\n\n\n‚ÄúHell is empty, and all the devils are {here}.‚Äù üòà\n\n\n\n\n\nWilliam Shakespeare, The Tempest\nThis box will contain information about using the {here} package.\n\n\n\n\n\n\n\nBryan, Jennifer. Let‚Äôs git started | happy git and GitHub for the useR. Open Education Resource. https://happygitwithr.com/.\n\n\nBusterud, Guro, Anne Dahl, Dave Kush & Kjersti Faldet Listhaug. 2023. Verb placement in L3 french and L3 german: The role of language-internal factors in determining cross-linguistic influence from prior languages. Linguistic Approaches to Bilingualism. John 13(5). 693‚Äì716. https://doi.org/10.1075/lab.22058.bus.\n\n\nBusterud, Guro, Anne Dahl, Dave Kush & Kjersti Faldet Listhaug. Replication data for Verb placement in L3 French and L3 German: The role of language-internal factors in determining cross-linguistic influence form prior languages. https://doi.org/10.18710/JBMAPT.\n\n\nDƒÖbrowska, Ewa. 2019. Experience, aptitude, and individual differences in linguistic attainment: A comparison of native and nonnative speakers. Language Learning 69(S1). 72‚Äì100. https://doi.org/10.1111/lang.12323.\n\n\nParsons, Sam, Fl√°vio Azevedo, Mahmoud M. Elsherif, Samuel Guay, Owen N. Shahim, Gisela H. Govaart, Emma Norris, et al. 2022. A community-sourced glossary of open scholarship terms. Nature Human Behaviour. Nature 6(3). 312‚Äì318. https://doi.org/10.1038/s41562-021-01269-4.",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Impo`R`ting data</span>"
    ]
  },
  {
    "objectID": "ImpoRtingData.html#footnotes",
    "href": "ImpoRtingData.html#footnotes",
    "title": "6¬† ImpoRting data",
    "section": "",
    "text": "‚ÄúDigital Object Identifiers (DOI) are alpha-numeric strings that can be assigned to any entity, including: publications (including preprints), materials, datasets, and feature films - the use of DOIs is not restricted to just scholarly or academic material. DOIs ‚Äúprovides a system for persistent and actionable identification and interoperable exchange of managed information on digital networks.‚Äù (https://doi.org/hb.html). There are many different DOI registration agencies that operate DOIs, but the two that researchers would most likely encounter are Crossref and Datacite.‚Äù (Parsons et al. 2022)‚Ü©Ô∏é\nNote that, unlike the functions that we have used so far, the View() function begins with a capital letter. R is a case-sensitive programming language, which means that view() and View() are not the same thing!‚Ü©Ô∏é\nIf you are wondering why some are labelled NA and some &lt;NA&gt;, that‚Äôs because cell F125 in this table contains a hyphen (-) rather than either a numeric value or nothing at all for a missing value. As a result, R is interpreting this variable (L3.grade) as a character string variable rather than a numeric variable. In string variables, NA is printed as &lt;NA&gt;. If we were to analyse this data further, we would need to convert this erroneous - to an NA and then convert the variable L3.data to a numeric variable. We can actually do that in the read.table() function by specifying that missing values are represented by either empty cells or cells containing only a hyphen using the argument na.strings = c(\"\", \"-\"). Download the data and try it out if you‚Äôre curious!‚Ü©Ô∏é",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Impo`R`ting data</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "2024. LibreOffice. Wikipedia. https://en.wikipedia.org/w/index.php?title=LibreOffice&oldid=1218520104.\n\n\nAbeysooriya, Mandhri, Megan Soria, Mary Sravya Kasu & Mark Ziemann.\n2021. Gene name errors: Lessons not learned. PLOS Computational\nBiology. Public 17(7). e1008984. https://doi.org/10.1371/journal.pcbi.1008984.\n\n\nBryan, Jennifer. Let‚Äôs git started | happy git and GitHub for the\nuseR. Open Education Resource. https://happygitwithr.com/.\n\n\nBusterud, Guro, Anne Dahl, Dave Kush & Kjersti Faldet Listhaug.\n2023. Verb placement in L3 french and L3 german: The role of\nlanguage-internal factors in determining cross-linguistic influence from\nprior languages. Linguistic Approaches to Bilingualism. John\n13(5). 693‚Äì716. https://doi.org/10.1075/lab.22058.bus.\n\n\nBusterud, Guro, Anne Dahl, Dave Kush & Kjersti Faldet Listhaug.\nReplication data for Verb placement in L3 French and L3 German: The role\nof language-internal factors in determining cross-linguistic influence\nform prior languages. https://doi.org/10.18710/JBMAPT.\n\n\nDƒÖbrowska, Ewa. 2019. Experience, aptitude, and individual differences\nin linguistic attainment: A comparison of native and nonnative speakers.\nLanguage Learning 69(S1). 72‚Äì100. https://doi.org/10.1111/lang.12323.\n\n\nDauber, Daniel. 2024. R for non-programmers: A guide for social\nscientists. Open Education Resource. https://bookdown.org/daniel_dauber_io/r4np_book/.\n\n\nDouglas, Alex, Deon Roos, Francesca Mancini & David Lusseau. 2024.\nAn introduction to R. https://intro2r.com/.\n\n\nLe Foll, Elen. 2022. Textbook English: A\ncorpus-based analysis of the language of EFL textbooks used in secondary\nschools in France, Germany and\nSpain. Osnabr√ºck University PhD thesis. https://doi.org/10.48693/278.\n\n\nParsons, Sam, Fl√°vio Azevedo, Mahmoud M. Elsherif, Samuel Guay, Owen N.\nShahim, Gisela H. Govaart, Emma Norris, et al. 2022. A community-sourced\nglossary of open scholarship terms. Nature Human\nBehaviour. Nature 6(3). 312‚Äì318. https://doi.org/10.1038/s41562-021-01269-4.\n\n\nPrat, Chantel S., Tara M. Madhyastha, Malayka J. Mottarella &\nChu-Hsuan Kuo. 2020. Relating natural language aptitude to individual\ndifferences in learning programming languages. Scientific\nReports. Nature 10(1). 3817. https://doi.org/10.1038/s41598-020-60661-8.\n\n\nR Core Team. 2024. R: A language and environment for statistical\ncomputing. R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nSchimke, Sarah, Israel de la Fuente, Barbara Hemforth & Saveria\nColonna. 2018. First language influence on second language offline and\nonline ambiguous pronoun resolution. Language Learning 68(3).\n744‚Äì779. https://doi.org/10.1111/lang.12293.\n\n\nSchweinberger, Martin. 2022. Data management, version control, and\nreproducibility. https://ladal.edu.au/repro.html.\n\n\nSilge, Julia. 2022. Janeaustenr: Jane Austen‚Äôs complete\nnovels. https://CRAN.R-project.org/package=janeaustenr.\n\n\nWinter, Bodo. 2019. Statistics for linguists: An introduction using\nR. Routledge. https://doi.org/10.4324/9781315165547.\n\n\nZiemann, Mark, Yotam Eren & Assam El-Osta. 2016. Gene name errors\nare widespread in the scientific literature. Genome Biology\n17(1). 177. https://doi.org/10.1186/s13059-016-1044-7.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "FurtherResources.html",
    "href": "FurtherResources.html",
    "title": "Appendix A ‚Äî Next-step resources",
    "section": "",
    "text": "A.1 Recommended resources specific to the language sciences",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>¬† <span class='chapter-title'>Next-step resources</span>"
    ]
  },
  {
    "objectID": "FurtherResources.html#recommended-resources-specific-to-the-language-sciences",
    "href": "FurtherResources.html#recommended-resources-specific-to-the-language-sciences",
    "title": "Appendix A ‚Äî Next-step resources",
    "section": "",
    "text": "Brezina, Vaclav. 2018. Statistics in Corpus Linguistics: A Practical Guide. Cambridge: Cambridge University Press. https://doi.org/10.1017/9781316410899.\nDesagulier, Guillaume. 2017. Corpus Linguistics and Statistics with R: Introduction to Quantitative Methods in Linguistics (Quantitative Methods in the Humanities and Social Sciences). Cham: Springer International Publishing.\nGries, Stefan Thomas. 2013. Statistics for linguistics with R: a practical introduction. 2nd revised edition. Berlin: De Gruyter Mouton.\nLADAL contributors. Tutorials of the Language Technology and Data Analysis Laboratory. https://ladal.edu.au/tutorials.html Open Educational Resource.\nLevshina, Natalia. 2015. How to do linguistics with R: Data exploration and statistical analysis. Amsterdam: John Benjamins.\nSchneider, Dr Gerold & Max Lauber. 2020. Statistics for Linguists. https://dlf.uzh.ch/openbooks/statisticsforlinguists/ Open Educational Resource.\nWinter, Bodo. 2019. Statistics for Linguists: An Introduction Using R. New York: Routledge. https://doi.org/10.4324/9781315165547.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>¬† <span class='chapter-title'>Next-step resources</span>"
    ]
  },
  {
    "objectID": "FurtherResources.html#further-open-educational-resources-in-no-particular-order",
    "href": "FurtherResources.html#further-open-educational-resources-in-no-particular-order",
    "title": "Appendix A ‚Äî Next-step resources",
    "section": "A.2 Further Open Educational Resources (in no particular order)",
    "text": "A.2 Further Open Educational Resources (in no particular order)\n\nDiez, David, Mine Cetinkaya-Rundel, Christopher Barr & OpenIntro. 2015. OpenIntro Statistics. Leanpub. https://leanpub.next/os.\nGuide to Effect Sizes and Confidence Intervals: https://matthewbjane.quarto.pub/guide-to-effect-sizes-and-confidence-intervals/\nHappy Git and GitHub for the useR: https://happygitwithr.com/\nQuarto & reproducibility: https://ucsbcarpentry.github.io/Reproducible-Publications-with-RStudio-Quarto/index.html\nModern Data Visualization with R: https://rkabacoff.github.io/datavis\nBuilding reproducible analytical pipelines with R: https://raps-with-r.dev/\nModern Plain Text Computing: https://mptc.io/content/01-content.html\nhttps://www.data-to-viz.com/\nInterpreting data visualisation: https://pressbooks.library.torontomu.ca/criticaldataliteracy/\nImprove your statistical inferences: https://lakens.github.io/statistical_inferences/\nWhat they forgot to teach you about R: https://rstats.wtf/\nIntroduction to Data Science: https://florian-huber.github.io/data_science_course/book/cover.html\nData Science in Education Using R: https://datascienceineducation.com/\nModels Demystified: A Practical Guide from t-tests to Deep Learning https://m-clark.github.io/book-of-models/\nData Visualization in R https://datavizf23.classes.andrewheiss.com/\nR for Data Science https://r4ds.hadley.nz/intro\nDauber, Daniel. 2024. R for Non-Programmers: A Guide for Social Scientists. https://bookdown.org/daniel_dauber_io/r4np_book/.\nBayes Rules! An Introduction to Applied Bayesian Modeling https://www.bayesrulesbook.com/\nFundamentals of Data Visualization by Claus O. Wilke https://clauswilke.com/dataviz/\nLearning statistics with R https://learningstatisticswithr.com",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>¬† <span class='chapter-title'>Next-step resources</span>"
    ]
  }
]