[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Literacy for the Language Sciences",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#who-is-this-book-for",
    "href": "index.html#who-is-this-book-for",
    "title": "Data Literacy for the Language Sciences",
    "section": "Who is this book for?",
    "text": "Who is this book for?\nThis textbook is intended as a very gentle introduction to basic principles of data literacy, statistics, and data visualisation using the programming language and environment R. The target audience are students and researchers in the language sciences, including (applied) linguistics, (first and second) language teaching, and language education research. The rationale for this textbook is based on my personal observations, in teaching and consulting both students and researcher colleagues, that many ‘introductory’ textbooks assume previous knowledge and skills that not all have or go through contents at too fast a pace for many humanities scholars who often come with little to no experience with programming and/or statistics.\nThe aim of this textbook is by no means to replace any of the brilliant existing textbooks aimed at imparting statistical literacy for linguistics research, but rather to provide a stepping stone towards being able to make the most of these wonderful existing resources. A (work-in-progress) list of next-step resources is included in Appendix A.\n\n\n\n\n\n\nFigure 1: Artwork encouraging beginner R learners by @allison_horst",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "OpenScholarship.html",
    "href": "OpenScholarship.html",
    "title": "1  Open Scholarship",
    "section": "",
    "text": "1.1 Open Source\nIn line with its aim to provide an accessible introduction to statistics and data visualisation, this textbook relies exclusively on open-source software and programming languages, foremost LibreOffice Calc, R and RStudio. Open source refers to software whose source code is available under a license that grants anyone the rights to study, modify, and distribute the software to anyone and for any purpose. If we think of a software application as a cake, the source code is like its recipe. It contains the list of ingredients and the steps to bake the cake. Open source means that the recipe is publicly available. You can access it, read it, and use it to bake the cake. You can also modify it to add your own twist, such as adding a new ingredient or making it vegan, and share it with others. In the context of software, this allows many people to collaborate, make improvements, and share their versions, resulting in better and more diverse software.\nUsing open-source software in this introductory textbook means that anyone2 can download, install and use the required software at no cost. However, it is very important to note that not all free software (freeware) is open source. Let us illustrate the difference by comparing different spreadsheet programmes as, in the following chapter, we will begin exploring tabular data structures in a spreadsheet programme.\nThe most most widely used spreadsheet programme to date is undoubtedly Microsoft Excel. Excel is a commercial, proprietary spreadsheet editor which forms part of the Microsoft 365 package. As such, to use Excel on your personal computer, you need to buy a license or be a member of an organisation (e.g., your university or company) that pays for such a license. It is true that Microsoft now also offers a free (functionally limited) web-based version of Excel, yet this still does not make it open source. This is because Microsoft does not share the source code of any Excel version, which means that, even if they are giving away free cake, we do not have the recipe to bake the cake ourselves should the company decide to start charging money for the cake or to no longer distribute it at all! Similarly, you may be familiar with a popular, web-based alternative to Excel: Google Sheets. Whilst it is (currently) free to use, as the name suggests, Google Sheets is owned by Google and is therefore not open source, either. By contrast, LibreOffice Calc is a project of The Document Foundation (TDF) that provides a popular, free, open-source office productivity software suite comparable to Microsoft 365 called LibreOffice. LibreOffice is developed collaboratively by very many different people across the world who all do so on a volunteer basis. The Document Foundation estimates that there are 200 million active LibreOffice users worldwide, about 25% of whom are thought to be students (figures from 2018, see LibreOffice 2024). Its popularity is likely due to the fact that it not only uses open formats (e.g., .odt and .ods), but can also open and save to a range of popular formats including those used by Microsoft (e.g., .docx and .xlsx).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Open Scholarship</span>"
    ]
  },
  {
    "objectID": "OpenScholarship.html#open-source",
    "href": "OpenScholarship.html#open-source",
    "title": "1  Open Scholarship",
    "section": "Quiz time!",
    "text": "Quiz time!\n1) Which of these is an open-source alternative to Microsoft Word?\n\n\nGoogle Docs\n\n\nLibreOffice Writer\n\n\nPages\n\n\n\n\n\n \n2) Which of these is an open-source alternative to Microsoft Powerpoint?\n\n\nKeynote\n\n\nLibreOffice Impress\n\n\nGoogle Slides\n\n\n\n\n\n \n3) Not only can software be open source, programming languages can, too. In fact, most modern programming languages are open source. In this book, we will focus on the open-source programming language R. Which of these is not an open-source programming language?\n\n\nJavaScript\n\n\nPython\n\n\nMATLAB\n\n\n\n\n\n \n4) There are also many open-source operating systems. Which of these is an open-source alternative to the operating system Windows?\n\n\nMacOS\n\n\nUbuntu\n\n\niOS\n\n\n\n\n\n \n\n\n\n\n\n\n\nTask 1\n\n\n\nYour first task is to download and install LibreOffice as we will use its spreadsheet editor, LibreOffice Calc, in the next few chapters.\n\nLibreOffice is available for Windows, Mac and Linux. You can download it from here: https://www.libreoffice.org/download/download-libreoffice/.\nYou will find detailed installation instructions here: https://www.libreoffice.org/get-help/install-howto/.\nDetailed documentation is also available in many different languages: https://documentation.libreoffice.org/en/english-documentation/",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Open Scholarship</span>"
    ]
  },
  {
    "objectID": "OpenScholarship.html#open-education",
    "href": "OpenScholarship.html#open-education",
    "title": "1  Open Scholarship",
    "section": "1.2 Open Education",
    "text": "1.2 Open Education\nThe web-based version of this textbook is published as an Open Educational Resource (OER; see Figure 1.1) under the Creative Commons license: CC BY-NC-SA. This means that it is free to read and use, as well as edit, remix, and expand upon, provided that:\n\nthe original author and source is mentioned (as indicated by BY),\nany derived version is not made into a commercial product (NC stands for non-commercial), and that\nany derived versions of this textbook (e.g., a translated version or a version adapted for history scholars) are also shared with this same license (SA stands for share alike).\n\nIn line with the principles of Open Education, all of the datasets that we will work with in this textbook have been published in Open Access, which means that we can freely use them to learn about statistics and data visualisation using real datasets from published research studies in applied linguistics and language education.\n\n\n\n\n\n\nFigure 1.1: OER sketch note by Yvonne Stry\n\n\n\n\n\n\n\n\n\nTips to go further\n\n\n\n\n\nThis chapter has simplified things considerably. To be considered open source, software distributions actually have to comply with ten criteria. You can read up on them here:\n\nhttps://opensource.org/osd\n\nTo find out more about the benefits of open-source software in the context of research, I recommend reading:\n\nhttps://book.the-turing-way.org/reproducible-research/open/open-source\n\nTo find out more about Open Educational Resources (OERs), I recommend exploring the following OER databases:\n\nhttps://oercommons.org/\nhttps://www.twillo.de/oer/web/\n\n\n\n\n\n\n\n\n2024. LibreOffice. Wikipedia. https://en.wikipedia.org/w/index.php?title=LibreOffice&oldid=1218520104.\n\n\nParsons, Sam, Flávio Azevedo, Mahmoud M. Elsherif, Samuel Guay, Owen N. Shahim, Gisela H. Govaart, Emma Norris, et al. 2022. A community-sourced glossary of open scholarship terms. Nature Human Behaviour. Nature 6(3). 312–318. https://doi.org/10.1038/s41562-021-01269-4.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Open Scholarship</span>"
    ]
  },
  {
    "objectID": "OpenScholarship.html#footnotes",
    "href": "OpenScholarship.html#footnotes",
    "title": "1  Open Scholarship",
    "section": "",
    "text": "Emprical data is based on what is experienced or observed rather than on theory alone.↩︎\nProvided that they have access to the internet and a functioning personal computer.↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Open Scholarship</span>"
    ]
  },
  {
    "objectID": "InstallingR.html",
    "href": "InstallingR.html",
    "title": "2  Installing R and RStudio",
    "section": "",
    "text": "Chapter overview\nThis chapter is designed to help you get started using R and RStudio, assuming no prior use of either. We will be covering the following topics:\nIf you already have some experience of using R and RStudio, please ensure that both are up-to-date. Whilst parts of this chapter will likely be revision, others may be the opportunity to learn some new tips about setting up and using R in RStudio, installing and citing packages. Once you’ve skimmed through this chapter, feel free to swiftly move on to the next chapter.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#why-learn-r",
    "href": "InstallingR.html#why-learn-r",
    "title": "2  Installing R and RStudio",
    "section": "2.1 Why learn R?",
    "text": "2.1 Why learn R?\nIn short, because R can do it all! 🙃 This statement is only a slight exaggeration: R is indeed a highly versatile programming language and environment that allows us to do a multitude of tasks relevant to the language sciences. These include data handling and processing, statistical analysis, creating effective and appealing data visualisations, web scraping, text analysis, generating reports in various formats, designing web pages, and interactive apps, and much, much more! 💪\nWhilst some will claim that R has a steep learning curve, this textbook aims to prove that the opposite is true! Whilst it’s fair to say that, as with all new things, it will take you a while to get the hang of it, once you’ve got started, you will see that your possibilities are (pretty much) endless and that learning how to do new things in R makes for fun and very rewarding challenges. What’s more, this textbook introduces the {tidyverse} approach to programming in R, which is particularly accessible to beginners. We will also use RStudio to access R, which makes things considerably more intuitive and generally easier to work with.\nWhat’s more, both R and the RStudio Desktop version that we will be using are free and open source (see Chapter 1), which means that they are accessible to all, regardless of their institutional affiliation or professional status. This is in contrast to proprietary statistical software such as SPSS for which you or your university needs to buy an expensive license. To get started in R, all you will need is access to the internet, a computer (unfortunately, a tablet will not suffice), and the intrinsic motivation to work your way through the basic skills taught in this textbook.\n\n“[U]sing R - it’s like the green and environment-friendly gardening alternative to buying plastic wrapped tomatoes in the supermarket that have no taste anyway.” (Martin Schweinberger 2022)\n\n\n\n\n\n\nFigure 2.1: “Tomato Harvest, Yellow & Red” by OakleyOriginals is licensed under CC BY 2.0.\n\n\n\n\nLast but not least, in choosing to learn R, you are entering a vibrant community of users. As an open-source programming environment, R is the product of many different people’s contributions. Everyday, new packages, functions, and resources are being developed, improved, and shared with the community. Given that R has evolved into one of the most popular languages for scientific programming (and has become “the de facto standard in the language sciences” Winter 2019: xiii), many of these have been created by scientists and are particularly well-suited to research workflows. Moreover, the R community is known for being welcoming, supportive, and inclusive (sadly, the same cannot be said of all communities in the computing world). This is reflected in the strong presence of many community-led initiatives such as RLadies and RainbowR, which encourage under-represented groups to participate in and contribute to the R community. 🤗\n\n\n\n\n\n\nFigure 2.2: Logo of the RLadies Ribeirão Preto meet-up group, one of many RLadies chapters.\n\n\n\n\n“Look, I am studying languages so why should I learn to code?” 🤔\nUsing scripts rather than GUI software will help you make your research less error-prone, more transparent, and sustainable. Being open-source, there are no restrictions as to who can run R code and older versions are available ensuring that exact reproduction is possible, even years later. As many other language scientists use R, you will be able to collaborate with others and understand other researchers’ R code. As we will see in a future chapter, in RStudio, it is also very easy to export R code and share your scripts, for example as part of an appendix to your research publication, in various formats (including .html that can be opened in any browser and .pdf).\nIn addition, learning to code in R is an excellent way to understand the basics of data literacy and statistical reasoning. These are skills that are highly valued among employers, both in academia and the industry. Many companies, public institutions (e.g., ministries, hospitals, national agencies) and NGOs hire data scientists who often work in R. And, even if you end up doing little to no coding yourself, understanding the basic principles of programming is undoubtedly a highly useful skill in the modern world.\n\n\n\n\n\n\nWhat about learning Python instead?\n\n\n\n\n\nSome of you may be wondering whether you should be learning Python rather than R. Both are widely used languages in scientific programming and data science. At the time of writing, there are more resources specifically aimed at linguists and education researchers in R than there are in Python simply because it is currently the most widely used language in these disciplines. Should you wish to learn Python at a later stage, many of the same principles that you will have learned in this textbook will apply: it should feel somewhat like learning Italian when you already speak Spanish or French.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#installing-r-and-rstudio",
    "href": "InstallingR.html#installing-r-and-rstudio",
    "title": "2  Installing R and RStudio",
    "section": "2.2 Installing R and RStudio",
    "text": "2.2 Installing R and RStudio\n\n2.2.1 What are R and RStudio? And why do I need both?\nAs a beginner, it’s easy to confuse R and RStudio, but it’s important to understand that they are two very different things. R is a programming environment for statistical computing and graphics that uses the programming language R. Think of it as the engine with which we will learn to perform lots of different tasks. RStudio, by contrast, is a set of tools, a so-called ‘integrated development environment’ (IDE). It makes working in R much more intuitive and efficient. If R is the engine of our car, you can imagine RStudio as our dashboard. Hence, even though we will later on appear to only be working in RStudio, R will actually be doing the heavy-lifting, under the hood.\n\n\n\n\n\n\n\n\n\n\n\n(a) Logo of the programming language and environment R\n\n\n\n\n\n\n\n\n\n\n\n(b) Logo of the IDE RStudio (RStudio® is a trademark of Posit Software, PBC)\n\n\n\n\n\n\n\nFigure 2.3: Even the two logos are easy to confuse, but remember that R and RStudio are two very different things!\n\n\n\n\n\n\n\n\n\nUsing other IDEs to work in R\n\n\n\n\n\nAt the time of writing, RStudio is the most widely used Integrated Development Environment (IDE) to work in R. However, it is worth noting that many other IDEs that can be used to access R. These include:\n\nJupyter notebook\nVisual Studio Code\nPyCharm\nEclipse\n\nWhilst this textbook will assume that everyone is working in RStudio, if you are already familiar with another IDE that works well with R, you are welcome to continue working in that IDE. Each IDE has a different feel to it and offers different functions so, ultimately, it’ll be up to you to find the one that suits you best!\n\n\n\n\n\n2.2.2 Installing R\n\nGo to the website of the Comprehensive R Archive Network (CRAN): https://cran.r-project.org.\nClick on the “Download R for …” link that matches your operating system (Linux, macOS or Windows), then:\n\nFor Windows, click on the top ‘base’ link, also marked as “install R for the first time” (Note that you should also use this link if you are updating your R version). On the next page, click on the top “Download R” link.\nFor MacOS, click on either the top .pkg link if you have an Apple silicon Mac (e.g., M1, M2, M3) or the second .pkg link, if you have an older Intel Mac.\nFor Linux, click on your Linux distribution and then follow the instructions on the following pages.\n\n\n\n\nOnce you have downloaded one of these R versions, navigate to the folder where you have saved it (by default, this will be your Downloads folder), and double click on the executable file to install R.\nFollow the on-screen instructions to install R.\nTest that R is correctly installed. On Windows and MacOS, navigate to your Applications folder and double click on the R icon. On Linux, open up R by typing R in your terminal. This should open up an R Console. You can type R commands into the Console after the command prompt &gt;. Type the following R code after the command prompt and then press enter: plot(1:10).\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Test command in the R Console\n\n\n\n\n\n\n\n\n\n\n\n(b) Resulting plot (note that the proportions of your plot may be different depending on the size of your window)\n\n\n\n\n\n\n\nFigure 2.4: Testing R\n\n\n\n✅ If you see the plot above, you have successfully installed and tested R and you can go on to installing RStudio.\n⚠️ If that’s not the case, make a note of the errors produced (copy and paste them into a text document or take a screenshot) and search for solutions on the Internet. It is very likely that many other people have already encountered the same problem as you and that someone from the R community has posted a solution online.\n\n\n\n\n\n\nWhat to do if you cannot get R and/or RStudio working on your computer\n\n\n\n\n\nThe aim of this chapter is to install both R and R Studio on your own computer so that you can write and run your own scripts locally (i.e., on your own computer without the need for an internet connection). In some cases, however, this might not be possible. For example, because the programmes are not available for your operating system, or because you do not have admin rights on your computer, or because your disk is full and you cannot delete anything. None of these situations are ideal to do research, but don’t give up on learning R: there is an alternative!\nYou can sign up to Posit Cloud. Posit Cloud will allow you to run R in RStudio in a browser (e.g., Firefox or Chrome) without having to install anything on your computer. Although Posit Cloud’s free plan is limited, it will suffice to learn the contents of this textbook. You will be able to follow the textbook in exactly the same way as everyone else. However, you will need a stable internet connection and you may find that you need to be a bit more patient as things are likely to run a little slower. If you decide to opt for the Posit Cloud solution, create a free account and then go straight to Setting up RStudio.\n\n\n\n\n\n2.2.3 Installing RStudio\nWhen you head over to their website, it may be confusing to you that the company that provides RStudio, Posit, also offers paid-for versions of RStudio and other paying services. Do not worry, we will not need any of these: These are products designed for companies and large organisations. The version of RStudio Desktop that we will be using, however, is completely free and, given that it is open source, even if Posit decided to stop working on this product one day, others in the R community would take over. Such is the beauty of open-source software! 🤗\n\nHead over to this page https://posit.co/download/rstudio-desktop/ to download the latest version of RStudio Desktop.\nAs you have already installed R, you can jump straight to step “2: Install RStudio”. The website should have detected which operating system your computer is running on, so that you can most likely simply click on the “Download RStudio Desktop…” button. Your download should start straight away.\n\nIf an incorrect operating system is detected, simply scroll down the page to find your operating system and download the corresponding version of RStudio.\n\n\n\n\nOnce you have downloaded RStudio, navigate to the folder where the downloaded file has been saved (by default, this will be your Downloads folder), and double click on the executable file to install RStudio.\nFollow the on-screen instructions to install RStudio.\n\nIf you run into any issues that you cannot solve with existing online posts, the Posit Community forums are a good place to ask for help.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#setting-up-rstudio",
    "href": "InstallingR.html#setting-up-rstudio",
    "title": "2  Installing R and RStudio",
    "section": "2.3 Setting up RStudio",
    "text": "2.3 Setting up RStudio\nFrom now on, we will only be accessing R through RStudio. When you open up RStudio for the first time, you might find the layout rather intimidating. The application window is divided into several sections, which we call ‘panes’. Each pane also has several tabs. Although it may seem overwhelming at first, you will soon see that these different panes and tabs will actually make life much easier.\n\n2.3.1 Global options\nBefore we get staRted properly, however, we need to change some of the default settings of RStudio. The first set of changes that we are going to make ensure that, each time we launch a new R session in RStudio, we are starting afresh.\nTo do so, head over to the ‘Tools’ dropdown menu and click on ‘Global Options’. Make sure that the first three boxes are unticked (see Figure 2.5 (a)). Under “Save workspace to .RData on exit”, select the option “Never”. Always starting afresh is good programming practice. It avoids any problems being carried over from previous R sessions. You can think of it like cooking in a freshly cleaned, tidy kitchen. It’s much safer than preparing a meal in a messy, possibly even contaminated kitchen! Or use the keyboard shortcut Ctrl/Command + ,\n\n\n\n\n\n\n\n\n\n\n\n(a) General tab\n\n\n\n\n\n\n\n\n\n\n\n(b) Code tab\n\n\n\n\n\n\n\nFigure 2.5: RStudio’s Global Options\n\n\n\nNext, under the ‘Global Options’ tab ‘Code’ of the ‘Global Options’ window, ensure that the option “Use native pipe operator” is ticked (see Figure 2.5 (b)). This is a new feature in R that is very useful so we will make use of it in this textbook. The other options are not relevant for now.\nFinally, head over to the ‘Pane Layout’ tab. From here, you can rearrange the panes of your RStudio window. To do so, click on the ﹀ symbols to get a dropdown menu corresponding to each pane. You can also select which tabs you would like to see in each pane. If you are already familiar with RStudio, feel free to stick to your favourite set-up. Personally, I use the panes layout below and, if you are new to R, I recommend that you select this layout, too. You can always go back to these ‘Global Options’ to change this setup at any stage. Don’t forget to click on ‘OK’ at the bottom of the Global Options page to save your settings. Then, the panes in your RStudio window should be ordered as in Figure 2.6 (b).\n\n\n\n\n\n\n\n\n\n\n\n(a) Panes Layout tab\n\n\n\n\n\n\n\n\n\n\n\n(b) Customised panes layout\n\n\n\n\n\n\n\nFigure 2.6: Recommended RStudio panes layout\n\n\n\n\n\n2.3.2 Testing RStudio\nIt is now time we tested whether RStudio is communicating well with R. To do so, let’s run the same test as in the R Console. This time, head over to the Console tab in the top right pane of your RStudio window and, after the command prompt &gt;, type: plot(1:10) and then press enter. You should see the same plot as earlier on (see Figure 2.4 (b)), appearing in the Plots tab of the bottom right pane of your RStudio window.\nIf you get the following error message Error in plot.new() : figure margins too large, this is because your bottom right pane is hidden from view or too small for the plot to be printed there. Click on the small two-window icon in the bottom-right corner if it is hidden (see Figure 2.7 (a)). Or, if it too small, click on the dividing line between the two right-hand side panes and, whilst still holding down the mouse button, drag up the line until it is about halfway up. Then, re-type the command plot(1:10) in the Console pane and press enter again. The plot should appear as in Figure 2.7 (b).\n\n\n\n\n\n\n\n\n\n\n\n(a) Hidden (minimised) bottom right pane\n\n\n\n\n\n\n\n\n\n\n\n(b) Now the dividing line between the two panes is halfway up and the plot has been successfully output in the Plots pane\n\n\n\n\n\n\n\nFigure 2.7: Testing that RStudio is communicating well with your R installation.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#installing-r-packages",
    "href": "InstallingR.html#installing-r-packages",
    "title": "2  Installing R and RStudio",
    "section": "2.4 Installing R packages",
    "text": "2.4 Installing R packages\n\n2.4.1 What are packages?\nYou now have a base installation of R. Base R is very powerful and comes with many standard packages and functions that R users use on a daily basis. If you click on the Packages tab in the bottom-right pane and scroll down, you will see that there are many packages available. Only a few are selected. These are part of the base R installation.\nIn addition to the members of the R Core Team who develop and maintain base R, thousands of R users develop and share additional R packages every day. These enable us to vastly increase the capacities of base R. Packages are a very helpful way to bundle together a set of functions, data, and documentation files so that other R users can easily download these bundles and add them to their local R installation.\nThroughout this textbook, the names of packages will be enclosed in curly brackets like this: {ggplot2}.\n\nQuiz time!\n1) Which of these packages is not part of base R?\n\n\n{ggplot2}\n\n\n{stats}\n\n\n{datasets}\n\n\n{graphics}\n\n\n\n\n\n \n2) Is it possible to create an R package that provides access to the full texts of all of Jane Austen’s published novels for computational text analysis in R?\n\n\nYes, pretty much anything is possible in R!\n\n\nNo way, that sounds impossible!\n\n\n\n\n\n \n3) Is the {janeaustenr} package installed as part of base R?\n\n\nYes\n\n\nNo\n\n\n\n\n\n\n\n\n2.4.2 Installing packages\nTo install a package, you will first need to download it from the internet. Packages are typically stored on different websites (online repositories), but the most trustworthy one and easiest to work with is CRAN (Comprehensive R Archive Network). To install the {janeaustenr} package from CRAN, simply type the following command in the Console pane and then type enter: install.packages(\"janeaustenr\").\nThis command will take a few seconds to run (or longer depending on how slow your internet connection is). You should then see a message in red in the console indicating (among other things that you can ignore) that the package has been successfully downloaded and its size (here: 1.5 megabyte), as well as the path to where the package’s content has been saved on your computer (see Figure 2.8). You do not need to worry about any of the other information.\n\n\n\n\n\n\nFigure 2.8: Screenshot showing that the package has been correctly installed.\n\n\n\nTo check that the package has been successfully downloaded and installed, head over to the Packages tab of the bottom-right pane and scroll down to the {janeaustenr} package, or search for it using the search window within this same tab. The {janeaustenr} package should now be visible, which tells us that the package is installed on your computer. Note, however, that the checkbox next to it is currently empty. This means that the package hasn’t been loaded in our current R session and therefore cannot be used yet. Note that whilst you only need to install each package once, you will need to load it every time we want to use it in a new R session. This is because, when we start a new R session, the kitchen is perfectly clean and tidy and everything is back in storage. And the good news is that we don’t even need to do the washing-up! 🙃\n\n\n2.4.3 Loading packages\nYou can think of base R as a fully functional student kitchen. It is rather small and only has the most essential ingredients and equipment, but it still has everything you need to cook simple, delicious meals. Downloading and installing additional packages is like buying fancier ingredients (these are packages that include datasets) or more sophisticated and specialised kitchen devices (these are packages that include additional functions).\nOnce you have downloaded and installed a new package, it is put in storage (either in the fridge or in a kitchen cupboard). In this case, the package appears in your Packages tab, but is not yet selected. If you want to use the new ingredient or the piece of equipment that was delivered in the new package, you need to get it out of the fridge or the cupboard and place it on the kitchen counter. This is the equivalent to loading a package. Once they are unpacked (i.e., installed), packages are usually referred to as libraries.\nSo the first thing we now need to do to be able to analyse Jane Austen’s novels in R is to load the {janeaustenr} library. The command to do is library(janeaustenr). Type this command in the Console and press enter. Ideally, it should look like nothing has happened. Indeed, if you do not get an error message (in red), then the library has been successfully loaded. We can check that this is actually the case by looking again for the {janeaustenr} in the Packages tab. The checkbox should now be ticked. ⚠️ Note that, rather confusingly, both error and warning messages are printed in red but, for now, we will only worry about error messages. Most warning messages can safely be ignored.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#package-documentation",
    "href": "InstallingR.html#package-documentation",
    "title": "2  Installing R and RStudio",
    "section": "2.5 Package documentation",
    "text": "2.5 Package documentation\nTo find out more about any package or function, simply use the command help() or its shortcut ?. For example, to find out more about the {janeaustenr} package, enter the command help(janeaustenr) or ?janeaustenr in the Console. The help file will open up in the Help tab of the bottom-right pane. It contains the name of the package and a short description, as well as the name of the package maintainer, Julia Silge, and some additional links.\nOne of these links takes us to the package creator’s GitHub repository. This is where we can find a source code for the package, should we want to check how it works under the hood, or amend it in any way. Click on this link and scroll down the package’s GitHub page to consult its README file. This document informs us that the package includes plain text versions of Jane Austen’s six completed, published novels and tells us under what name they are stored within the library. For example, to access Pride and Prejudice, we need to load the library object prideprejudice. Note that the object names in R cannot contain spaces or hyphens.\nPick your favourite Jane Austen novel and enter its corresponding object name in the Console, e.g., emma. The entire novel will be printed in the Console output! You can print only a few lines by selecting them within square brackets, e.g., the command emma[20:25] will only print lines 20 to 25 of the object emma (see Figure 2.9).\n\n\n\n\n\n\nFigure 2.9: Screenshot showing a selection of lines from the object emma (note that you can adjust the size of the Console pane to see more or less of the text at any one time).\n\n\n\nTo find out more about a dataset or function within a package, use the functions help() or ?, e.g., help(emma) or ?emma. In this case, the help file provides us with a short description of this object and a link to the original source from which the package creator obtained the novel (which is in the public domain, otherwise it would not be possible to share it in this way).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "InstallingR.html#citing-r-packages",
    "href": "InstallingR.html#citing-r-packages",
    "title": "2  Installing R and RStudio",
    "section": "2.6 Citing R packages",
    "text": "2.6 Citing R packages\nWhen we use a package that is not part of base R, it is very important to reference the package adequately. There are two main reasons for doing this. For a start, the people who create and maintain these packages largely do so in their free time and they deserve full credit for their incredibly valuable work and contribution to science. Hence, whenever you use a package for your research, you should cite it, just like you would other sources.\nThe help page of the {janeaustenr} package already informed us that the maintainer of the package is Julia Silge. To get a full citation, however, we should use the citation() function. Enter citation(\"janeaustenr\") in the Console to find out how to cite this package.\nNote that the recommended bibliographic reference also includes the package version, which is important for reproducibility as the package may evolve and someone wanting to reproduce your analysis (and this may well be future you!) will need to know which version you used. This is the second main reason why we should be diligent about citing the packages that we used. In a research report, thesis, or academic article, you could cite the {janeaustenr} package like this:\n\nWe used the janeaustenr package (Silge 2022) to access Jane Austen’s six published novels in R (R Core Team 2024).\n\nYou can see the full references by hovering on the in-text citation links or by going to the References section of this book.\n\n\n\n\n\n\nMore about referencing packages\n\n\n\n\n\nYou may also want to install the {report} package, which includes a number of useful functions for citing R versions and R packages:\n\nreport::report_system()\n\nAnalyses were conducted using the R Statistical language (version 4.3.1; R Core\nTeam, 2023) on macOS Sonoma 14.4.1\n\nreport::cite_packages()\n\n  - Makowski D, Lüdecke D, Patil I, Thériault R, Ben-Shachar M, Wiernik B (2023). \"Automated Results Reporting as a Practical Tool to Improve Reproducibility and Methodological Best Practices Adoption.\" _CRAN_. &lt;https://easystats.github.io/report/&gt;.\n  - Moroz G (2020). _Create check-fields and check-boxes with checkdown_. &lt;https://CRAN.R-project.org/package=checkdown&gt;.\n  - R Core Team (2023). _R: A Language and Environment for Statistical Computing_. R Foundation for Statistical Computing, Vienna, Austria. &lt;https://www.R-project.org/&gt;.\n  - Silge J (2022). _janeaustenr: Jane Austen's Complete Novels_. R package version 1.0.0, &lt;https://CRAN.R-project.org/package=janeaustenr&gt;.\n  - Xie Y (2023). _knitr: A General-Purpose Package for Dynamic Report Generation in R_. R package version 1.45, &lt;https://yihui.org/knitr/&gt;. Xie Y (2015). _Dynamic Documents with R and knitr_, 2nd edition. Chapman and Hall/CRC, Boca Raton, Florida. ISBN 978-1498716963, &lt;https://yihui.org/knitr/&gt;. Xie Y (2014). \"knitr: A Comprehensive Tool for Reproducible Research in R.\" In Stodden V, Leisch F, Peng RD (eds.), _Implementing Reproducible Computational Research_. Chapman and Hall/CRC. ISBN 978-1466561595.\n\nreport::report_packages()\n\n  - report (version 0.5.8; Makowski D et al., 2023)\n  - checkdown (version 0.0.12; Moroz G, 2020)\n  - R (version 4.3.1; R Core Team, 2023)\n  - janeaustenr (version 1.0.0; Silge J, 2022)\n  - knitr (version 1.45; Xie Y, 2023)\n\n\nTo find out more, it is also worth reading Steffi LaZerte’s blog post on “How to cite R and R packages”: https://ropensci.org/blog/2021/11/16/how-to-cite-r-and-r-packages/.\n\n\n\n\n\n\n\nR Core Team. 2024. R: A language and environment for statistical computing. R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nSilge, Julia. 2022. Janeaustenr: Jane austen’s complete novels. https://CRAN.R-project.org/package=janeaustenr.\n\n\nWinter, Bodo. 2019. Statistics for linguists: An introduction using r. Routledge. https://doi.org/10.4324/9781315165547.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing R and RStudio</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html",
    "href": "GettingStaRted.html",
    "title": "3  Getting staRted",
    "section": "",
    "text": "Chapter overview\nNow that you have installed and tested R and RStudio, in this chapter, you will learn how to:\nIf you are already familiar with the basics of R and are keen to learn more about doing statistics in R, you can skip most of this chapter. That’s said, it’s probably not a bad idea to have a go at the quiz questions and the final task to refresh your memory.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting staRted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#using-the-console",
    "href": "GettingStaRted.html#using-the-console",
    "title": "3  Getting staRted",
    "section": "3.1 Using the Console",
    "text": "3.1 Using the Console\nThis is what you did in the previous chapter when you tested that RStudio was working properly (using the command: plot(1:10)).\nOne way to write R code in RStudio is to use the Console. If you set up RStudio as recommended here, the Console should be in your top-right pane. You can type a line of code immediately after the command prompt &gt; and press “Enter”.\nData input is the most basic operation in R. Try inputting a number by typing it out in the Console and then pressing “Enter”. R will interpret the number and return it. You can input both integers (whole numbers, e.g., 13) and decimal numbers (e.g., 0.5).\n\n\n\n\n\n\nFigure 3.1: Inputting numbers in the Console\n\n\n\nR can handle not only numbers but also text data, known as “character strings” or just “strings”. Strings must always be enclosed in quotation marks. You can choose to use either double quotation marks \" \" or single quotation marks ' ', but it is important to be consistent. In this textbook, we will use double quotation marks throughout.\nTry first inputting a single word and then an entire sentence in the Console.\n\n\n\n\n\n\nFigure 3.2: Inputting strings in the Console\n\n\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n1) What happens if you enter a word without quotation marks?\n\n\nR automatically wraps the word in quotation marks and processes it as a string.\n\n\nR returns an error message because it interprets the word as an object name or command.\n\n\nR returns an error indicating that you probably mistyped the word.\n\n\nR returns an error message indicating that it expected a number.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting staRted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#doing-maths-in-r",
    "href": "GettingStaRted.html#doing-maths-in-r",
    "title": "3  Getting staRted",
    "section": "3.2 Doing maths in R",
    "text": "3.2 Doing maths in R\nR can also be used as a very powerful calculator. The lines of code in Figure 3.3 demonstrate mathematical operations involving addition (+), subtraction (-), division (/), and multiplication (*). Try out a few yourself!\n\n\n\n\n\n\nFigure 3.3: Using the R Console as a calculator\n\n\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n2) Try entering 13^2 in the Console. What does the ^ (caret) operator do?\n\n\nThe ^ operator is used to calculate the modulus of 13, with 2 as the base.\n\n\nThe ^ operator performs an exponentiation operation.\n\n\nThe ^ operator is used to create a vector with 13 occurrences of the integer 2.\n\n\n\n\n\n \n3) Compare 13*13 with 13 * 13. What is the difference in the output?\n\n\nAdding a space generates an error.\n\n\nThere is no difference.\n\n\nIt is impossible to add a space in the R Console.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting staRted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#working-with-r-objects",
    "href": "GettingStaRted.html#working-with-r-objects",
    "title": "3  Getting staRted",
    "section": "3.3 Working with R objects",
    "text": "3.3 Working with R objects\nSo far, we have used the Console like a calculator. It’s important to understand that, just like with a standard calculator, the output of all of our operations was not saved anywhere.\nR allows us to store values, sequences of values, and the results of computations in so-called “objects” for later use. We use the assignment operator (&lt;-) to assign a value or sequence of values to an object name.\nWrite out the following line to create an object called my.favourite.number that contains your own favourite number.\n\nmy.favourite.number &lt;- 13\n\nWhen you enter this line in the Console and press “Enter”, it should look like nothing happened: R does not return anything in the Console. Instead, it saves the output in an object called my.favourite.number. However, if you look in your Environment pane, you should see that an object has appeared (Figure 3.4).\n\n\n\n\n\n\nFigure 3.4: Created object in the Environment pane\n\n\n\nTo save an object containing a character string, we use quotation marks. Create an object called my.favourite.word containing your favourite word (in any written language of your choice).\n\nmy.favourite.word &lt;- \"empathy\"\n\nYour Environment pane should now contain two objects. You can print the content of a stored object by entering the object name in the Console and then pressing “Enter” (see Figure 3.5).\nTip: If you feeling lazy or simply want to avoid making a typo, you can type only the first few letters of an object name and then press the “Tab” key (↹ or ⇥). RStudio will then give you a drop-down menu with possible options. Select the one you want by clicking on it or pressing “Enter”.\n\n\n\n\n\n\nFigure 3.5: Calling up stored objects in the Console to view their content\n\n\n\nThese two objects are of different types. We can use the class() function to find out which type of object an object is.\n\n\n\n\n\n\nFigure 3.6: Using the class() function\n\n\n\nHere, my.favourite.number is a numeric object, while my.favourite.word is a character object.\nObject naming conventions in R are fairly flexible. We can use dots (.), underscores (_) and capital letters to make our object names maximally informative and easy for us humans to read. However, spaces and other symbols are not allowed. All of these options work:\n\nword2 &lt;- \"cheerful\"\nmy.second.word &lt;- \"cheerful\"\nmy_second_word &lt;- \"cheerful\"\nMySecondWord &lt;- \"cheerful\"\n\n\n\n\n\n\n\nFigure 3.7: Environment pane showing all of the objects currently stored in the R session environment\n\n\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n4) Which of these object names are not allowed in R? Try to create an object with each of these names and see if you get an error message or not.\n\n\n1TopWord\n\n\nmy-favourite-word\n\n\nTop1Word\n\n\nBestWordEver!\n\n\ntop word\n\n\nAgnès.Favourite.Word\n\n\n\n\n\n😇 Hover for a hint\n\n\n\n\nObject names should not contain spaces or symbols like !, nor should they contain hyphens as the hyphen is reserved for the mathematical operator “minus”. Digits can be used anywhere except at the beginning of an object name. And whilst it is possible to have special characters such as accented letters like “è”, it is not recommended that you use them for object names.\nObject names are unique. If you create a new object with an existing object name, it will overwrite the existing object with the new one. In other words, you will lose the values that you saved in the original object. Try it out by running this line and observing what happens in your Environment pane:\n\nword2 &lt;- \"surprised\"\n\nEarlier on, you created an object called word2 which contained the string “cheerful”. But, by running this new line of code, “cheerful” has been replaced by the string “surprised” - with no warning that you were about to permanently delete “cheerful”! 😲\nThe command to delete a single object from your environment is remove() or rm(). Hence, to permanently delete the object MySecondWord, you can use either of these commands:\n\nremove(MySecondWord)\nrm(MySecondWord)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting staRted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#writing-and-saving-.r-scripts",
    "href": "GettingStaRted.html#writing-and-saving-.r-scripts",
    "title": "3  Getting staRted",
    "section": "3.4 Writing and saving .R scripts",
    "text": "3.4 Writing and saving .R scripts\nIf we shut down Rstudio right now, we will lose all of our work so far. This is because the objects that we have created are only saved in the environment of our current R session. Whilst this might sound reckless, it is actually a good thing: In the previous chapter, we set our Global Options settings in RStudio such that, whenever we restart RStudio, we begin with a clean slate, or a perfectly clean and tidy kitchen. We don’t want any dirty dishes or stale ingredients lying around when we enter the kitchen! With this in mind, close RStudio now and open it again to start a new R session.\nYou should now have an empty history in your Console pane and an empty Environment pane. Whilst nobody wants to start cooking in a messy kitchen, it’s also true that, if we want to remember what we did in a previous cooking/baking session, we should write it down. The pages of our recipe book are .R scripts. In the following, we will see that writing scripts is much better than running everything from the Console. It allows us to save and rerun our entire analysis pipeline any time we want. It also ensures that our analyses are reproducible and saves us time as we don’t have to rewrite our code every time. Crucially, if we made a mistake at any stage, we can go back and correct it and rerun the entire corrected script at the click of a button.\nThere are three ways to create a new .R script in RStudio. Pick the one that you like best:\n\nNavigate to the top menu item “File”, then select “New File”, then click on “R Script”.\nClick on the icon with a white page and a green plus button in the top left corner of the tool bar.\nUse the keyboard shortcut Shift + Ctrl/Cmd + N.\n\nWhichever option you chose, RStudio should have opened an empty file in a fourth pane. This is the “Source pane” and it should have appeared in the top-left corner of your RStudio window.\nWe can now type our code in this empty .R script in the Source pane, just like we did in the Console. Type the following lines of code:\n\n13*13\nmy.favourite.number &lt;- 13\nmy.favourite.word &lt;- \"empathy\"\n\nYou will have noticed that when you pressed “Enter” after every line, nothing happened: Nowhere can we see the result of 13*13, nor have our two objects been saved to the environment as Environment pane remains empty (see Figure 3.8). Just like a recipe for a cake is not an actual, delicious cake, but simply a set of instructions, a script is only a text file that contains lines of code as instructions. For these instructions to be executed, we need to send them to the R Console where they will be interpreted as R code.\n\n\n\n\n\n\nFigure 3.8: Writing code in a script\n\n\n\nTo send a line of code to the Console, or “run” a line of code, select the line that you want to run, or place your mouse cursor anywhere within that line and then click on the ‘Run’ button (in the top-right corner of the pane, see Figure 3.8) or use the keyboard shortcut Ctrl/Cmd + Enter.\nRun the three lines of code of your script using these two options and check that a) you are seeing the result of the mathematical operation in the Console output and b) two objects have been added to your environment.\nIt is now very easy to rerun this script any time we want to redo this calculation and recreate these two R objects. However, our .R script is not yet saved! RStudio is warning us about this by highlighting the file name “Untitled1*” in red (see Figure 3.8). Just like with any unsaved computer file, if we were to shut RStudio down now, we would loose our work. So, let us save this .R script locally, that is on our own computer. To do so either:\n\nNavigate to the top menu item “File” and then click on “Save”,\nClick on the save icon 💾, or\nUse the keyboard shortcut Ctrl/Cmd+ S.\n\nGive your script a meaningful file name. Remember that file names should be both computer-readable and human-readable. If you navigate to the folder where you saved your .R script, you should see that its file extension is .R. You should also see that it is a tiny file because it contains nothing more than a few lines of text. If you double click on an .R file, RStudio should automatically open it. However, if you wanted, you could open .R files with any text-processing software, such as LibreOffice Writer or Microsoft Word.\n\n3.4.1 Writing comments\nJust like in a recipe book, in addition to writing the actual instructions, we can also write some notes, for example to remind ourselves of why we did things in a particular way or for what occasion we created a special dish. In programming, notes are called “comments” and they are typically preceded by the # symbol.\nThus, if a line starts with a # symbol, we say that it is “commented out”. RStudio helpfully displays lines that are commented out in a different colour. These lines will not be interpreted as code even if you send them to the Console. Write the following lines in your script and try to run them.\n\n#13^13\n\n#StringObject3 &lt;- \"This line has been commented out so the object will not be saved in the environment even if you try to run it.\"\n\nAs you can see, nothing happens. You can also add comments next to a line of interpretable code. In this case, the code is interpreted up until the #. This can be helpful to make a note of what a line of code does, e.g.:\n\nsqrt(169) # Here the sqrt() function will compute the square root of 169.\n\nIt is good practice to comment your code when working in an .R script. Comments are crucial for other people to understand what your code does and how it achieves that. But even if you are confident that you are the only person who will ever use your code, it is still a very good idea to use comments to make notes documenting your intentions and your reasoning as you write your script.\nFinally, writing comments in your code as you work through the examples in this book is a great way to reinforce what you are learning. From this chapter onwards, I recommend that, for each chapter, you create an .R script documenting what you have learnt, adding lots of comments to help you remember how things work. This is generally more efficient (and less error-prone!) than trying to take notes in a separate document (e.g., in a Microsoft Word file) or on paper.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting staRted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#using-relational-operators",
    "href": "GettingStaRted.html#using-relational-operators",
    "title": "3  Getting staRted",
    "section": "3.5 Using relational operators",
    "text": "3.5 Using relational operators\nNow that we have saved some objects in our environment, we can use them in calculations. Try out the following operations (and any other that take your fancy) with your own favourite number:\n\nmy.favourite.number / 2\n\n[1] 6.5\n\nmy.favourite.number*my.favourite.number\n\n[1] 169\n\nsqrt(my.favourite.number)\n\n[1] 3.605551\n\nsqrt(my.favourite.number*my.favourite.number)\n\n[1] 13\n\n\nWe can also use relational operators such &gt;, &lt;, &lt;=, &gt;=, == and != to make comparisons. Experiment with the following commands to understand what these relational operators do:\n\nmy.favourite.number &gt; 10\nmy.favourite.number &lt; 10\nmy.favourite.number == 25\nmy.favourite.number &gt;= 13\nmy.favourite.number &lt;= -13\nmy.favourite.number != 25\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n5) What is the relational operator that checks whether a value is “more than or equal to” another value?\n\n\n\n\n\n\n😇 Hover for a hint\n\n\n \n6) What is the relational operator that checks whether a value “is not equal to” another value?\n\n\n\n\n\n\n😇 Hover for a hint\n\n\n\n\nThe relational operators == and != can also be used with character objects. Find out how they work by first creating a new character object with a word that was added to the 2025 edition of the Petit Larousse dictionary:\n\nNew.French.Word &lt;- \"écogeste\"\n\nThen copy these lines of code to test how these relational operators work with string characters.\n\nNew.French.Word == \"écogeste\" \nNew.French.Word != \"trottinettiste\"\n\n\n\n\n\n\n\nQuiz time!\n\n\n\n7) Why does this line of code return FALSE even though New.French.Word was assigned the character string “écogeste”?\n\nNew.French.Word == \"ecogeste\"\n\n[1] FALSE\n\n\n\n\nBecause R automatically removed the accent as object names must be in English.\n\n\nBecause == cannot be used to compare character strings in French.\n\n\nBecause \"écogeste\" and \"ecogeste\" are two different strings in R.\n\n\n\n\n\n \n8) Why does this line of code return FALSE even though New.French.Word was assigned the character string “écogeste”?\n\nNew.French.Word == \" écogeste\"\n\n[1] FALSE\n\n\n\n\nBecause string objects cannot include any special characters. This includes spaces.\n\n\nBecause R is case-sensitive.\n\n\nBecause this string includes an additional space character.\n\n\n\n\n\n \n9) Why does this line of code return FALSE even though New.French.Word was assigned the character string “écogeste”?\n\nNew.French.Word == \"Écogeste\"\n\n[1] FALSE\n\n\n\n\nBecause strings should never start with a capital letter.\n\n\nBecause this word is not in the dictionary of the Académie Française.\n\n\nBecause R is case-sensitive.\n\n\n\n\n\n \n10) Why does this line of code return FALSE even though New.French.Word was assigned the character string “écogeste”?\n\nNew.French.Word != \"écogeste\"\n\n[1] FALSE\n\n\n\n\nBecause this command asks whether New.French.Word is not equal to \"écogeste\".\n\n\nBecause écogeste is no longer a new French word.\n\n\nBecause this string is in a different text encoding.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting staRted</span>"
    ]
  },
  {
    "objectID": "GettingStaRted.html#dealing-with-errors",
    "href": "GettingStaRted.html#dealing-with-errors",
    "title": "3  Getting staRted",
    "section": "3.6 Dealing with errors",
    "text": "3.6 Dealing with errors\nWhen R cannot interpret your code, the Console will display an error message in red. A large part of learning to code is really about learning how to interpret these error messages and developing an intuition for the most common reasons why errors occur.\n\n\n\n\n\n\nFigure 3.9: The process of fixing programming errors is called “debugging” and often involves an array of emotions (artwork by @allison_horst).\n\n\n\nAs you begin your journey learning to code in R, you are very likely to encounter one problem on a regular basis. So let’s take a closer look at that error. Copy and paste this exact line of code and try to run it in your R Console:\n\nsqrt(my.favourite.number\n\nNotice that, in this erroneous line of code, we have (intentionally) forgotten to include the final bracket. As a result, after you hit “Enter”, the Console output shows a “+” instead of the result of the mathematical operation. The “+” indicates that the line is incomplete and therefore cannot be interpreted yet. R is therefore asking you to complete your line of code.\n\n\n\n\n\n\nFigure 3.10: Incomplete function in console\n\n\n\nThere are two ways to fix this. The first method is to complete the line of code directly in the Console. In this case, this means adding the closing bracket “)” after the “+” and hitting “Enter”. Now that the line has been completed, R is able to interpret it as an R command and will output the result of the operation.\nIf you are running a line of code just once, from the Console, this first method is fine. As we have seen above, however, most of the time, you will write your code in a script rather than in the Console. So this first, on-the-fly, method is only recommendable for lines of code that you will genuinely only need once. These include commands to install packages, like install.packages(\"janeaustenr\"), or to get consult documentation files, e.g., help(janeaustenr).\nGiven that we will mostly be working in scripts, let’s now generate this error from an .R script. To do so, copy and paste the erroneous line of code in your .R script and try to run it by either clicking on the “Run” icon or using the shortcut Ctrl/Cmd + Enter:\n\nsqrt(my.favourite.number\n\nAgain, our incomplete line of code cannot be interpreted and the “+” symbol appears in the Console. Now, correct the error in your script by adding the missing “)” and try to run the command again:\n\nsqrt(my.favourite.number)\n\nEven though we have corrected the problem, we now get an error! 🤯 At first sight, this does not make sense, but look carefully at what happened in the Console: The line of code that R tried to interpret is sqrt(my.favourite.number + sqrt(my.favourite.number), i.e., the combination of the incomplete version of the command plus the complete one. This is obviously nonsense and R tells us so by outputting an error message!\n\n\n\n\n\n\nFigure 3.11: Error message in console\n\n\n\nTo be able to enter a new line of code, we must see the command prompt &gt; in the Console. So, let’s generate the error again and learn how to fix it with the second method. Add this erroneous line to your script again and run it:\n\nsqrt(my.favourite.number\n\nThe + situation arises again, but we will now solve it using the second method. Head over to the Console and place your cursor next to the +. This time, instead of completing the line by adding a closing bracket, press “Esc” on your keyboard. This will cancel the incomplete line of code. Then, you can add the missing ) in your script and rerun the newly completed line of code from the Source pane.\nThis second method is the one you should use when you are documenting your code in a script. If you don’t make the changes immediately in your script, you will forget and you will run into this error again in the future. Think of it like a pastry chef who realises that they need to put a little more baking powder in a cake batter for the texture to be just right, but does not make a note of that change in their recipe book. Next time, either the pastry chef, they will likely forget and not put the correct amount of baking powder. If it is one of their assistants who prepares the cake, they will not be able to know that the chef made that change!\nLearning to make sense of error messages is a very important skill that, like all skills, takes practice. Most errors are very easy to fix if you keep your cool. In fact, 90% of errors are simply typos.\n\n\n\n\n\n\nTask 1\n\n\n\nCopy and paste the following lines of code in a new .R script. Try to run each line individually. Each line will generate an error of some kind. In some cases, RStudio will warn you in advance that a line of code is likely wrong by displaying a red cross icon to the left of the erroneous line. If you hover over the red cross icon, RStudio will display a message that may help you to fix the error.\nCan you decode the error messages to find out what is causing these errors and fix these ten erroneous commands?\n\nmy.favourite.word &lt;- \"empathy\"\nmy.favourite.number &lt;- 13\n\n# Error 1:\nmy.favourite.number + my.favorite.number\n\n# Error 2:\nNegin-Fav-Word &lt;- \"Ach so!\" \n\n# Error 3:\nmy.favourite.numbers^2\n\n# Error 4:\nömers_favourite_ number &lt;- 52\n\n# Error 5:\n    ömers_favorite_number =   my.favourite..number\n\n# Error 6:\nmy.favourite.number*2 -&gt; half.my.fav.number\n\n# Error 7:\nrose's.favourite.number &lt;- 5\n\n# Error 8:\nBestWordEver &lt;- \"supercalifragilisticexpialidocious\n\n# Error 9:\n2FavNumbers &lt;- my.favourite.number + ömers_favourite_number\n\n# Error 10:\ngood.luck &lt;- موفق باشيد\"\n\n\n\n\n\n\n\n\n\nFigure 3.12: Debugging is an unavoidable part of writing code. If you’re stuck and starting to feel fustrated, the best thing you can usually do is to take a short break (artwork by @allison_horst).\n\n\n\n\n\n\n\n\n\nClick here for the solutions to Task 1\n\n\n\n\n\n\nThe first error was object 'my.favorite.number' not found. This means that the object my.favorite.number is not stored in your environment. If you think it is, the problem is most likely due to a typo. Here, my.favorite.number uses American English spelling, whereas we used British English spelling when we created the object. To correct the error, you need to use exactly the same spelling as when you created the object.\nThe second error is also object 'Negin' not found. However, here we do not expect an object called Negin to be in the environment because what we are actually trying to do is create and save a new object called Negin-Fav-Word! The problem is that R interprets the hyphens in this object name as “minus” and therefore tries to find the object Negin in order to then subtract Fav and Word from it. To correct this error, you need to remove the hyphens or replace them by dots.\nThe third error is yet another object not found error. It is another typo: the correct object name is not in the plural form.\nThe fourth error is Error: unexpected symbol in \"ömers_favourite_ number\". In addition, RStudio warned us that there were some “unexpected tokens” in this line of code. The unexpected item is the space between _ and number. To fix this error, you need to remove this space character.\nThe object my.favourite..number is not found because the name of the object saved in the environment does not have two consecutive dots. Note that the error does not come from the fact that this line begins with some white space and includes multiple space characters after the = sign. These added spaces make the line more difficult for us humans to read, but R simply ignores them. Hence, to fix this error, what you need to do is remove one of the consecutive dots in the object name. It is also worth noting that this line replaces the value originally stored in ömers_favorite_number with the value stored in my.favourite.number. If you check your environment pane, you will see that, once you have corrected the double dot, this line will change ömers_favorite_number to 13 - with no warning! In other words, here, the equal sign = behaves in the same way as the assignment operator &lt;-.\nIf you tried to run this line, you will have noticed that it does not actually generate an error. However, you may have noticed that the assignment operator is in the opposite direction. This means that my.favourite.number is multiplied by two and that this number is then assigned to a new object called half.my.fav.number. With this in mind, you will likely want to amend the line for the outcome to make mathematical sense (or rename the object).\nRunning this line will have caused you to run into a + situation in the console. As explained earlier in this chapter, to get out of it, you should first take your mouse cursor to the Console pane and then press “esc” on your keyboard to cancel this erroneous line. Whilst there is no error message to help you understand where the problem is coming from, RStudio helpfully displays a red cross icon to the left of the line; hovering over it displays a multi-line message. The first line is the relevant one: unexpected token 's.favourite.number &lt;- 5. This tells us that apostrophes are forbidden in object names. Remove the ' and the error will be fixed.\nThis line also causes a + situation. In this case, it is due to a missing quotation mark. To fix this error, first cancel the incomplete line of code by escaping it. Then, add the missing double quotation mark in your script and rerun the completed line.\nThe message Error: unexpected symbol in \"2FavNumbers\" is due to the fact that object names cannot start with a number. Change the object name to something like TwoFavNumbers or Fav2Numbers to fix the error.\nHere, too, the error message reads unexpected symbol. However, it is important to remember that the unexpected symbol is not within the character string, but rather within the command to assign the string to the object name good.luck. Hence, the problem is not that this string is in Persian, but rather that one of the quotation marks is missing. You can fix the error by ensuring that the phrase is enclosed in quotation marks.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Getting staRted</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "2024. LibreOffice. Wikipedia. https://en.wikipedia.org/w/index.php?title=LibreOffice&oldid=1218520104.\n\n\nParsons, Sam, Flávio Azevedo, Mahmoud M. Elsherif, Samuel Guay, Owen N.\nShahim, Gisela H. Govaart, Emma Norris, et al. 2022. A community-sourced\nglossary of open scholarship terms. Nature Human Behaviour.\nNature 6(3). 312–318. https://doi.org/10.1038/s41562-021-01269-4.\n\n\nR Core Team. 2024. R: A language and environment for statistical\ncomputing. R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nSilge, Julia. 2022. Janeaustenr: Jane austen’s complete novels.\nhttps://CRAN.R-project.org/package=janeaustenr.\n\n\nWinter, Bodo. 2019. Statistics for linguists: An introduction using\nr. Routledge. https://doi.org/10.4324/9781315165547.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "FurtherResources.html",
    "href": "FurtherResources.html",
    "title": "Appendix A — Next-step resources",
    "section": "",
    "text": "A.1 Recommended resources specific to the language sciences",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Next-step resources</span>"
    ]
  },
  {
    "objectID": "FurtherResources.html#recommended-resources-specific-to-the-language-sciences",
    "href": "FurtherResources.html#recommended-resources-specific-to-the-language-sciences",
    "title": "Appendix A — Next-step resources",
    "section": "",
    "text": "Brezina, Vaclav. 2018. Statistics in Corpus Linguistics: A Practical Guide. Cambridge: Cambridge University Press. https://doi.org/10.1017/9781316410899.\nDesagulier, Guillaume. 2017. Corpus Linguistics and Statistics with R: Introduction to Quantitative Methods in Linguistics (Quantitative Methods in the Humanities and Social Sciences). Cham: Springer International Publishing.\nGries, Stefan Thomas. 2013. Statistics for linguistics with R: a practical introduction. 2nd revised edition. Berlin: De Gruyter Mouton.\nLADAL contributors. Tutorials of the Language Technology and Data Analysis Laboratory. https://ladal.edu.au/tutorials.html Open Educational Resource.\nLevshina, Natalia. 2015. How to do linguistics with R: Data exploration and statistical analysis. Amsterdam: John Benjamins.\nSchneider, Dr Gerold & Max Lauber. 2020. Statistics for Linguists. https://dlf.uzh.ch/openbooks/statisticsforlinguists/ Open Educational Resource.\nWinter, Bodo. 2019. Statistics for Linguists: An Introduction Using R. New York: Routledge. https://doi.org/10.4324/9781315165547.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Next-step resources</span>"
    ]
  },
  {
    "objectID": "FurtherResources.html#further-open-educational-resources-in-no-particular-order",
    "href": "FurtherResources.html#further-open-educational-resources-in-no-particular-order",
    "title": "Appendix A — Next-step resources",
    "section": "A.2 Further Open Educational Resources (in no particular order)",
    "text": "A.2 Further Open Educational Resources (in no particular order)\n\nDiez, David, Mine Cetinkaya-Rundel, Christopher Barr & OpenIntro. 2015. OpenIntro Statistics. Leanpub. https://leanpub.next/os.\nGuide to Effect Sizes and Confidence Intervals: https://matthewbjane.quarto.pub/guide-to-effect-sizes-and-confidence-intervals/\nHappy Git and GitHub for the useR: https://happygitwithr.com/\nQuarto & reproducibility: https://ucsbcarpentry.github.io/Reproducible-Publications-with-RStudio-Quarto/index.html\nModern Data Visualization with R: https://rkabacoff.github.io/datavis\nBuilding reproducible analytical pipelines with R: https://raps-with-r.dev/\nModern Plain Text Computing: https://mptc.io/content/01-content.html\nhttps://www.data-to-viz.com/\nInterpreting data visualisation: https://pressbooks.library.torontomu.ca/criticaldataliteracy/\nImprove your statistical inferences: https://lakens.github.io/statistical_inferences/\nWhat they forgot to teach you about R: https://rstats.wtf/\nIntroduction to Data Science: https://florian-huber.github.io/data_science_course/book/cover.html\nData Science in Education Using R: https://datascienceineducation.com/\nModels Demystified: A Practical Guide from t-tests to Deep Learning https://m-clark.github.io/book-of-models/\nData Visualization in R https://datavizf23.classes.andrewheiss.com/\nR for Data Science https://r4ds.hadley.nz/intro",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Next-step resources</span>"
    ]
  }
]